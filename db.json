{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/photo.png","path":"images/photo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/animated.styl","path":"css/layout/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/basic.styl","path":"css/layout/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/keep-theme.styl","path":"css/layout/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/markdown.styl","path":"css/layout/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/variables.styl","path":"css/layout/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/code-theme.styl","path":"css/layout/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/copy-code.styl","path":"css/layout/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/highlight.styl","path":"css/layout/common/codeblock/highlight.styl","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/JS数组方法（ES5、ES6）.md","hash":"2274d0f5d2c0caefd72adf1ee2681e241309a448","modified":1607754275521},{"_id":"source/categories/index.md","hash":"36502109caae94d7427fd7149772826f75b09f9e","modified":1607752065149},{"_id":"source/about/index.md","hash":"66dd06b99e805f113c4713923f71c32139113274","modified":1607755389480},{"_id":"source/links/index.md","hash":"0ebdeaaba82c06fe18dc2eacd16d53c5233ca1fd","modified":1607755293014},{"_id":"source/tags/index.md","hash":"07efc605c9ba340e592c417c5623931876f3ce7d","modified":1607752002208},{"_id":"themes/hexo-theme-keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1607733991898},{"_id":"themes/hexo-theme-keep/README.md","hash":"fe2d13c16fc3d8080d9bb874f3985b12f6b7f97e","modified":1607733991903},{"_id":"themes/hexo-theme-keep/LICENSE","hash":"c6b9025c1a23ad625f9a151f51d55c82d7197d04","modified":1607733991902},{"_id":"themes/hexo-theme-keep/_config.yml","hash":"78bcd8ba405441abe628e9ac0612bbbdf0c289e2","modified":1607757394102},{"_id":"themes/hexo-theme-keep/package.json","hash":"b4a1e26e07ac68fb5a9d244880c29ac6a210e46b","modified":1607733991930},{"_id":"themes/hexo-theme-keep/docs/README_zh-CN.md","hash":"15fa8fa59246a0a0e33f7f92685c85c0291e3e6a","modified":1607733991904},{"_id":"themes/hexo-theme-keep/languages/en.yml","hash":"5f7c1e7033cd9aac6c9d70bbd20bf2a8d5d075bc","modified":1607733991905},{"_id":"themes/hexo-theme-keep/layout/article-content.ejs","hash":"91fd243ae35879d9504796bb01d9faa0729a3793","modified":1607733991923},{"_id":"themes/hexo-theme-keep/languages/zh-CN.yml","hash":"07ea7869cbbe71b41eec71711a7a24450529bd8a","modified":1607733991906},{"_id":"themes/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991922},{"_id":"themes/hexo-theme-keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1607733991922},{"_id":"themes/hexo-theme-keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1607733991924},{"_id":"themes/hexo-theme-keep/layout/category-content.ejs","hash":"2b02be4d5c2bfddabf2c8d00904780b1f42fc64d","modified":1607733991924},{"_id":"themes/hexo-theme-keep/layout/index.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991926},{"_id":"themes/hexo-theme-keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1607733991926},{"_id":"themes/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991925},{"_id":"themes/hexo-theme-keep/layout/layout.ejs","hash":"9e96ae5c3ff3d6e6cbdc91458e103c5efde02fe0","modified":1607733991927},{"_id":"themes/hexo-theme-keep/layout/page.ejs","hash":"ccece98aea8d8b0cd2d930249a9aa1d5fcf7a34f","modified":1607733991927},{"_id":"themes/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991928},{"_id":"themes/hexo-theme-keep/layout/tag-content.ejs","hash":"38c65415ac57cb4697fd2f6b2b68589a6121e8e6","modified":1607733991928},{"_id":"themes/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991929},{"_id":"themes/hexo-theme-keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1607733991933},{"_id":"themes/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"fc6994ec2ade2f6e3a3ea936a119c691a2d2f015","modified":1607733991908},{"_id":"themes/hexo-theme-keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1607733991909},{"_id":"themes/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"ad4cd1c8a60fc1bb17e2adf3bc8c09403d8f2e16","modified":1607733991913},{"_id":"themes/hexo-theme-keep/layout/_partial/article-meta-info.ejs","hash":"d1dfc686d6e3fe2f837107dc1384d0a92c346393","modified":1607733991910},{"_id":"themes/hexo-theme-keep/layout/_partial/empty-page.ejs","hash":"86cc40ff724b85ebf7e187069df1bae581152ef8","modified":1607733991912},{"_id":"themes/hexo-theme-keep/layout/_partial/footer.ejs","hash":"3bf4b82c12b1203e8e02667b8cc3a5e5fab9bfac","modified":1607733991914},{"_id":"themes/hexo-theme-keep/layout/_partial/friends-link.ejs","hash":"bb3d9bb7dd916a56acd3525d40c4671de46becf0","modified":1607733991914},{"_id":"themes/hexo-theme-keep/layout/_partial/header.ejs","hash":"759dfe19f0b1134612d3f9e090234f73a58b54af","modified":1607733991915},{"_id":"themes/hexo-theme-keep/layout/_partial/head.ejs","hash":"4fee2b0ecf8a75ab9ad5ffe866e5362857a677c7","modified":1607733991915},{"_id":"themes/hexo-theme-keep/layout/_partial/image-viewer.ejs","hash":"a0e996d7223eee4fa066392099d2ef5fe891beb7","modified":1607733991917},{"_id":"themes/hexo-theme-keep/layout/_partial/home-article-meta-info.ejs","hash":"d41025a930931182597fb75b6c106928a41086ba","modified":1607733991916},{"_id":"themes/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1607733991918},{"_id":"themes/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"e25f4a0164ea9947863270d491a47aaa287dbfc9","modified":1607733991917},{"_id":"themes/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"df990fd2f9617c6e3f39cd7cf68e88cb36bebfce","modified":1607733991919},{"_id":"themes/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"4bc87c76d9db14a1e2c7a2a7be275a04db82bea8","modified":1607733991920},{"_id":"themes/hexo-theme-keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1607733991931},{"_id":"themes/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"5a9db17c5dc212b9e43d812c35913396da97d4a0","modified":1607733991919},{"_id":"themes/hexo-theme-keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1607733991920},{"_id":"themes/hexo-theme-keep/layout/_partial/tools.ejs","hash":"5da98f7d190d0ca5295fb9d4da05913524c5a8a5","modified":1607733991921},{"_id":"themes/hexo-theme-keep/scripts/helpers/helper.js","hash":"8b932ab3a7c792caf8905726f0cb438170c47da5","modified":1607733991933},{"_id":"themes/hexo-theme-keep/scripts/helpers/export-config.js","hash":"7549b7dd480543ae3ae53edf8452886b91ba1841","modified":1607733991932},{"_id":"themes/hexo-theme-keep/source/js/back2top.js","hash":"1ebdd377f9fa15ffd700d558a7fb57a052fd04ff","modified":1607733991965},{"_id":"themes/hexo-theme-keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1607733991935},{"_id":"themes/hexo-theme-keep/source/css/style.styl","hash":"44312586f0345c174c013635f6c4eb43dd9ff8b4","modified":1607733991961},{"_id":"themes/hexo-theme-keep/source/js/dark-light-toggle.js","hash":"18001594c9ad88bd521f241f46d6c39df1e2f98a","modified":1607733991966},{"_id":"themes/hexo-theme-keep/source/js/code-copy.js","hash":"8e57906ab1ac62cbd200da6d399622198138677e","modified":1607733991966},{"_id":"themes/hexo-theme-keep/source/js/header-shrink.js","hash":"3f78150c0ce4e043180a31c5e23f72014bb63ffb","modified":1607733991967},{"_id":"themes/hexo-theme-keep/source/js/left-side-toggle.js","hash":"3ac1fa4219aafe8b6230d10aa4feacc56baf14f3","modified":1607733991968},{"_id":"themes/hexo-theme-keep/source/js/local-search.js","hash":"40aed1e50a99b8f2d1bbab03bd59a27728d74d2b","modified":1607733991970},{"_id":"themes/hexo-theme-keep/source/js/toc.js","hash":"20643f0efc4c35450eac153699e62c4c5c63284f","modified":1607733991971},{"_id":"themes/hexo-theme-keep/source/js/main.js","hash":"f2820de410b5e4364c2fb2ed34a87c2730e0f7cf","modified":1607733991970},{"_id":"themes/hexo-theme-keep/source/js/utils.js","hash":"7f995781ae1c5e67b26555ebdfa3ea53bcc640e0","modified":1607733991972},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1607733991985},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1607733991987},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1607733991989},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1607733991988},{"_id":"themes/hexo-theme-keep/source/images/avatar.png","hash":"0e2e964a17d55f5d4f0b54b6889a0d1c5bf6d5e4","modified":1607733991963},{"_id":"themes/hexo-theme-keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1607733991963},{"_id":"themes/hexo-theme-keep/source/images/logo.svg","hash":"d4d6a7296933263e7e5cab7134fb3e89a8cade7b","modified":1607733991964},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/gitalk.ejs","hash":"f363f84c01ae7ddbcae14dc466f9dfbefdc77484","modified":1607733991911},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"6ba96101c51f0590c673993c3ca2cb5fc5c874ce","modified":1607733991911},{"_id":"themes/hexo-theme-keep/source/css/layout/article-content.styl","hash":"5a52ab1d6eaa0d8c2557ca091dd3e388a8f97bac","modified":1607733991951},{"_id":"themes/hexo-theme-keep/source/css/layout/category-content.styl","hash":"48de2b88f5298fc03fc9b0897f29d2e6a6172c7c","modified":1607733991952},{"_id":"themes/hexo-theme-keep/source/css/layout/category-list.styl","hash":"4d153b8059939c9cdbc43880290f0c8a9edc2cfd","modified":1607733991952},{"_id":"themes/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"029b27b5a657dd33e5504cbb1695eddf102b9e15","modified":1607733991950},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/valine.ejs","hash":"6a3caccac5cc171858049d2b9d4e24192a47f5b9","modified":1607733991912},{"_id":"themes/hexo-theme-keep/source/css/layout/home-content.styl","hash":"eb834e1ccbdbfa23629fa232f23a716696446c3d","modified":1607733991960},{"_id":"themes/hexo-theme-keep/source/css/layout/page.styl","hash":"4ec77a4f6b2f4c1b20fab28b2cadc24d04045799","modified":1607733991960},{"_id":"themes/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"0b0b58e1411ed7b6c469256dcb05d859352ae232","modified":1607733991961},{"_id":"themes/hexo-theme-keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1607733991969},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"401a1bc3f26af42102cf6a3bdaa2eed0e41aeb83","modified":1607733991937},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/article-copyright-info.styl","hash":"d54580f11114b245cf5440e7766666e4deb7bf25","modified":1607733991938},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/empty-page.styl","hash":"97bc58519af617c40fc3a3aded807e49cf800343","modified":1607733991944},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/article-meta-info.styl","hash":"0a35ecab48044d192f941b67c68341877c89381a","modified":1607733991939},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"ea9891f0ccec86364d0e96bd661585582760ea93","modified":1607733991944},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"d6ad1f300a80bd136ecc9006cd29a3d43dfc90ae","modified":1607733991945},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"4d82aec76a9028f0591e180585200d4416cd630d","modified":1607733991945},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/image-viewer.styl","hash":"593522c52cc613eb83556d31b80c63918b50293b","modified":1607733991946},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1607733991947},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"c4b9285aa9a5958a179df43caa8a0cf667521681","modified":1607733991947},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"e6ef792c59b96decba5f8e2153eb0491b66cb4e9","modified":1607733991948},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"b5771974eb1199a49eed15705638c6c4d004c5f8","modified":1607733991949},{"_id":"themes/hexo-theme-keep/source/css/layout/common/animated.styl","hash":"8c2571ef37356eb6fb5aa30e4e3f413f97e0de03","modified":1607733991953},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/tools.styl","hash":"5e97cc656423ee2f2a9f81523548402ba12a0e4a","modified":1607733991950},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"51e1c53eb9a8f86b7ddd595c24b925188810454a","modified":1607733991949},{"_id":"themes/hexo-theme-keep/source/css/layout/common/basic.styl","hash":"a6af91c2965a55c69c5111d69ed9507140c17ab4","modified":1607733991954},{"_id":"themes/hexo-theme-keep/source/css/layout/common/keep-theme.styl","hash":"efd34a13da2d405f210bb43b7c8c7a758c38a8df","modified":1607733991958},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"7946661ccc25a5a5a54d93d4621598e88a2e89e4","modified":1607733991941},{"_id":"themes/hexo-theme-keep/source/css/layout/common/markdown.styl","hash":"ed0ff9336a73dd67c523a0e389660ed0eb9a1d4d","modified":1607733991958},{"_id":"themes/hexo-theme-keep/source/css/layout/common/variables.styl","hash":"17e669ee76a56dcee4f8d1f72e3f688cd769d0c7","modified":1607733991959},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"70148ada1bd5748202430a452b252104a045696e","modified":1607733991942},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"9702a4a6b9d7b9a194b018128db5425c52ec890f","modified":1607733991943},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/code-theme.styl","hash":"9abe251575fc39d5397b1b29b00c4c1dabfa5086","modified":1607733991955},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/copy-code.styl","hash":"ca92ef5c9494669d80465967fdd67f39d0810ad1","modified":1607733991956},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/highlight.styl","hash":"9bd3f13c2d978a4862636df07d80c727063dc372","modified":1607733991957},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1607733991984},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1607733991983},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1607733992002},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1607733992003},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1607733991974},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1607733991982},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1607733991986},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1607733991992},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1607733992001},{"_id":"themes/hexo-theme-keep/source/images/photo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607736381770},{"_id":"themes/hexo-theme-keep/source/images/logo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607736381770},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1607733991979},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1607733991998},{"_id":"public/categories/index.html","hash":"94052c4bec704addcf82b6fe22b6eb838d10f971","modified":1607759171711},{"_id":"public/links/index.html","hash":"69c9238c8cd0485d626d861db8f3b221ec74c984","modified":1607759171711},{"_id":"public/atom.xml","hash":"50fdf656c62b4cc6ca798ce5d6ef290ed131acd5","modified":1607759171711},{"_id":"public/search.xml","hash":"a852048d03923ddad6f52cf43bba041137e79048","modified":1607759171711},{"_id":"public/about/index.html","hash":"aa3ff205d3f45de5c5c7ed1266043fd925209674","modified":1607759171711},{"_id":"public/tags/index.html","hash":"8e9425dde467476b70496058f68d319f1ab8e335","modified":1607759171711},{"_id":"public/archives/index.html","hash":"ebcab55828422df75aae540cdc3872c1217bc84e","modified":1607759171711},{"_id":"public/archives/2020/index.html","hash":"c997d93e8a9e2df24b6cf25c71dba30e07f00722","modified":1607759171711},{"_id":"public/archives/2020/12/index.html","hash":"afdc933824484d3caeb7d5de57cb2060418f7810","modified":1607759171711},{"_id":"public/categories/JavaScript/index.html","hash":"f24d0278ed94d64e80fbdeb0e587f68e44a3a46b","modified":1607759171711},{"_id":"public/tags/array/index.html","hash":"474b52a500aeccef5eee9dfe480c2ae3ff627084","modified":1607759171711},{"_id":"public/index.html","hash":"3a750d14452ace49eb9844f9e541a2624c80f5e9","modified":1607759171711},{"_id":"public/2020/12/12/JS数组方法（ES5、ES6）/index.html","hash":"f1991d603374da6e2c93fb3e4679ddca096af093","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1607759171711},{"_id":"public/images/avatar.png","hash":"0e2e964a17d55f5d4f0b54b6889a0d1c5bf6d5e4","modified":1607759171711},{"_id":"public/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1607759171711},{"_id":"public/images/logo.svg","hash":"d4d6a7296933263e7e5cab7134fb3e89a8cade7b","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1607759171711},{"_id":"public/js/back2top.js","hash":"cd226f2e01a84c74e859dfd08ca1f5146011ae8b","modified":1607759171711},{"_id":"public/js/code-copy.js","hash":"68587d2b5af9c33a762d76ed7692089580a74d0f","modified":1607759171711},{"_id":"public/js/header-shrink.js","hash":"1cf440c53c202ffe120301766b90b3b2cca89c36","modified":1607759171711},{"_id":"public/js/left-side-toggle.js","hash":"d12ff633952d8ad469e659218617db3c9f199f9e","modified":1607759171711},{"_id":"public/js/dark-light-toggle.js","hash":"4d58ef9566f1785286a5ee5bc21c2063b117fe1b","modified":1607759171711},{"_id":"public/js/local-search.js","hash":"e161108a7d315816cd5602a42d1477f93902e0c5","modified":1607759171711},{"_id":"public/js/toc.js","hash":"cdeba4d4b6c1a63b5541ee59cdf78efa166d71a4","modified":1607759171711},{"_id":"public/js/utils.js","hash":"a1cc18daac12aef8b4293f866a9021e9f41de1d4","modified":1607759171711},{"_id":"public/js/main.js","hash":"566fe3add92a6058775bb616449299d66ef345d3","modified":1607759171711},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/article-content.css","hash":"70cda1e9d9b9205e447c98c24110f637d37c1049","modified":1607759171711},{"_id":"public/css/layout/category-list.css","hash":"0d23f6ebc9760a05b8c9e84a750545600090ced4","modified":1607759171711},{"_id":"public/css/layout/category-content.css","hash":"bd620b11d390a1c6d010ce8dbe9643dc45246a27","modified":1607759171711},{"_id":"public/css/layout/page.css","hash":"314259b0bfb97c323961149a17a4e47f4bf08041","modified":1607759171711},{"_id":"public/css/layout/home-content.css","hash":"4c015eaca142973c5efd8b4945605f03bb51f4b1","modified":1607759171711},{"_id":"public/css/layout/tag-content.css","hash":"3d1f21376cf0692a009ee20ca15b7e2886301a1c","modified":1607759171711},{"_id":"public/css/layout/common/animated.css","hash":"ffc3d829f365f82513e2d501fbe7f74d050e2efc","modified":1607759171711},{"_id":"public/css/layout/common/basic.css","hash":"1003ce91d8d76929dcaee04df4db78acf873d6b0","modified":1607759171711},{"_id":"public/css/layout/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/common/markdown.css","hash":"d5253332b48a74733f2ca0be41dad5a0abf49db3","modified":1607759171711},{"_id":"public/css/layout/common/variables.css","hash":"b0ffe83e1cf2680e00fc1950e030976ba0c8ff21","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/code-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/copy-code.css","hash":"c2040882967c341c815a8d11e02a2777560ee9ff","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/style.css","hash":"967840d0eb41cc4486ed19c582323d2c8b247222","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1607759171711},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1607759171711},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1607759171711},{"_id":"public/images/logo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607759171711},{"_id":"public/images/photo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1607759171711}],"Category":[{"name":"JavaScript","_id":"ckileat3e0003u8qc6jrygnux"}],"Data":[],"Page":[{"title":"categories","date":"2020-12-12T05:47:45.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-12 13:47:45\n---\n","updated":"2020-12-12T05:47:45.149Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckileat380000u8qc6ohthljo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"links","date":"2020-12-12T01:34:27.000Z","comment":true,"_content":"\n\n[卡布奇诺 - 博客园](https://www.cnblogs.com/Faith-Yin/)\n\n\n互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。\n\n> 名称：卡布奇诺 - 博客园\n> 链接：https://www.cnblogs.com/Faith-Yin/\n\n\n\n\n\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2020-12-12 09:34:27\ncomment: true\n---\n\n\n[卡布奇诺 - 博客园](https://www.cnblogs.com/Faith-Yin/)\n\n\n互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。\n\n> 名称：卡布奇诺 - 博客园\n> 链接：https://www.cnblogs.com/Faith-Yin/\n\n\n\n\n\n","updated":"2020-12-12T06:41:33.014Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckileat3d0002u8qc5fdd705d","content":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >卡布奇诺 - 博客园<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。</p>\n<blockquote>\n<p>名称：卡布奇诺 - 博客园<br>链接：<a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >https://www.cnblogs.com/Faith-Yin/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >卡布奇诺 - 博客园<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。</p>\n<blockquote>\n<p>名称：卡布奇诺 - 博客园<br>链接：<a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >https://www.cnblogs.com/Faith-Yin/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"about","date":"2020-12-12T01:33:41.000Z","comment":true,"_content":"\n记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-12 09:33:41\ncomment: true\n---\n\n记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~\n\n","updated":"2020-12-12T06:43:09.480Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckileat3f0005u8qcaod3gwst","content":"<p>记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~</p>\n"},{"title":"tags","date":"2020-12-12T05:46:42.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-12 13:46:42\n---\n","updated":"2020-12-12T05:46:42.208Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckileat3g0006u8qcatvr5ghr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS数组方法（ES5、ES6）","date":"2020-12-12T05:56:55.000Z","_content":"\n### 1. arr.push() \n从后面添加元素，添加一个或多个，返回值为添加完后的数组长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.push(6,7)) // 7\nconsole.log(arr) // [1,2,3,4,5,6,7]\n```\n\n### 2. arr.pop() \n从后面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.pop())  // 5\nconsole.log(arr)  // [1,2,3,4]\n```\n\n### 3. arr.shift() \n从前面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.shift())  // 1\nconsole.log(arr)  // [2,3,4,5]\n```\n\n\n### 4. arr.unshift() \n从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.unshift(6,7))  // 7\nconsole.log(arr)  // [6,7,1,2,3,4,5]\n```\n\n### 5. arr.splice(index,num) \n删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组\n\n参数：index 索引值，num 个数\n\n```javascript\n// 1. 删除数组中的某些项\nlet arr = [0, 1, 2, 3, 4]\nconsole.log(arr.splice(2, 2))  // [2, 3]\nconsole.log(arr)  // [0, 1, 4]\n\n// 2. 将数据添加至数组的特定索引位置index\nlet arr2 = [1, 2, 3, 4, 5]\narr2.splice(2, 0, '测试值')\nconsole.log(arr2) // [1, 2, \"测试值\", 3, 4, 5]\n```\n\n### 6. str.split() \n将字符串转化为数组\n\n```javascript\nlet str = '12345'\nconsole.log(str.split(''))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\nlet str1 = '1/2/3/4/5'\nconsole.log(str1.split('/'))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\n```\n\n### 7. arr.concat() \n连接两个数组，返回值是连接后的新数组\n\n```javascript\nlet arr = [1,2,3,4,5] 2 console.log(arr.concat([6,7]))  // [1,2,3,4,5,6,7]\nconsole.log(arr)  // [1,2,3,4,5]\n```\n\n### 8. arr.sort() \n将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）\n\n```javascript\nlet arr = [40,8,10,5,79,3] \nconsole.log(arr.sort())  // [10,3,40,5,79,8]\n\nlet arr2 = arr.sort((a,b) => a - b) 5 console.log(arr2)  // [3,5,8,10,40,79]\n\nlet arr3 = arr.sort((a,b) => b - a) 8 console.log(arr3)  // [79,40,10,8,5,3]\n```\n\n### 9. arr.reverse() \n将原数组反转，返回值是反转后的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.reverse())  // [5,4,3,2,1]\nconsole.log(arr)   // [5,4,3,2,1]\n```\n\n### 10. arr.slice(start, end) \n切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.slice(1,3))   // [2,3]\nconsole.log(arr)    // [1,2,3,4,5]\n```\n\n### 11. arr.forEach(callback) \n遍历数组，无返回值\n\n```javascript\nlet arr = [1,2,3,4,5]\narr.forEach((value, index, array) => {\n    console.log(`value--${value}    index--${index}    array--${array}`) \n})\n\n// value--1    index--0    array--1,2,3,4,5\n// value--2    index--1    array--1,2,3,4,5\n// value--3    index--2    array--1,2,3,4,5\n// value--4    index--3    array--1,2,3,4,5\n// value--5    index--4    array--1,2,3,4,5\n```\n\n### 12. arr.map(callbak) \n遍历数组(对原数组的值进行操作)，返回一个新数组\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nlet arr2 = arr.map( (value, index, array)=>{\n    return value = value * 2\n}) \nconsole.log(arr2) // [2,4,6,8,10]\n```\n\n### 13. arr.filter(callback) \n过滤数组，返回一个满足要求的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.filter((value, index) => value >2) \nconsole.log(arr2)  // [3,4,5]\n```\n\n### 14. arr.every(callback) \n根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.every((value, index) => index > 2) \nconsole.log(arr2)  // false\n\nlet arr3 = arr.every((value, index) => index > 0) \nconsole.log(arr3)  // true\n```\n\n### 15. arr.some(callback) \n根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.some((value, index) => index > 2)\nconsole.log(arr2) // true\n let arr3 = arr.some((value, index) => index > 5)\nconsole.log(arr3) // false\n```\n\n### 16. arr.indexOf() \n从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] 2 \nlet arr2 = arr.indexOf(4) \nconsole.log(arr2)  // 3\n\nlet arr3 = arr.indexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 17. arr.lastIndexOf()  \n从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] \nlet arr2 = arr.lastIndexOf(4) \nconsole.log(arr2)  // 5\n\nlet arr3 = arr.lastIndexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 18. Array.from() \n[ES6]将伪数组变成数组，只要有length的就可以转成数组\n\n```javascript\nlet str = '12345'\nconsole.log(Array.from(str))    // [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\nlet obj = {0:'a',1:'b',length:2}\nconsole.log(Array.from(obj))   // [\"a\", \"b\"]\n```\n\n### 19. Array.of()  \n[ES6]将一组值转换成数组，类似于声明数组\n\n```javascript\nlet str = '11'\nconsole.log(Array.of(str))   // ['11']\n\n等价于 \nconsole.log(new Array('11'))   // ['11]\n\nps:\nnew Array()有缺点，就是参数问题引起的重载\nconsole.log(new Array(2)) // [empty × 2] 是个空数组\nconsole.log(Array.of(2)) // [2]\n```\n\n### 20. arr.find(callback) \n[ES6]找到第一个符合条件的数组成员\n\n```javascript\nlet arr = [1,2,3,4,5,2,4] \nlet arr2 = arr.find((value, index, array) => value > 2) \nconsole.log(arr2)   // 3\n```\n\n### 21. arr.findIndex(callback) \n[ES6]找到第一个符合条件的数组成员的索引值\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr1 = arr.findIndex((value, index, array) => value > 2) \nconsole.log(arr1)  // 2\n```\n\n### 22. arr.includes() \n[ES6]判断数组中是否包含特定的值\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.includes(2)  \nconsole.log(arr2) // ture\n\nlet arr3 = arr.includes(9) \nconsole.log(arr3) // false\n\nlet arr4 = [1,2,3,NaN].includes(NaN)\nconsole.log(arr5) // true\n```\n\n### 23. arr.fill(target, start, end) \n[ES6]使用给定的值，填充一个数组（改变原数组）\n\n参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)\n       \n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.fill(5)\nconsole.log(arr2) // [5, 5, 5, 5, 5]\nconsole.log(arr)   // [5, 5, 5, 5, 5]\n\nlet arr3 = arr.fill(5,2)\nconsole.log(arr3)  // [1,2,5,5,5]\n\nlet arr4 = arr.fill(5,1,3)\nconsole.log(arr4)  // [1,5,5,4,5]\n```\n\n### 24. arr.keys() \n[ES6]遍历数组的键名\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.keys() \n\nfor (let key of arr2) { \n    console.log(key)   // 0,1,2,3,4\n}\n```\n\n### 25. arr.values() \n[ES6]遍历数组键值\n\n```javascript\nlet arr = [1,2,3,4,5]\nlet arr1 = arr.values() \n\nfor (let val of arr1) {\n     console.log(val); // 1,2,3,4,5\n}\n```\n\n### 26. arr.entries() \n[ES6]遍历数组的键名和键值\n\nentries() 方法返回迭代数组。\n迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.entries() \n\nfor (let e of arr2) { \n    console.log(e);   // [0,1] [1,2] [2,3] [3,4] [4,5]\n}\n```\n\n\n\n### 27.arr.copyWithin() \n[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组\n\n参数:　　target --必选 索引从该位置开始替换数组项\n　　　　 start --可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。\n　　　　 end --可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数\n\n```javascript\nlet arr = [1,2,3,4,5,6,7]\n\nlet arr2 = arr.copyWithin(1)\nconsole.log(arr2)   // [1, 1, 2, 3, 4, 5, 6]\n\nlet arr3 = arr.copyWithin(1,2)\nconsole.log(arr3)   // [1, 3, 4, 5, 6, 7, 7]\n\nlet arr4 = arr.copyWithin(1,2,4) \nconsole.log(arr4)   // [1, 3, 4, 4, 5, 6, 7]\n```\n\n### 28. Array.isArray(value) \n判断一个值是否为数组的方法，若为数组，返回true，反之返回false\n\n```javascript\nlet a = 1234\nlet b = \"fsaufh\"\nlet c = {a:1,b:2}\nlet d = [1,2]\n\nlet mark1 = Array.isArray(a) \n console.log(mark1)  // false\n\nlet mark2 = Array.isArray(b) \nconsole.log(mark2)  // false\n\nlet mark3 = Array.isArray(c) \nconsole.log(mark3)  // false\n\nlet mark4 = Array.isArray(d) \nconsole.log(mark4)  // true\n```\n\n### 29. arr.join(separate)\n把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nconsole.log(arr.join()) // 1,2,3,4,5\nconsole.log(arr.join(\"\")) // 12345\nconsole.log(arr.join(\"-\"))  // 1-2-3-4-5\n```\n\n### 30. arr.flat(pliy)\n[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组\n\n参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字\n\n```javascript\nlet arr = [1, 2, [3, [4, 5]]] \nconsole.log(arr.flat(2))  // [1, 2, 3, 4, 5]\n\nlet arr2 = [1,[2,[3,[4,5]]]] \nconsole.log(arr2.flat(Infinity))  // [1,2,3,4,5]\n```\n\n### 31. arr.flatMap()\n[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。\n\n```javascript\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n\nlet arr = [2, 3, 4]\narr.flatMap((x) => [x, x * 2]) 3 // [2, 4, 3, 6, 4, 8]\n```\n\n### 32. arr.toString()\n将数组转换为字符串并返回。数组中的元素之间用逗号分隔。\n\n```javascript\nlet arr = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]\nconsole.log(arr.toString())  // Banana,Orange,Apple,Mango\n```\n\n### 33. arr.reduce() \n对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。\n\n接收4个参数：\n\n1.  Accumulator (acc) (累计器)\n2.  Current Value (cur) (当前值)\n3.  Current Index (idx) (当前索引)\n4.  Source Array (src) (源数组)\n\n```javascript\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // expected output: 15\n```\n\n\n\n\n\n\n\n","source":"_posts/JS数组方法（ES5、ES6）.md","raw":"---\ntitle: JS数组方法（ES5、ES6）\ndate: 2020-12-12 13:56:55\ntags: array\ncategories: JavaScript\n---\n\n### 1. arr.push() \n从后面添加元素，添加一个或多个，返回值为添加完后的数组长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.push(6,7)) // 7\nconsole.log(arr) // [1,2,3,4,5,6,7]\n```\n\n### 2. arr.pop() \n从后面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.pop())  // 5\nconsole.log(arr)  // [1,2,3,4]\n```\n\n### 3. arr.shift() \n从前面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.shift())  // 1\nconsole.log(arr)  // [2,3,4,5]\n```\n\n\n### 4. arr.unshift() \n从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.unshift(6,7))  // 7\nconsole.log(arr)  // [6,7,1,2,3,4,5]\n```\n\n### 5. arr.splice(index,num) \n删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组\n\n参数：index 索引值，num 个数\n\n```javascript\n// 1. 删除数组中的某些项\nlet arr = [0, 1, 2, 3, 4]\nconsole.log(arr.splice(2, 2))  // [2, 3]\nconsole.log(arr)  // [0, 1, 4]\n\n// 2. 将数据添加至数组的特定索引位置index\nlet arr2 = [1, 2, 3, 4, 5]\narr2.splice(2, 0, '测试值')\nconsole.log(arr2) // [1, 2, \"测试值\", 3, 4, 5]\n```\n\n### 6. str.split() \n将字符串转化为数组\n\n```javascript\nlet str = '12345'\nconsole.log(str.split(''))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\nlet str1 = '1/2/3/4/5'\nconsole.log(str1.split('/'))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\n```\n\n### 7. arr.concat() \n连接两个数组，返回值是连接后的新数组\n\n```javascript\nlet arr = [1,2,3,4,5] 2 console.log(arr.concat([6,7]))  // [1,2,3,4,5,6,7]\nconsole.log(arr)  // [1,2,3,4,5]\n```\n\n### 8. arr.sort() \n将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）\n\n```javascript\nlet arr = [40,8,10,5,79,3] \nconsole.log(arr.sort())  // [10,3,40,5,79,8]\n\nlet arr2 = arr.sort((a,b) => a - b) 5 console.log(arr2)  // [3,5,8,10,40,79]\n\nlet arr3 = arr.sort((a,b) => b - a) 8 console.log(arr3)  // [79,40,10,8,5,3]\n```\n\n### 9. arr.reverse() \n将原数组反转，返回值是反转后的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.reverse())  // [5,4,3,2,1]\nconsole.log(arr)   // [5,4,3,2,1]\n```\n\n### 10. arr.slice(start, end) \n切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.slice(1,3))   // [2,3]\nconsole.log(arr)    // [1,2,3,4,5]\n```\n\n### 11. arr.forEach(callback) \n遍历数组，无返回值\n\n```javascript\nlet arr = [1,2,3,4,5]\narr.forEach((value, index, array) => {\n    console.log(`value--${value}    index--${index}    array--${array}`) \n})\n\n// value--1    index--0    array--1,2,3,4,5\n// value--2    index--1    array--1,2,3,4,5\n// value--3    index--2    array--1,2,3,4,5\n// value--4    index--3    array--1,2,3,4,5\n// value--5    index--4    array--1,2,3,4,5\n```\n\n### 12. arr.map(callbak) \n遍历数组(对原数组的值进行操作)，返回一个新数组\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nlet arr2 = arr.map( (value, index, array)=>{\n    return value = value * 2\n}) \nconsole.log(arr2) // [2,4,6,8,10]\n```\n\n### 13. arr.filter(callback) \n过滤数组，返回一个满足要求的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.filter((value, index) => value >2) \nconsole.log(arr2)  // [3,4,5]\n```\n\n### 14. arr.every(callback) \n根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.every((value, index) => index > 2) \nconsole.log(arr2)  // false\n\nlet arr3 = arr.every((value, index) => index > 0) \nconsole.log(arr3)  // true\n```\n\n### 15. arr.some(callback) \n根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.some((value, index) => index > 2)\nconsole.log(arr2) // true\n let arr3 = arr.some((value, index) => index > 5)\nconsole.log(arr3) // false\n```\n\n### 16. arr.indexOf() \n从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] 2 \nlet arr2 = arr.indexOf(4) \nconsole.log(arr2)  // 3\n\nlet arr3 = arr.indexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 17. arr.lastIndexOf()  \n从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] \nlet arr2 = arr.lastIndexOf(4) \nconsole.log(arr2)  // 5\n\nlet arr3 = arr.lastIndexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 18. Array.from() \n[ES6]将伪数组变成数组，只要有length的就可以转成数组\n\n```javascript\nlet str = '12345'\nconsole.log(Array.from(str))    // [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\nlet obj = {0:'a',1:'b',length:2}\nconsole.log(Array.from(obj))   // [\"a\", \"b\"]\n```\n\n### 19. Array.of()  \n[ES6]将一组值转换成数组，类似于声明数组\n\n```javascript\nlet str = '11'\nconsole.log(Array.of(str))   // ['11']\n\n等价于 \nconsole.log(new Array('11'))   // ['11]\n\nps:\nnew Array()有缺点，就是参数问题引起的重载\nconsole.log(new Array(2)) // [empty × 2] 是个空数组\nconsole.log(Array.of(2)) // [2]\n```\n\n### 20. arr.find(callback) \n[ES6]找到第一个符合条件的数组成员\n\n```javascript\nlet arr = [1,2,3,4,5,2,4] \nlet arr2 = arr.find((value, index, array) => value > 2) \nconsole.log(arr2)   // 3\n```\n\n### 21. arr.findIndex(callback) \n[ES6]找到第一个符合条件的数组成员的索引值\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr1 = arr.findIndex((value, index, array) => value > 2) \nconsole.log(arr1)  // 2\n```\n\n### 22. arr.includes() \n[ES6]判断数组中是否包含特定的值\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.includes(2)  \nconsole.log(arr2) // ture\n\nlet arr3 = arr.includes(9) \nconsole.log(arr3) // false\n\nlet arr4 = [1,2,3,NaN].includes(NaN)\nconsole.log(arr5) // true\n```\n\n### 23. arr.fill(target, start, end) \n[ES6]使用给定的值，填充一个数组（改变原数组）\n\n参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)\n       \n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.fill(5)\nconsole.log(arr2) // [5, 5, 5, 5, 5]\nconsole.log(arr)   // [5, 5, 5, 5, 5]\n\nlet arr3 = arr.fill(5,2)\nconsole.log(arr3)  // [1,2,5,5,5]\n\nlet arr4 = arr.fill(5,1,3)\nconsole.log(arr4)  // [1,5,5,4,5]\n```\n\n### 24. arr.keys() \n[ES6]遍历数组的键名\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.keys() \n\nfor (let key of arr2) { \n    console.log(key)   // 0,1,2,3,4\n}\n```\n\n### 25. arr.values() \n[ES6]遍历数组键值\n\n```javascript\nlet arr = [1,2,3,4,5]\nlet arr1 = arr.values() \n\nfor (let val of arr1) {\n     console.log(val); // 1,2,3,4,5\n}\n```\n\n### 26. arr.entries() \n[ES6]遍历数组的键名和键值\n\nentries() 方法返回迭代数组。\n迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.entries() \n\nfor (let e of arr2) { \n    console.log(e);   // [0,1] [1,2] [2,3] [3,4] [4,5]\n}\n```\n\n\n\n### 27.arr.copyWithin() \n[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组\n\n参数:　　target --必选 索引从该位置开始替换数组项\n　　　　 start --可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。\n　　　　 end --可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数\n\n```javascript\nlet arr = [1,2,3,4,5,6,7]\n\nlet arr2 = arr.copyWithin(1)\nconsole.log(arr2)   // [1, 1, 2, 3, 4, 5, 6]\n\nlet arr3 = arr.copyWithin(1,2)\nconsole.log(arr3)   // [1, 3, 4, 5, 6, 7, 7]\n\nlet arr4 = arr.copyWithin(1,2,4) \nconsole.log(arr4)   // [1, 3, 4, 4, 5, 6, 7]\n```\n\n### 28. Array.isArray(value) \n判断一个值是否为数组的方法，若为数组，返回true，反之返回false\n\n```javascript\nlet a = 1234\nlet b = \"fsaufh\"\nlet c = {a:1,b:2}\nlet d = [1,2]\n\nlet mark1 = Array.isArray(a) \n console.log(mark1)  // false\n\nlet mark2 = Array.isArray(b) \nconsole.log(mark2)  // false\n\nlet mark3 = Array.isArray(c) \nconsole.log(mark3)  // false\n\nlet mark4 = Array.isArray(d) \nconsole.log(mark4)  // true\n```\n\n### 29. arr.join(separate)\n把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nconsole.log(arr.join()) // 1,2,3,4,5\nconsole.log(arr.join(\"\")) // 12345\nconsole.log(arr.join(\"-\"))  // 1-2-3-4-5\n```\n\n### 30. arr.flat(pliy)\n[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组\n\n参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字\n\n```javascript\nlet arr = [1, 2, [3, [4, 5]]] \nconsole.log(arr.flat(2))  // [1, 2, 3, 4, 5]\n\nlet arr2 = [1,[2,[3,[4,5]]]] \nconsole.log(arr2.flat(Infinity))  // [1,2,3,4,5]\n```\n\n### 31. arr.flatMap()\n[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。\n\n```javascript\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n\nlet arr = [2, 3, 4]\narr.flatMap((x) => [x, x * 2]) 3 // [2, 4, 3, 6, 4, 8]\n```\n\n### 32. arr.toString()\n将数组转换为字符串并返回。数组中的元素之间用逗号分隔。\n\n```javascript\nlet arr = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]\nconsole.log(arr.toString())  // Banana,Orange,Apple,Mango\n```\n\n### 33. arr.reduce() \n对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。\n\n接收4个参数：\n\n1.  Accumulator (acc) (累计器)\n2.  Current Value (cur) (当前值)\n3.  Current Index (idx) (当前索引)\n4.  Source Array (src) (源数组)\n\n```javascript\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // expected output: 15\n```\n\n\n\n\n\n\n\n","slug":"JS数组方法（ES5、ES6）","published":1,"updated":"2020-12-12T06:24:35.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckileat3b0001u8qc8rs9gu7b","content":"<h3 id=\"1-arr-push\"><a href=\"#1-arr-push\" class=\"headerlink\" title=\"1. arr.push()\"></a>1. arr.push()</h3><p>从后面添加元素，添加一个或多个，返回值为添加完后的数组长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-arr-pop\"><a href=\"#2-arr-pop\" class=\"headerlink\" title=\"2. arr.pop()\"></a>2. arr.pop()</h3><p>从后面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop())  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-arr-shift\"><a href=\"#3-arr-shift\" class=\"headerlink\" title=\"3. arr.shift()\"></a>3. arr.shift()</h3><p>从前面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift())  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-arr-unshift\"><a href=\"#4-arr-unshift\" class=\"headerlink\" title=\"4. arr.unshift()\"></a>4. arr.unshift()</h3><p>从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">6</span>,<span class=\"number\">7</span>))  <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [6,7,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-arr-splice-index-num\"><a href=\"#5-arr-splice-index-num\" class=\"headerlink\" title=\"5. arr.splice(index,num)\"></a>5. arr.splice(index,num)</h3><p>删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组</p>\n<p>参数：index 索引值，num 个数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 删除数组中的某些项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>))  <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [0, 1, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将数据添加至数组的特定索引位置index</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">arr2.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;测试值&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [1, 2, &quot;测试值&quot;, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-str-split\"><a href=\"#6-str-split\" class=\"headerlink\" title=\"6. str.split()\"></a>6. str.split()</h3><p>将字符串转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&#x27;&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&#x27;1/2/3/4/5&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.split(<span class=\"string\">&#x27;/&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-arr-concat\"><a href=\"#7-arr-concat\" class=\"headerlink\" title=\"7. arr.concat()\"></a>7. arr.concat()</h3><p>连接两个数组，返回值是连接后的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] <span class=\"number\">2</span> <span class=\"built_in\">console</span>.log(arr.concat([<span class=\"number\">6</span>,<span class=\"number\">7</span>]))  <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-arr-sort\"><a href=\"#8-arr-sort\" class=\"headerlink\" title=\"8. arr.sort()\"></a>8. arr.sort()</h3><p>将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">40</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">79</span>,<span class=\"number\">3</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort())  <span class=\"comment\">// [10,3,40,5,79,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b) <span class=\"number\">5</span> <span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,5,8,10,40,79]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> b - a) <span class=\"number\">8</span> <span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [79,40,10,8,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-arr-reverse\"><a href=\"#9-arr-reverse\" class=\"headerlink\" title=\"9. arr.reverse()\"></a>9. arr.reverse()</h3><p>将原数组反转，返回值是反转后的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse())  <span class=\"comment\">// [5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-arr-slice-start-end\"><a href=\"#10-arr-slice-start-end\" class=\"headerlink\" title=\"10. arr.slice(start, end)\"></a>10. arr.slice(start, end)</h3><p>切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>))   <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)    <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-arr-forEach-callback\"><a href=\"#11-arr-forEach-callback\" class=\"headerlink\" title=\"11. arr.forEach(callback)\"></a>11. arr.forEach(callback)</h3><p>遍历数组，无返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`value--<span class=\"subst\">$&#123;value&#125;</span>    index--<span class=\"subst\">$&#123;index&#125;</span>    array--<span class=\"subst\">$&#123;array&#125;</span>`</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// value--1    index--0    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--2    index--1    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--3    index--2    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--4    index--3    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--5    index--4    array--1,2,3,4,5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-arr-map-callbak\"><a href=\"#12-arr-map-callbak\" class=\"headerlink\" title=\"12. arr.map(callbak)\"></a>12. arr.map(callbak)</h3><p>遍历数组(对原数组的值进行操作)，返回一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.map( <span class=\"function\">(<span class=\"params\">value, index, array</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value = value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-arr-filter-callback\"><a href=\"#13-arr-filter-callback\" class=\"headerlink\" title=\"13. arr.filter(callback)\"></a>13. arr.filter(callback)</h3><p>过滤数组，返回一个满足要求的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> value &gt;<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-arr-every-callback\"><a href=\"#14-arr-every-callback\" class=\"headerlink\" title=\"14. arr.every(callback)\"></a>14. arr.every(callback)</h3><p>根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-arr-some-callback\"><a href=\"#15-arr-some-callback\" class=\"headerlink\" title=\"15. arr.some(callback)\"></a>15. arr.some(callback)</h3><p>根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// true</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr3 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-arr-indexOf\"><a href=\"#16-arr-indexOf\" class=\"headerlink\" title=\"16. arr.indexOf()\"></a>16. arr.indexOf()</h3><p>从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.indexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.indexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-arr-lastIndexOf\"><a href=\"#17-arr-lastIndexOf\" class=\"headerlink\" title=\"17. arr.lastIndexOf()\"></a>17. arr.lastIndexOf()</h3><p>从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.lastIndexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.lastIndexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Array-from\"><a href=\"#18-Array-from\" class=\"headerlink\" title=\"18. Array.from()\"></a>18. Array.from()</h3><p>[ES6]将伪数组变成数组，只要有length的就可以转成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))    <span class=\"comment\">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(obj))   <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-Array-of\"><a href=\"#19-Array-of\" class=\"headerlink\" title=\"19. Array.of()\"></a>19. Array.of()</h3><p>[ES6]将一组值转换成数组，类似于声明数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;11&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(str))   <span class=\"comment\">// [&#x27;11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于 </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;11&#x27;</span>))   <span class=\"comment\">// [&#x27;11]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()有缺点，就是参数问题引起的重载</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)) <span class=\"comment\">// [empty × 2] 是个空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>)) <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-arr-find-callback\"><a href=\"#20-arr-find-callback\" class=\"headerlink\" title=\"20. arr.find(callback)\"></a>20. arr.find(callback)</h3><p>[ES6]找到第一个符合条件的数组成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.find(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-arr-findIndex-callback\"><a href=\"#21-arr-findIndex-callback\" class=\"headerlink\" title=\"21. arr.findIndex(callback)\"></a>21. arr.findIndex(callback)</h3><p>[ES6]找到第一个符合条件的数组成员的索引值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.findIndex(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-arr-includes\"><a href=\"#22-arr-includes\" class=\"headerlink\" title=\"22. arr.includes()\"></a>22. arr.includes()</h3><p>[ES6]判断数组中是否包含特定的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.includes(<span class=\"number\">2</span>)  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.includes(<span class=\"number\">9</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-arr-fill-target-start-end\"><a href=\"#23-arr-fill-target-start-end\" class=\"headerlink\" title=\"23. arr.fill(target, start, end)\"></a>23. arr.fill(target, start, end)</h3><p>[ES6]使用给定的值，填充一个数组（改变原数组）</p>\n<p>参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.fill(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [1,2,5,5,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)  <span class=\"comment\">// [1,5,5,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24-arr-keys\"><a href=\"#24-arr-keys\" class=\"headerlink\" title=\"24. arr.keys()\"></a>24. arr.keys()</h3><p>[ES6]遍历数组的键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.keys() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)   <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25-arr-values\"><a href=\"#25-arr-values\" class=\"headerlink\" title=\"25. arr.values()\"></a>25. arr.values()</h3><p>[ES6]遍历数组键值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.values() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr1) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-arr-entries\"><a href=\"#26-arr-entries\" class=\"headerlink\" title=\"26. arr.entries()\"></a>26. arr.entries()</h3><p>[ES6]遍历数组的键名和键值</p>\n<p>entries() 方法返回迭代数组。<br>迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.entries() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);   <span class=\"comment\">// [0,1] [1,2] [2,3] [3,4] [4,5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"27-arr-copyWithin\"><a href=\"#27-arr-copyWithin\" class=\"headerlink\" title=\"27.arr.copyWithin()\"></a>27.arr.copyWithin()</h3><p>[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组</p>\n<p>参数:　　target –必选 索引从该位置开始替换数组项<br>　　　　 start –可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。<br>　　　　 end –可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.copyWithin(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// [1, 1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)   <span class=\"comment\">// [1, 3, 4, 5, 6, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)   <span class=\"comment\">// [1, 3, 4, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-Array-isArray-value\"><a href=\"#28-Array-isArray-value\" class=\"headerlink\" title=\"28. Array.isArray(value)\"></a>28. Array.isArray(value)</h3><p>判断一个值是否为数组的方法，若为数组，返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&quot;fsaufh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"built_in\">Array</span>.isArray(a) </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(mark1)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"built_in\">Array</span>.isArray(b) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"built_in\">Array</span>.isArray(c) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark3)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark4 = <span class=\"built_in\">Array</span>.isArray(d) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark4)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29-arr-join-separate\"><a href=\"#29-arr-join-separate\" class=\"headerlink\" title=\"29. arr.join(separate)\"></a>29. arr.join(separate)</h3><p>把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;&quot;</span>)) <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>))  <span class=\"comment\">// 1-2-3-4-5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30-arr-flat-pliy\"><a href=\"#30-arr-flat-pliy\" class=\"headerlink\" title=\"30. arr.flat(pliy)\"></a>30. arr.flat(pliy)</h3><p>[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组</p>\n<p>参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">2</span>))  <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31-arr-flatMap\"><a href=\"#31-arr-flatMap\" class=\"headerlink\" title=\"31. arr.flatMap()\"></a>31. arr.flatMap()</h3><p>[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr.flatMap(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> [x, x * <span class=\"number\">2</span>]) <span class=\"number\">3</span> <span class=\"comment\">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-arr-toString\"><a href=\"#32-arr-toString\" class=\"headerlink\" title=\"32. arr.toString()\"></a>32. arr.toString()</h3><p>将数组转换为字符串并返回。数组中的元素之间用逗号分隔。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString())  <span class=\"comment\">// Banana,Orange,Apple,Mango</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33-arr-reduce\"><a href=\"#33-arr-reduce\" class=\"headerlink\" title=\"33. arr.reduce()\"></a>33. arr.reduce()</h3><p>对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。</p>\n<p>接收4个参数：</p>\n<ol>\n<li> Accumulator (acc) (累计器)</li>\n<li> Current Value (cur) (当前值)</li>\n<li> Current Index (idx) (当前索引)</li>\n<li> Source Array (src) (源数组)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue; <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer)); <span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5 + 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>)); <span class=\"comment\">// expected output: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-arr-push\"><a href=\"#1-arr-push\" class=\"headerlink\" title=\"1. arr.push()\"></a>1. arr.push()</h3><p>从后面添加元素，添加一个或多个，返回值为添加完后的数组长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-arr-pop\"><a href=\"#2-arr-pop\" class=\"headerlink\" title=\"2. arr.pop()\"></a>2. arr.pop()</h3><p>从后面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop())  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-arr-shift\"><a href=\"#3-arr-shift\" class=\"headerlink\" title=\"3. arr.shift()\"></a>3. arr.shift()</h3><p>从前面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift())  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-arr-unshift\"><a href=\"#4-arr-unshift\" class=\"headerlink\" title=\"4. arr.unshift()\"></a>4. arr.unshift()</h3><p>从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">6</span>,<span class=\"number\">7</span>))  <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [6,7,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-arr-splice-index-num\"><a href=\"#5-arr-splice-index-num\" class=\"headerlink\" title=\"5. arr.splice(index,num)\"></a>5. arr.splice(index,num)</h3><p>删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组</p>\n<p>参数：index 索引值，num 个数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 删除数组中的某些项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>))  <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [0, 1, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将数据添加至数组的特定索引位置index</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">arr2.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;测试值&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [1, 2, &quot;测试值&quot;, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-str-split\"><a href=\"#6-str-split\" class=\"headerlink\" title=\"6. str.split()\"></a>6. str.split()</h3><p>将字符串转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&#x27;&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&#x27;1/2/3/4/5&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.split(<span class=\"string\">&#x27;/&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-arr-concat\"><a href=\"#7-arr-concat\" class=\"headerlink\" title=\"7. arr.concat()\"></a>7. arr.concat()</h3><p>连接两个数组，返回值是连接后的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] <span class=\"number\">2</span> <span class=\"built_in\">console</span>.log(arr.concat([<span class=\"number\">6</span>,<span class=\"number\">7</span>]))  <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-arr-sort\"><a href=\"#8-arr-sort\" class=\"headerlink\" title=\"8. arr.sort()\"></a>8. arr.sort()</h3><p>将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">40</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">79</span>,<span class=\"number\">3</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort())  <span class=\"comment\">// [10,3,40,5,79,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b) <span class=\"number\">5</span> <span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,5,8,10,40,79]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> b - a) <span class=\"number\">8</span> <span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [79,40,10,8,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-arr-reverse\"><a href=\"#9-arr-reverse\" class=\"headerlink\" title=\"9. arr.reverse()\"></a>9. arr.reverse()</h3><p>将原数组反转，返回值是反转后的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse())  <span class=\"comment\">// [5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-arr-slice-start-end\"><a href=\"#10-arr-slice-start-end\" class=\"headerlink\" title=\"10. arr.slice(start, end)\"></a>10. arr.slice(start, end)</h3><p>切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>))   <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)    <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-arr-forEach-callback\"><a href=\"#11-arr-forEach-callback\" class=\"headerlink\" title=\"11. arr.forEach(callback)\"></a>11. arr.forEach(callback)</h3><p>遍历数组，无返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`value--<span class=\"subst\">$&#123;value&#125;</span>    index--<span class=\"subst\">$&#123;index&#125;</span>    array--<span class=\"subst\">$&#123;array&#125;</span>`</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// value--1    index--0    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--2    index--1    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--3    index--2    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--4    index--3    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--5    index--4    array--1,2,3,4,5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-arr-map-callbak\"><a href=\"#12-arr-map-callbak\" class=\"headerlink\" title=\"12. arr.map(callbak)\"></a>12. arr.map(callbak)</h3><p>遍历数组(对原数组的值进行操作)，返回一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.map( <span class=\"function\">(<span class=\"params\">value, index, array</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value = value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-arr-filter-callback\"><a href=\"#13-arr-filter-callback\" class=\"headerlink\" title=\"13. arr.filter(callback)\"></a>13. arr.filter(callback)</h3><p>过滤数组，返回一个满足要求的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> value &gt;<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-arr-every-callback\"><a href=\"#14-arr-every-callback\" class=\"headerlink\" title=\"14. arr.every(callback)\"></a>14. arr.every(callback)</h3><p>根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-arr-some-callback\"><a href=\"#15-arr-some-callback\" class=\"headerlink\" title=\"15. arr.some(callback)\"></a>15. arr.some(callback)</h3><p>根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// true</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr3 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-arr-indexOf\"><a href=\"#16-arr-indexOf\" class=\"headerlink\" title=\"16. arr.indexOf()\"></a>16. arr.indexOf()</h3><p>从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.indexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.indexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-arr-lastIndexOf\"><a href=\"#17-arr-lastIndexOf\" class=\"headerlink\" title=\"17. arr.lastIndexOf()\"></a>17. arr.lastIndexOf()</h3><p>从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.lastIndexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.lastIndexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Array-from\"><a href=\"#18-Array-from\" class=\"headerlink\" title=\"18. Array.from()\"></a>18. Array.from()</h3><p>[ES6]将伪数组变成数组，只要有length的就可以转成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))    <span class=\"comment\">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(obj))   <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-Array-of\"><a href=\"#19-Array-of\" class=\"headerlink\" title=\"19. Array.of()\"></a>19. Array.of()</h3><p>[ES6]将一组值转换成数组，类似于声明数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;11&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(str))   <span class=\"comment\">// [&#x27;11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于 </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;11&#x27;</span>))   <span class=\"comment\">// [&#x27;11]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()有缺点，就是参数问题引起的重载</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)) <span class=\"comment\">// [empty × 2] 是个空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>)) <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-arr-find-callback\"><a href=\"#20-arr-find-callback\" class=\"headerlink\" title=\"20. arr.find(callback)\"></a>20. arr.find(callback)</h3><p>[ES6]找到第一个符合条件的数组成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.find(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-arr-findIndex-callback\"><a href=\"#21-arr-findIndex-callback\" class=\"headerlink\" title=\"21. arr.findIndex(callback)\"></a>21. arr.findIndex(callback)</h3><p>[ES6]找到第一个符合条件的数组成员的索引值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.findIndex(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-arr-includes\"><a href=\"#22-arr-includes\" class=\"headerlink\" title=\"22. arr.includes()\"></a>22. arr.includes()</h3><p>[ES6]判断数组中是否包含特定的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.includes(<span class=\"number\">2</span>)  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.includes(<span class=\"number\">9</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-arr-fill-target-start-end\"><a href=\"#23-arr-fill-target-start-end\" class=\"headerlink\" title=\"23. arr.fill(target, start, end)\"></a>23. arr.fill(target, start, end)</h3><p>[ES6]使用给定的值，填充一个数组（改变原数组）</p>\n<p>参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.fill(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [1,2,5,5,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)  <span class=\"comment\">// [1,5,5,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24-arr-keys\"><a href=\"#24-arr-keys\" class=\"headerlink\" title=\"24. arr.keys()\"></a>24. arr.keys()</h3><p>[ES6]遍历数组的键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.keys() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)   <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25-arr-values\"><a href=\"#25-arr-values\" class=\"headerlink\" title=\"25. arr.values()\"></a>25. arr.values()</h3><p>[ES6]遍历数组键值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.values() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr1) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-arr-entries\"><a href=\"#26-arr-entries\" class=\"headerlink\" title=\"26. arr.entries()\"></a>26. arr.entries()</h3><p>[ES6]遍历数组的键名和键值</p>\n<p>entries() 方法返回迭代数组。<br>迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.entries() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);   <span class=\"comment\">// [0,1] [1,2] [2,3] [3,4] [4,5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"27-arr-copyWithin\"><a href=\"#27-arr-copyWithin\" class=\"headerlink\" title=\"27.arr.copyWithin()\"></a>27.arr.copyWithin()</h3><p>[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组</p>\n<p>参数:　　target –必选 索引从该位置开始替换数组项<br>　　　　 start –可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。<br>　　　　 end –可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.copyWithin(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// [1, 1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)   <span class=\"comment\">// [1, 3, 4, 5, 6, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)   <span class=\"comment\">// [1, 3, 4, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-Array-isArray-value\"><a href=\"#28-Array-isArray-value\" class=\"headerlink\" title=\"28. Array.isArray(value)\"></a>28. Array.isArray(value)</h3><p>判断一个值是否为数组的方法，若为数组，返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&quot;fsaufh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"built_in\">Array</span>.isArray(a) </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(mark1)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"built_in\">Array</span>.isArray(b) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"built_in\">Array</span>.isArray(c) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark3)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark4 = <span class=\"built_in\">Array</span>.isArray(d) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark4)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29-arr-join-separate\"><a href=\"#29-arr-join-separate\" class=\"headerlink\" title=\"29. arr.join(separate)\"></a>29. arr.join(separate)</h3><p>把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;&quot;</span>)) <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>))  <span class=\"comment\">// 1-2-3-4-5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30-arr-flat-pliy\"><a href=\"#30-arr-flat-pliy\" class=\"headerlink\" title=\"30. arr.flat(pliy)\"></a>30. arr.flat(pliy)</h3><p>[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组</p>\n<p>参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">2</span>))  <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31-arr-flatMap\"><a href=\"#31-arr-flatMap\" class=\"headerlink\" title=\"31. arr.flatMap()\"></a>31. arr.flatMap()</h3><p>[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr.flatMap(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> [x, x * <span class=\"number\">2</span>]) <span class=\"number\">3</span> <span class=\"comment\">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-arr-toString\"><a href=\"#32-arr-toString\" class=\"headerlink\" title=\"32. arr.toString()\"></a>32. arr.toString()</h3><p>将数组转换为字符串并返回。数组中的元素之间用逗号分隔。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString())  <span class=\"comment\">// Banana,Orange,Apple,Mango</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33-arr-reduce\"><a href=\"#33-arr-reduce\" class=\"headerlink\" title=\"33. arr.reduce()\"></a>33. arr.reduce()</h3><p>对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。</p>\n<p>接收4个参数：</p>\n<ol>\n<li> Accumulator (acc) (累计器)</li>\n<li> Current Value (cur) (当前值)</li>\n<li> Current Index (idx) (当前索引)</li>\n<li> Source Array (src) (源数组)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue; <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer)); <span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5 + 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>)); <span class=\"comment\">// expected output: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckileat3b0001u8qc8rs9gu7b","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckileat3h0008u8qcbq5uggxo"}],"PostTag":[{"post_id":"ckileat3b0001u8qc8rs9gu7b","tag_id":"ckileat3f0004u8qchd7w2jig","_id":"ckileat3h0007u8qc7lniahp2"}],"Tag":[{"name":"array","_id":"ckileat3f0004u8qchd7w2jig"}]}}