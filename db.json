{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-keep/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/back2top.js","path":"js/back2top.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/code-copy.js","path":"js/code-copy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/dark-light-toggle.js","path":"js/dark-light-toggle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/header-shrink.js","path":"js/header-shrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/left-side-toggle.js","path":"js/left-side-toggle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.eot","path":"webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.svg","path":"webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff","path":"webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.eot","path":"webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.svg","path":"webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff","path":"webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.eot","path":"webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.svg","path":"webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff","path":"webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/bg.svg","path":"images/bg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/photo.png","path":"images/photo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/animated.styl","path":"css/layout/common/animated.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/basic.styl","path":"css/layout/common/basic.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/keep-theme.styl","path":"css/layout/common/keep-theme.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/markdown.styl","path":"css/layout/common/markdown.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/variables.styl","path":"css/layout/common/variables.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/code-theme.styl","path":"css/layout/common/codeblock/code-theme.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/copy-code.styl","path":"css/layout/common/codeblock/copy-code.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/highlight.styl","path":"css/layout/common/codeblock/highlight.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/bgc-01.jpg","path":"images/bgc-01.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-keep/source/images/bgc-02.jpg","path":"images/bgc-02.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/JS数组方法（ES5、ES6）.md","hash":"2274d0f5d2c0caefd72adf1ee2681e241309a448","modified":1607754275521},{"_id":"source/categories/index.md","hash":"36502109caae94d7427fd7149772826f75b09f9e","modified":1607752065149},{"_id":"source/about/index.md","hash":"66dd06b99e805f113c4713923f71c32139113274","modified":1607755389480},{"_id":"source/links/index.md","hash":"0ebdeaaba82c06fe18dc2eacd16d53c5233ca1fd","modified":1607755293014},{"_id":"source/tags/index.md","hash":"07efc605c9ba340e592c417c5623931876f3ce7d","modified":1607752002208},{"_id":"themes/hexo-theme-keep/.editorconfig","hash":"26a27140a04ad1873639b19f8240fb2bae367878","modified":1607733991898},{"_id":"themes/hexo-theme-keep/README.md","hash":"fe2d13c16fc3d8080d9bb874f3985b12f6b7f97e","modified":1607733991903},{"_id":"themes/hexo-theme-keep/LICENSE","hash":"c6b9025c1a23ad625f9a151f51d55c82d7197d04","modified":1607733991902},{"_id":"themes/hexo-theme-keep/_config.yml","hash":"56cc228936a66420b6dd520805a34cf784ffb38f","modified":1607762941077},{"_id":"themes/hexo-theme-keep/package.json","hash":"b4a1e26e07ac68fb5a9d244880c29ac6a210e46b","modified":1607733991930},{"_id":"themes/hexo-theme-keep/docs/README_zh-CN.md","hash":"15fa8fa59246a0a0e33f7f92685c85c0291e3e6a","modified":1607733991904},{"_id":"themes/hexo-theme-keep/languages/en.yml","hash":"5f7c1e7033cd9aac6c9d70bbd20bf2a8d5d075bc","modified":1607733991905},{"_id":"themes/hexo-theme-keep/layout/article-content.ejs","hash":"91fd243ae35879d9504796bb01d9faa0729a3793","modified":1607733991923},{"_id":"themes/hexo-theme-keep/languages/zh-CN.yml","hash":"07ea7869cbbe71b41eec71711a7a24450529bd8a","modified":1607733991906},{"_id":"themes/hexo-theme-keep/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991922},{"_id":"themes/hexo-theme-keep/layout/archive-content.ejs","hash":"89e256133a128858702f3bd0a6cf8330f5a8f2f7","modified":1607733991922},{"_id":"themes/hexo-theme-keep/layout/category-list.ejs","hash":"17ea257cb28fb63c1e1650c157541d90a4f7fba5","modified":1607733991924},{"_id":"themes/hexo-theme-keep/layout/category-content.ejs","hash":"2b02be4d5c2bfddabf2c8d00904780b1f42fc64d","modified":1607733991924},{"_id":"themes/hexo-theme-keep/layout/index.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991926},{"_id":"themes/hexo-theme-keep/layout/home-content.ejs","hash":"c6897b9a1f88f157bf9cb935fba43a13911871eb","modified":1607733991926},{"_id":"themes/hexo-theme-keep/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991925},{"_id":"themes/hexo-theme-keep/layout/layout.ejs","hash":"9e96ae5c3ff3d6e6cbdc91458e103c5efde02fe0","modified":1607733991927},{"_id":"themes/hexo-theme-keep/layout/page.ejs","hash":"ccece98aea8d8b0cd2d930249a9aa1d5fcf7a34f","modified":1607733991927},{"_id":"themes/hexo-theme-keep/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991928},{"_id":"themes/hexo-theme-keep/layout/tag-content.ejs","hash":"38c65415ac57cb4697fd2f6b2b68589a6121e8e6","modified":1607733991928},{"_id":"themes/hexo-theme-keep/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1607733991929},{"_id":"themes/hexo-theme-keep/scripts/use-source-data.js","hash":"0dcab564f400e1775af8e839d9f1a219d0c003bb","modified":1607733991933},{"_id":"themes/hexo-theme-keep/layout/_partial/archive-list.ejs","hash":"fc6994ec2ade2f6e3a3ea936a119c691a2d2f015","modified":1607733991908},{"_id":"themes/hexo-theme-keep/layout/_partial/article-copyright-info.ejs","hash":"2fec371f5b6f97cc6fc242aced9baacce93a6f86","modified":1607733991909},{"_id":"themes/hexo-theme-keep/layout/_partial/first-screen.ejs","hash":"ad4cd1c8a60fc1bb17e2adf3bc8c09403d8f2e16","modified":1607733991913},{"_id":"themes/hexo-theme-keep/layout/_partial/article-meta-info.ejs","hash":"d1dfc686d6e3fe2f837107dc1384d0a92c346393","modified":1607733991910},{"_id":"themes/hexo-theme-keep/layout/_partial/empty-page.ejs","hash":"86cc40ff724b85ebf7e187069df1bae581152ef8","modified":1607733991912},{"_id":"themes/hexo-theme-keep/layout/_partial/footer.ejs","hash":"3bf4b82c12b1203e8e02667b8cc3a5e5fab9bfac","modified":1607733991914},{"_id":"themes/hexo-theme-keep/layout/_partial/friends-link.ejs","hash":"bb3d9bb7dd916a56acd3525d40c4671de46becf0","modified":1607733991914},{"_id":"themes/hexo-theme-keep/layout/_partial/header.ejs","hash":"759dfe19f0b1134612d3f9e090234f73a58b54af","modified":1607733991915},{"_id":"themes/hexo-theme-keep/layout/_partial/head.ejs","hash":"4fee2b0ecf8a75ab9ad5ffe866e5362857a677c7","modified":1607733991915},{"_id":"themes/hexo-theme-keep/layout/_partial/image-viewer.ejs","hash":"a0e996d7223eee4fa066392099d2ef5fe891beb7","modified":1607733991917},{"_id":"themes/hexo-theme-keep/layout/_partial/home-article-meta-info.ejs","hash":"d41025a930931182597fb75b6c106928a41086ba","modified":1607733991916},{"_id":"themes/hexo-theme-keep/layout/_partial/paginator.ejs","hash":"4183e4991a30132010d6428c9b2c51d198d268d8","modified":1607733991918},{"_id":"themes/hexo-theme-keep/layout/_partial/local-search.ejs","hash":"e25f4a0164ea9947863270d491a47aaa287dbfc9","modified":1607733991917},{"_id":"themes/hexo-theme-keep/layout/_partial/scripts.ejs","hash":"df990fd2f9617c6e3f39cd7cf68e88cb36bebfce","modified":1607733991919},{"_id":"themes/hexo-theme-keep/layout/_partial/tagcloud.ejs","hash":"4bc87c76d9db14a1e2c7a2a7be275a04db82bea8","modified":1607733991920},{"_id":"themes/hexo-theme-keep/scripts/filters/link-handle.js","hash":"4c8fd067eaf4cce4776413abe90a9ea3f1f04bc7","modified":1607733991931},{"_id":"themes/hexo-theme-keep/layout/_partial/side-tools.ejs","hash":"5a9db17c5dc212b9e43d812c35913396da97d4a0","modified":1607733991919},{"_id":"themes/hexo-theme-keep/layout/_partial/toc.ejs","hash":"27844ed7c138d907c25d0e198f5425fe0c0299b2","modified":1607733991920},{"_id":"themes/hexo-theme-keep/layout/_partial/tools.ejs","hash":"5da98f7d190d0ca5295fb9d4da05913524c5a8a5","modified":1607733991921},{"_id":"themes/hexo-theme-keep/scripts/helpers/helper.js","hash":"8b932ab3a7c792caf8905726f0cb438170c47da5","modified":1607733991933},{"_id":"themes/hexo-theme-keep/scripts/helpers/export-config.js","hash":"7549b7dd480543ae3ae53edf8452886b91ba1841","modified":1607733991932},{"_id":"themes/hexo-theme-keep/source/js/back2top.js","hash":"1ebdd377f9fa15ffd700d558a7fb57a052fd04ff","modified":1607733991965},{"_id":"themes/hexo-theme-keep/source/css/font-awesome.min.css","hash":"2c2236d61417d354b5cbbc907dfc9c0eb1325a7f","modified":1607733991935},{"_id":"themes/hexo-theme-keep/source/css/style.styl","hash":"44312586f0345c174c013635f6c4eb43dd9ff8b4","modified":1607733991961},{"_id":"themes/hexo-theme-keep/source/js/dark-light-toggle.js","hash":"18001594c9ad88bd521f241f46d6c39df1e2f98a","modified":1607733991966},{"_id":"themes/hexo-theme-keep/source/js/code-copy.js","hash":"8e57906ab1ac62cbd200da6d399622198138677e","modified":1607733991966},{"_id":"themes/hexo-theme-keep/source/js/header-shrink.js","hash":"3f78150c0ce4e043180a31c5e23f72014bb63ffb","modified":1607733991967},{"_id":"themes/hexo-theme-keep/source/js/left-side-toggle.js","hash":"3ac1fa4219aafe8b6230d10aa4feacc56baf14f3","modified":1607733991968},{"_id":"themes/hexo-theme-keep/source/js/local-search.js","hash":"40aed1e50a99b8f2d1bbab03bd59a27728d74d2b","modified":1607733991970},{"_id":"themes/hexo-theme-keep/source/js/toc.js","hash":"20643f0efc4c35450eac153699e62c4c5c63284f","modified":1607733991971},{"_id":"themes/hexo-theme-keep/source/js/main.js","hash":"f2820de410b5e4364c2fb2ed34a87c2730e0f7cf","modified":1607733991970},{"_id":"themes/hexo-theme-keep/source/js/utils.js","hash":"7f995781ae1c5e67b26555ebdfa3ea53bcc640e0","modified":1607733991972},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1607733991985},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1607733991987},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1607733991989},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1607733991988},{"_id":"themes/hexo-theme-keep/source/images/avatar.png","hash":"0e2e964a17d55f5d4f0b54b6889a0d1c5bf6d5e4","modified":1607733991963},{"_id":"themes/hexo-theme-keep/source/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1607733991963},{"_id":"themes/hexo-theme-keep/source/images/logo.svg","hash":"d4d6a7296933263e7e5cab7134fb3e89a8cade7b","modified":1607733991964},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/gitalk.ejs","hash":"f363f84c01ae7ddbcae14dc466f9dfbefdc77484","modified":1607733991911},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/comment.ejs","hash":"6ba96101c51f0590c673993c3ca2cb5fc5c874ce","modified":1607733991911},{"_id":"themes/hexo-theme-keep/source/css/layout/article-content.styl","hash":"5a52ab1d6eaa0d8c2557ca091dd3e388a8f97bac","modified":1607733991951},{"_id":"themes/hexo-theme-keep/source/css/layout/category-content.styl","hash":"48de2b88f5298fc03fc9b0897f29d2e6a6172c7c","modified":1607733991952},{"_id":"themes/hexo-theme-keep/source/css/layout/category-list.styl","hash":"4d153b8059939c9cdbc43880290f0c8a9edc2cfd","modified":1607733991952},{"_id":"themes/hexo-theme-keep/source/css/layout/archive-content.styl","hash":"029b27b5a657dd33e5504cbb1695eddf102b9e15","modified":1607733991950},{"_id":"themes/hexo-theme-keep/layout/_partial/comment/valine.ejs","hash":"6a3caccac5cc171858049d2b9d4e24192a47f5b9","modified":1607733991912},{"_id":"themes/hexo-theme-keep/source/css/layout/home-content.styl","hash":"eb834e1ccbdbfa23629fa232f23a716696446c3d","modified":1607733991960},{"_id":"themes/hexo-theme-keep/source/css/layout/page.styl","hash":"4ec77a4f6b2f4c1b20fab28b2cadc24d04045799","modified":1607733991960},{"_id":"themes/hexo-theme-keep/source/css/layout/tag-content.styl","hash":"0b0b58e1411ed7b6c469256dcb05d859352ae232","modified":1607733991961},{"_id":"themes/hexo-theme-keep/source/js/libs/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1607733991969},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/archive-list.styl","hash":"401a1bc3f26af42102cf6a3bdaa2eed0e41aeb83","modified":1607733991937},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/article-copyright-info.styl","hash":"d54580f11114b245cf5440e7766666e4deb7bf25","modified":1607733991938},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/empty-page.styl","hash":"97bc58519af617c40fc3a3aded807e49cf800343","modified":1607733991944},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/article-meta-info.styl","hash":"0a35ecab48044d192f941b67c68341877c89381a","modified":1607733991939},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/first-screen.styl","hash":"ea9891f0ccec86364d0e96bd661585582760ea93","modified":1607733991944},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/footer.styl","hash":"d6ad1f300a80bd136ecc9006cd29a3d43dfc90ae","modified":1607733991945},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/header.styl","hash":"4d82aec76a9028f0591e180585200d4416cd630d","modified":1607733991945},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/image-viewer.styl","hash":"593522c52cc613eb83556d31b80c63918b50293b","modified":1607733991946},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/paginator.styl","hash":"2fbe611351cdeee678626c22aa268132693936b2","modified":1607733991947},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/local-search.styl","hash":"c4b9285aa9a5958a179df43caa8a0cf667521681","modified":1607733991947},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/side-tools.styl","hash":"e6ef792c59b96decba5f8e2153eb0491b66cb4e9","modified":1607733991948},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/toc.styl","hash":"b5771974eb1199a49eed15705638c6c4d004c5f8","modified":1607733991949},{"_id":"themes/hexo-theme-keep/source/css/layout/common/animated.styl","hash":"8c2571ef37356eb6fb5aa30e4e3f413f97e0de03","modified":1607733991953},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/tools.styl","hash":"5e97cc656423ee2f2a9f81523548402ba12a0e4a","modified":1607733991950},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/tagcloud.styl","hash":"51e1c53eb9a8f86b7ddd595c24b925188810454a","modified":1607733991949},{"_id":"themes/hexo-theme-keep/source/css/layout/common/basic.styl","hash":"a6af91c2965a55c69c5111d69ed9507140c17ab4","modified":1607733991954},{"_id":"themes/hexo-theme-keep/source/css/layout/common/keep-theme.styl","hash":"efd34a13da2d405f210bb43b7c8c7a758c38a8df","modified":1607733991958},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/comment.styl","hash":"7946661ccc25a5a5a54d93d4621598e88a2e89e4","modified":1607733991941},{"_id":"themes/hexo-theme-keep/source/css/layout/common/markdown.styl","hash":"ed0ff9336a73dd67c523a0e389660ed0eb9a1d4d","modified":1607733991958},{"_id":"themes/hexo-theme-keep/source/css/layout/common/variables.styl","hash":"17e669ee76a56dcee4f8d1f72e3f688cd769d0c7","modified":1607733991959},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/gitalk.styl","hash":"70148ada1bd5748202430a452b252104a045696e","modified":1607733991942},{"_id":"themes/hexo-theme-keep/source/css/layout/_partial/comment/valine.styl","hash":"9702a4a6b9d7b9a194b018128db5425c52ec890f","modified":1607733991943},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/code-theme.styl","hash":"9abe251575fc39d5397b1b29b00c4c1dabfa5086","modified":1607733991955},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/copy-code.styl","hash":"ca92ef5c9494669d80465967fdd67f39d0810ad1","modified":1607733991956},{"_id":"themes/hexo-theme-keep/source/css/layout/common/codeblock/highlight.styl","hash":"9bd3f13c2d978a4862636df07d80c727063dc372","modified":1607733991957},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1607733991984},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1607733991983},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1607733992002},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1607733992003},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1607733991974},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1607733991982},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1607733991986},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1607733991992},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1607733992001},{"_id":"themes/hexo-theme-keep/source/images/photo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607736381770},{"_id":"themes/hexo-theme-keep/source/images/logo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607736381770},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1607733991979},{"_id":"themes/hexo-theme-keep/source/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1607733991998},{"_id":"public/categories/index.html","hash":"bb1c0a16c3533a3163a1e85a97120b02ee2f16bc","modified":1607768596708},{"_id":"public/links/index.html","hash":"69c9238c8cd0485d626d861db8f3b221ec74c984","modified":1607765628326},{"_id":"public/atom.xml","hash":"916015c5be74a05de8ab3f86b1ccfd129a947096","modified":1607769281452},{"_id":"public/search.xml","hash":"6263c779bb55687a5b6c33a8e0ccf6fb2fa3d288","modified":1607769281452},{"_id":"public/about/index.html","hash":"aa3ff205d3f45de5c5c7ed1266043fd925209674","modified":1607765628326},{"_id":"public/tags/index.html","hash":"02789824e77bb270ac96e886a03418109fab5edd","modified":1607768596708},{"_id":"public/archives/index.html","hash":"da97a0d4ff0c57961a6278b70031491b232cd14a","modified":1607768596708},{"_id":"public/archives/2020/index.html","hash":"1075f4d6e3bfe5fd438d75842b18e24a65e5c3d6","modified":1607768596708},{"_id":"public/archives/2020/12/index.html","hash":"137e4195ec6a9bc008f8f085ce938648021e5c99","modified":1607768596708},{"_id":"public/categories/JavaScript/index.html","hash":"aa4e758a87b2392fecf68471530dcaab14bef7f2","modified":1607768423453},{"_id":"public/tags/array/index.html","hash":"474b52a500aeccef5eee9dfe480c2ae3ff627084","modified":1607765628326},{"_id":"public/index.html","hash":"525e48e1674406d32e06e163b72dea0a2cd850f3","modified":1607768596708},{"_id":"public/2020/12/12/JS数组方法（ES5、ES6）/index.html","hash":"b63431cf7aefeca47cd2263c57d83a932683cdee","modified":1607768596708},{"_id":"public/webfonts/fa-regular-400.eot","hash":"2baa9a8aa68f1d2d4712b3c7205f9105aaf21879","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"d64e58981a419de52bac110c979887d34e366135","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.woff","hash":"26afc29d39ab9fac6d0b607be7e76db093ff7c3a","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"fb9648469530a05fa9aac80e47d4d6960472a242","modified":1607759171711},{"_id":"public/images/avatar.png","hash":"0e2e964a17d55f5d4f0b54b6889a0d1c5bf6d5e4","modified":1607759171711},{"_id":"public/images/bg.svg","hash":"fe49c289a1110973a1c089fe4a9565eb06ecc036","modified":1607759171711},{"_id":"public/images/logo.svg","hash":"d4d6a7296933263e7e5cab7134fb3e89a8cade7b","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.woff","hash":"a42ac4a94f4e0e9333cdb1b2fb6c13c0ae690ff2","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"f726c4275bb494a045fde059175f072de06c01df","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.woff","hash":"3b86a0ce15d8d534b65e98560e321a933d310688","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"9b592048b9062b00f0b2dd782d70a95b7dc69b83","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.eot","hash":"c719f4375679ee58e156434f9ba9727be669cf07","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"9b49c6c5b0cbdef158ae31b2a4e4814555408389","modified":1607759171711},{"_id":"public/webfonts/fa-regular-400.svg","hash":"6ad2be875a79cb6efb8d7ecf6e632784906656a7","modified":1607759171711},{"_id":"public/js/back2top.js","hash":"cd226f2e01a84c74e859dfd08ca1f5146011ae8b","modified":1607759171711},{"_id":"public/js/code-copy.js","hash":"68587d2b5af9c33a762d76ed7692089580a74d0f","modified":1607759171711},{"_id":"public/js/header-shrink.js","hash":"1cf440c53c202ffe120301766b90b3b2cca89c36","modified":1607759171711},{"_id":"public/js/left-side-toggle.js","hash":"d12ff633952d8ad469e659218617db3c9f199f9e","modified":1607759171711},{"_id":"public/js/dark-light-toggle.js","hash":"4d58ef9566f1785286a5ee5bc21c2063b117fe1b","modified":1607759171711},{"_id":"public/js/local-search.js","hash":"e161108a7d315816cd5602a42d1477f93902e0c5","modified":1607759171711},{"_id":"public/js/toc.js","hash":"cdeba4d4b6c1a63b5541ee59cdf78efa166d71a4","modified":1607759171711},{"_id":"public/js/utils.js","hash":"a1cc18daac12aef8b4293f866a9021e9f41de1d4","modified":1607759171711},{"_id":"public/js/main.js","hash":"566fe3add92a6058775bb616449299d66ef345d3","modified":1607759171711},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/article-content.css","hash":"70cda1e9d9b9205e447c98c24110f637d37c1049","modified":1607759171711},{"_id":"public/css/layout/category-list.css","hash":"0d23f6ebc9760a05b8c9e84a750545600090ced4","modified":1607759171711},{"_id":"public/css/layout/category-content.css","hash":"bd620b11d390a1c6d010ce8dbe9643dc45246a27","modified":1607759171711},{"_id":"public/css/layout/page.css","hash":"314259b0bfb97c323961149a17a4e47f4bf08041","modified":1607759171711},{"_id":"public/css/layout/home-content.css","hash":"4c015eaca142973c5efd8b4945605f03bb51f4b1","modified":1607759171711},{"_id":"public/css/layout/tag-content.css","hash":"3d1f21376cf0692a009ee20ca15b7e2886301a1c","modified":1607759171711},{"_id":"public/css/layout/common/animated.css","hash":"ffc3d829f365f82513e2d501fbe7f74d050e2efc","modified":1607759171711},{"_id":"public/css/layout/common/basic.css","hash":"1003ce91d8d76929dcaee04df4db78acf873d6b0","modified":1607759171711},{"_id":"public/css/layout/common/keep-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/common/markdown.css","hash":"d5253332b48a74733f2ca0be41dad5a0abf49db3","modified":1607759171711},{"_id":"public/css/layout/common/variables.css","hash":"b0ffe83e1cf2680e00fc1950e030976ba0c8ff21","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/code-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/copy-code.css","hash":"c2040882967c341c815a8d11e02a2777560ee9ff","modified":1607759171711},{"_id":"public/css/layout/common/codeblock/highlight.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1607759171711},{"_id":"public/css/style.css","hash":"967840d0eb41cc4486ed19c582323d2c8b247222","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.eot","hash":"c39b89f7fa7b66931ab02a54002db5ffcbff206c","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"d537bf4cc7273ddb3fd754d53f2b241aeafaefe7","modified":1607759171711},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1607759171711},{"_id":"public/css/font-awesome.min.css","hash":"c508528feb9fd540454f838653cd4863b290df2e","modified":1607759171711},{"_id":"public/images/logo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607759171711},{"_id":"public/images/photo.png","hash":"9ac2430697ed2b6881b557bfaf7449d352e82740","modified":1607759171711},{"_id":"public/webfonts/fa-brands-400.svg","hash":"deddeac293c90f492dc8546a468871a07b83e6b3","modified":1607759171711},{"_id":"public/webfonts/fa-solid-900.svg","hash":"b635afc5e400633904e0a7cde3ec75cd57e403cf","modified":1607759171711},{"_id":"themes/hexo-theme-keep/source/images/bgc-02.jpg","hash":"631ae1db8a6b3376b485b36ea5ecfc2033962ecb","modified":1606370147696},{"_id":"themes/hexo-theme-keep/source/images/bgc-01.jpg","hash":"3554a2c9157114844c6a22c3fcb522adf660d287","modified":1602826556988},{"_id":"public/images/bgc-02.jpg","hash":"631ae1db8a6b3376b485b36ea5ecfc2033962ecb","modified":1607762903321},{"_id":"public/images/bgc-01.jpg","hash":"3554a2c9157114844c6a22c3fcb522adf660d287","modified":1607762903321},{"_id":"source/_posts/moment插件的使用姿势.md","hash":"c853dc8aae6af6fa7c38f38f6af0f69548c0a435","modified":1607765858226},{"_id":"source/_posts/Vue中axios跨域请求解决方法.md","hash":"57147e83c746f9edb2e190787ee36b3b0985d6c7","modified":1607765696704},{"_id":"public/categories/Vue/index.html","hash":"07cf3e91b1c448c29785f8c23801fb254bf73d3d","modified":1607768596708},{"_id":"public/tags/跨域-vue/index.html","hash":"d809aa5df9f68f746e2781a28e2f69a2db55b41b","modified":1607765628326},{"_id":"public/tags/插件-moment/index.html","hash":"b354e965a021a6b5460eaf1764ced5cb3621f3cd","modified":1607765628326},{"_id":"public/2020/12/12/moment插件的使用姿势/index.html","hash":"cf2d3c39c0c3abe4f4c57ad79dbd2216be615fbd","modified":1607768596708},{"_id":"public/2020/12/12/Vue中axios跨域请求解决方法/index.html","hash":"f1f3b9d9b5e1f402add8a554fee20a27f5836db4","modified":1607768596708},{"_id":"public/tags/跨域/index.html","hash":"5db5150f08077fd06658245e74e8c2004491d2b3","modified":1607765707975},{"_id":"public/tags/vue/index.html","hash":"7e2d4f10abff512fb10c6e4ec394412926c716d8","modified":1607768596708},{"_id":"public/tags/插件/index.html","hash":"4d29dbc96596bd39abd47e70e8ef38e245b481d6","modified":1607765736713},{"_id":"public/tags/moment/index.html","hash":"817c60ac889dd774e3c1bdb66123c62cf1568f7b","modified":1607765736713},{"_id":"source/_posts/Web前端存储之sessionStorage和localStorage.md","hash":"e948ef19790496541206fa6505e67434a995d408","modified":1607765929665},{"_id":"public/2020/12/12/Web前端存储之sessionStorage和localStorage/index.html","hash":"571ef85a686c60e2039cf16cc1b71282d2e8768c","modified":1607768596708},{"_id":"public/tags/前端存储/index.html","hash":"b874389c660e58b9168d07b794c50b7b33c75c0a","modified":1607765933639},{"_id":"source/_posts/JS常用正则表达式.md","hash":"8c614b1200c254b3632bbeb7a25c1a178aa57f69","modified":1607766910301},{"_id":"public/tags/正则/index.html","hash":"ed3e5d12484647cb821690f0b2d35068002952fa","modified":1607766184289},{"_id":"public/2020/12/12/JS常用正则表达式/index.html","hash":"7bbb467a308392460509b4638485667c8d3f7785","modified":1607768596708},{"_id":"source/_posts/JS值传递与应用传递.md","hash":"7ab9ca196fb6d5fc32568ce1b9f1c1cda3b03156","modified":1607767424721},{"_id":"public/2020/12/12/JS值传递与应用传递/index.html","hash":"f842785279682520372220e81c22c47f49baf9b3","modified":1607768596708},{"_id":"public/tags/值与引用传递/index.html","hash":"69a873b063e5f2e49d3e6199a64d0cb25ad34216","modified":1607767379306},{"_id":"source/_posts/JS面向对象与prototype，-proto-，constructor.md","hash":"3e81cd5eff93ac7d2cf3c7ec3e69dfc4ea5344a3","modified":1607767867092},{"_id":"public/2020/12/12/JS面向对象与prototype，-proto-，constructor/index.html","hash":"c289a00f3002320ab3acd5a9b91edefd659d07dd","modified":1607768596708},{"_id":"public/tags/原型链/index.html","hash":"209fc13c4ce86e04cfd4ced54b08d388f6593821","modified":1607767740119},{"_id":"public/tags/面向对象/index.html","hash":"fa3249075c4151eb70952d1f58fdc6b066b2c52d","modified":1607767740119},{"_id":"source/_posts/WebSocket理解与使用.md","hash":"bba6de2aef536831a80d851d148504a9bc6fbec2","modified":1607768035190},{"_id":"public/tags/websocket/index.html","hash":"b6acdb8a368da970e6383ed13ec02ea643c79551","modified":1607768042063},{"_id":"public/categories/Websocket/index.html","hash":"95482e4b2fcbf01ebf4823e4ddc2b2dfce030733","modified":1607768042063},{"_id":"public/2020/12/12/WebSocket理解与使用/index.html","hash":"d16f126356eeace1e2eea1f5d48f05f03de8b4b2","modified":1607768596708},{"_id":"source/_posts/pdf转图片并下载.md","hash":"1395f1c662918c16b794aaaa717ca1c25ab04eca","modified":1607768275613},{"_id":"public/tags/pdf/index.html","hash":"95a4ff2afa81d9be93fca78ff5761c335a732dd7","modified":1607768279839},{"_id":"public/2020/12/12/pdf转图片并下载/index.html","hash":"341c1c9c9eecdcfc86d0f869b82b267c01b7e2f3","modified":1607768596708},{"_id":"source/_posts/File、Blob、dataURL和canvas的应用与转换.md","hash":"a8fcd478f762f509eafd62032d4920702b8abd1e","modified":1607769274932},{"_id":"public/2020/12/12/File、Blob、dataURL和canvas的应用与转换/index.html","hash":"fbf3c4c479417a93ad4cd7cabfd04a935b8b181d","modified":1607769281452},{"_id":"public/tags/file/index.html","hash":"8f464aa6e7e7142aa43a760f599f7471daddfb04","modified":1607768423453},{"_id":"source/_posts/vue-cli3-x多页面配置.md","hash":"5b4561ead4b706fe818d9d7304cde2a1fc3a4eed","modified":1607768591680},{"_id":"public/page/2/index.html","hash":"cf45aa21725a60810745234449dc04063d91cf20","modified":1607768596708},{"_id":"public/tags/多页面/index.html","hash":"f4becdf8b0142898bfb2a227edb7881ae8cbc3db","modified":1607768596708},{"_id":"public/2020/12/12/vue-cli3-x多页面配置/index.html","hash":"a4f7cf5c7642c6d001a9da093d25601ec5ef6680","modified":1607768596708}],"Category":[{"name":"JavaScript","_id":"ckileat3e0003u8qc6jrygnux"},{"name":"Vue","_id":"ckilgz6m00001qwqc07rt76iy"},{"name":"Websocket","_id":"ckiljkxl300011gqc7lpdbfil"}],"Data":[],"Page":[{"title":"categories","date":"2020-12-12T05:47:45.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-12 13:47:45\n---\n","updated":"2020-12-12T05:47:45.149Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckileat380000u8qc6ohthljo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"links","date":"2020-12-12T01:34:27.000Z","comment":true,"_content":"\n\n[卡布奇诺 - 博客园](https://www.cnblogs.com/Faith-Yin/)\n\n\n互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。\n\n> 名称：卡布奇诺 - 博客园\n> 链接：https://www.cnblogs.com/Faith-Yin/\n\n\n\n\n\n","source":"links/index.md","raw":"---\ntitle: links\ndate: 2020-12-12 09:34:27\ncomment: true\n---\n\n\n[卡布奇诺 - 博客园](https://www.cnblogs.com/Faith-Yin/)\n\n\n互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。\n\n> 名称：卡布奇诺 - 博客园\n> 链接：https://www.cnblogs.com/Faith-Yin/\n\n\n\n\n\n","updated":"2020-12-12T06:41:33.014Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckileat3d0002u8qc5fdd705d","content":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >卡布奇诺 - 博客园<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。</p>\n<blockquote>\n<p>名称：卡布奇诺 - 博客园<br>链接：<a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >https://www.cnblogs.com/Faith-Yin/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >卡布奇诺 - 博客园<i class=\"fas fa-external-link-alt\"></i></a></p>\n<p>互换友链，请先将本站链接添加到你的网站，然后在下方按格式评论。</p>\n<blockquote>\n<p>名称：卡布奇诺 - 博客园<br>链接：<a class=\"link\"   href=\"https://www.cnblogs.com/Faith-Yin/\" >https://www.cnblogs.com/Faith-Yin/<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"about","date":"2020-12-12T01:33:41.000Z","comment":true,"_content":"\n记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-12-12 09:33:41\ncomment: true\n---\n\n记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~\n\n","updated":"2020-12-12T06:43:09.480Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckileat3f0005u8qcaod3gwst","content":"<p>记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~</p>\n","site":{"data":{}},"excerpt":"","more":"<p>记录一些技术和日常，欢迎学习、讨论、吐槽、互换友链~</p>\n"},{"title":"tags","date":"2020-12-12T05:46:42.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-12 13:46:42\n---\n","updated":"2020-12-12T05:46:42.208Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckileat3g0006u8qcatvr5ghr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JS数组方法（ES5、ES6）","date":"2020-12-12T05:56:55.000Z","_content":"\n### 1. arr.push() \n从后面添加元素，添加一个或多个，返回值为添加完后的数组长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.push(6,7)) // 7\nconsole.log(arr) // [1,2,3,4,5,6,7]\n```\n\n### 2. arr.pop() \n从后面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.pop())  // 5\nconsole.log(arr)  // [1,2,3,4]\n```\n\n### 3. arr.shift() \n从前面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.shift())  // 1\nconsole.log(arr)  // [2,3,4,5]\n```\n\n\n### 4. arr.unshift() \n从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.unshift(6,7))  // 7\nconsole.log(arr)  // [6,7,1,2,3,4,5]\n```\n\n### 5. arr.splice(index,num) \n删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组\n\n参数：index 索引值，num 个数\n\n```javascript\n// 1. 删除数组中的某些项\nlet arr = [0, 1, 2, 3, 4]\nconsole.log(arr.splice(2, 2))  // [2, 3]\nconsole.log(arr)  // [0, 1, 4]\n\n// 2. 将数据添加至数组的特定索引位置index\nlet arr2 = [1, 2, 3, 4, 5]\narr2.splice(2, 0, '测试值')\nconsole.log(arr2) // [1, 2, \"测试值\", 3, 4, 5]\n```\n\n### 6. str.split() \n将字符串转化为数组\n\n```javascript\nlet str = '12345'\nconsole.log(str.split(''))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\nlet str1 = '1/2/3/4/5'\nconsole.log(str1.split('/'))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\n```\n\n### 7. arr.concat() \n连接两个数组，返回值是连接后的新数组\n\n```javascript\nlet arr = [1,2,3,4,5] 2 console.log(arr.concat([6,7]))  // [1,2,3,4,5,6,7]\nconsole.log(arr)  // [1,2,3,4,5]\n```\n\n### 8. arr.sort() \n将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）\n\n```javascript\nlet arr = [40,8,10,5,79,3] \nconsole.log(arr.sort())  // [10,3,40,5,79,8]\n\nlet arr2 = arr.sort((a,b) => a - b) 5 console.log(arr2)  // [3,5,8,10,40,79]\n\nlet arr3 = arr.sort((a,b) => b - a) 8 console.log(arr3)  // [79,40,10,8,5,3]\n```\n\n### 9. arr.reverse() \n将原数组反转，返回值是反转后的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.reverse())  // [5,4,3,2,1]\nconsole.log(arr)   // [5,4,3,2,1]\n```\n\n### 10. arr.slice(start, end) \n切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.slice(1,3))   // [2,3]\nconsole.log(arr)    // [1,2,3,4,5]\n```\n\n### 11. arr.forEach(callback) \n遍历数组，无返回值\n\n```javascript\nlet arr = [1,2,3,4,5]\narr.forEach((value, index, array) => {\n    console.log(`value--${value}    index--${index}    array--${array}`) \n})\n\n// value--1    index--0    array--1,2,3,4,5\n// value--2    index--1    array--1,2,3,4,5\n// value--3    index--2    array--1,2,3,4,5\n// value--4    index--3    array--1,2,3,4,5\n// value--5    index--4    array--1,2,3,4,5\n```\n\n### 12. arr.map(callbak) \n遍历数组(对原数组的值进行操作)，返回一个新数组\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nlet arr2 = arr.map( (value, index, array)=>{\n    return value = value * 2\n}) \nconsole.log(arr2) // [2,4,6,8,10]\n```\n\n### 13. arr.filter(callback) \n过滤数组，返回一个满足要求的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.filter((value, index) => value >2) \nconsole.log(arr2)  // [3,4,5]\n```\n\n### 14. arr.every(callback) \n根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.every((value, index) => index > 2) \nconsole.log(arr2)  // false\n\nlet arr3 = arr.every((value, index) => index > 0) \nconsole.log(arr3)  // true\n```\n\n### 15. arr.some(callback) \n根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.some((value, index) => index > 2)\nconsole.log(arr2) // true\n let arr3 = arr.some((value, index) => index > 5)\nconsole.log(arr3) // false\n```\n\n### 16. arr.indexOf() \n从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] 2 \nlet arr2 = arr.indexOf(4) \nconsole.log(arr2)  // 3\n\nlet arr3 = arr.indexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 17. arr.lastIndexOf()  \n从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] \nlet arr2 = arr.lastIndexOf(4) \nconsole.log(arr2)  // 5\n\nlet arr3 = arr.lastIndexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 18. Array.from() \n[ES6]将伪数组变成数组，只要有length的就可以转成数组\n\n```javascript\nlet str = '12345'\nconsole.log(Array.from(str))    // [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\nlet obj = {0:'a',1:'b',length:2}\nconsole.log(Array.from(obj))   // [\"a\", \"b\"]\n```\n\n### 19. Array.of()  \n[ES6]将一组值转换成数组，类似于声明数组\n\n```javascript\nlet str = '11'\nconsole.log(Array.of(str))   // ['11']\n\n等价于 \nconsole.log(new Array('11'))   // ['11]\n\nps:\nnew Array()有缺点，就是参数问题引起的重载\nconsole.log(new Array(2)) // [empty × 2] 是个空数组\nconsole.log(Array.of(2)) // [2]\n```\n\n### 20. arr.find(callback) \n[ES6]找到第一个符合条件的数组成员\n\n```javascript\nlet arr = [1,2,3,4,5,2,4] \nlet arr2 = arr.find((value, index, array) => value > 2) \nconsole.log(arr2)   // 3\n```\n\n### 21. arr.findIndex(callback) \n[ES6]找到第一个符合条件的数组成员的索引值\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr1 = arr.findIndex((value, index, array) => value > 2) \nconsole.log(arr1)  // 2\n```\n\n### 22. arr.includes() \n[ES6]判断数组中是否包含特定的值\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.includes(2)  \nconsole.log(arr2) // ture\n\nlet arr3 = arr.includes(9) \nconsole.log(arr3) // false\n\nlet arr4 = [1,2,3,NaN].includes(NaN)\nconsole.log(arr5) // true\n```\n\n### 23. arr.fill(target, start, end) \n[ES6]使用给定的值，填充一个数组（改变原数组）\n\n参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)\n       \n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.fill(5)\nconsole.log(arr2) // [5, 5, 5, 5, 5]\nconsole.log(arr)   // [5, 5, 5, 5, 5]\n\nlet arr3 = arr.fill(5,2)\nconsole.log(arr3)  // [1,2,5,5,5]\n\nlet arr4 = arr.fill(5,1,3)\nconsole.log(arr4)  // [1,5,5,4,5]\n```\n\n### 24. arr.keys() \n[ES6]遍历数组的键名\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.keys() \n\nfor (let key of arr2) { \n    console.log(key)   // 0,1,2,3,4\n}\n```\n\n### 25. arr.values() \n[ES6]遍历数组键值\n\n```javascript\nlet arr = [1,2,3,4,5]\nlet arr1 = arr.values() \n\nfor (let val of arr1) {\n     console.log(val); // 1,2,3,4,5\n}\n```\n\n### 26. arr.entries() \n[ES6]遍历数组的键名和键值\n\nentries() 方法返回迭代数组。\n迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.entries() \n\nfor (let e of arr2) { \n    console.log(e);   // [0,1] [1,2] [2,3] [3,4] [4,5]\n}\n```\n\n\n\n### 27.arr.copyWithin() \n[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组\n\n参数:　　target --必选 索引从该位置开始替换数组项\n　　　　 start --可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。\n　　　　 end --可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数\n\n```javascript\nlet arr = [1,2,3,4,5,6,7]\n\nlet arr2 = arr.copyWithin(1)\nconsole.log(arr2)   // [1, 1, 2, 3, 4, 5, 6]\n\nlet arr3 = arr.copyWithin(1,2)\nconsole.log(arr3)   // [1, 3, 4, 5, 6, 7, 7]\n\nlet arr4 = arr.copyWithin(1,2,4) \nconsole.log(arr4)   // [1, 3, 4, 4, 5, 6, 7]\n```\n\n### 28. Array.isArray(value) \n判断一个值是否为数组的方法，若为数组，返回true，反之返回false\n\n```javascript\nlet a = 1234\nlet b = \"fsaufh\"\nlet c = {a:1,b:2}\nlet d = [1,2]\n\nlet mark1 = Array.isArray(a) \n console.log(mark1)  // false\n\nlet mark2 = Array.isArray(b) \nconsole.log(mark2)  // false\n\nlet mark3 = Array.isArray(c) \nconsole.log(mark3)  // false\n\nlet mark4 = Array.isArray(d) \nconsole.log(mark4)  // true\n```\n\n### 29. arr.join(separate)\n把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nconsole.log(arr.join()) // 1,2,3,4,5\nconsole.log(arr.join(\"\")) // 12345\nconsole.log(arr.join(\"-\"))  // 1-2-3-4-5\n```\n\n### 30. arr.flat(pliy)\n[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组\n\n参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字\n\n```javascript\nlet arr = [1, 2, [3, [4, 5]]] \nconsole.log(arr.flat(2))  // [1, 2, 3, 4, 5]\n\nlet arr2 = [1,[2,[3,[4,5]]]] \nconsole.log(arr2.flat(Infinity))  // [1,2,3,4,5]\n```\n\n### 31. arr.flatMap()\n[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。\n\n```javascript\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n\nlet arr = [2, 3, 4]\narr.flatMap((x) => [x, x * 2]) 3 // [2, 4, 3, 6, 4, 8]\n```\n\n### 32. arr.toString()\n将数组转换为字符串并返回。数组中的元素之间用逗号分隔。\n\n```javascript\nlet arr = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]\nconsole.log(arr.toString())  // Banana,Orange,Apple,Mango\n```\n\n### 33. arr.reduce() \n对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。\n\n接收4个参数：\n\n1.  Accumulator (acc) (累计器)\n2.  Current Value (cur) (当前值)\n3.  Current Index (idx) (当前索引)\n4.  Source Array (src) (源数组)\n\n```javascript\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // expected output: 15\n```\n\n\n\n\n\n\n\n","source":"_posts/JS数组方法（ES5、ES6）.md","raw":"---\ntitle: JS数组方法（ES5、ES6）\ndate: 2020-12-12 13:56:55\ntags: array\ncategories: JavaScript\n---\n\n### 1. arr.push() \n从后面添加元素，添加一个或多个，返回值为添加完后的数组长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.push(6,7)) // 7\nconsole.log(arr) // [1,2,3,4,5,6,7]\n```\n\n### 2. arr.pop() \n从后面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.pop())  // 5\nconsole.log(arr)  // [1,2,3,4]\n```\n\n### 3. arr.shift() \n从前面删除元素，只能是一个，返回值是删除的元素\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.shift())  // 1\nconsole.log(arr)  // [2,3,4,5]\n```\n\n\n### 4. arr.unshift() \n从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.unshift(6,7))  // 7\nconsole.log(arr)  // [6,7,1,2,3,4,5]\n```\n\n### 5. arr.splice(index,num) \n删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组\n\n参数：index 索引值，num 个数\n\n```javascript\n// 1. 删除数组中的某些项\nlet arr = [0, 1, 2, 3, 4]\nconsole.log(arr.splice(2, 2))  // [2, 3]\nconsole.log(arr)  // [0, 1, 4]\n\n// 2. 将数据添加至数组的特定索引位置index\nlet arr2 = [1, 2, 3, 4, 5]\narr2.splice(2, 0, '测试值')\nconsole.log(arr2) // [1, 2, \"测试值\", 3, 4, 5]\n```\n\n### 6. str.split() \n将字符串转化为数组\n\n```javascript\nlet str = '12345'\nconsole.log(str.split(''))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\nlet str1 = '1/2/3/4/5'\nconsole.log(str1.split('/'))  // [\"1\",\"2\",\"3\",\"4\",\"5\"]\n```\n\n### 7. arr.concat() \n连接两个数组，返回值是连接后的新数组\n\n```javascript\nlet arr = [1,2,3,4,5] 2 console.log(arr.concat([6,7]))  // [1,2,3,4,5,6,7]\nconsole.log(arr)  // [1,2,3,4,5]\n```\n\n### 8. arr.sort() \n将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）\n\n```javascript\nlet arr = [40,8,10,5,79,3] \nconsole.log(arr.sort())  // [10,3,40,5,79,8]\n\nlet arr2 = arr.sort((a,b) => a - b) 5 console.log(arr2)  // [3,5,8,10,40,79]\n\nlet arr3 = arr.sort((a,b) => b - a) 8 console.log(arr3)  // [79,40,10,8,5,3]\n```\n\n### 9. arr.reverse() \n将原数组反转，返回值是反转后的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.reverse())  // [5,4,3,2,1]\nconsole.log(arr)   // [5,4,3,2,1]\n```\n\n### 10. arr.slice(start, end) \n切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nconsole.log(arr.slice(1,3))   // [2,3]\nconsole.log(arr)    // [1,2,3,4,5]\n```\n\n### 11. arr.forEach(callback) \n遍历数组，无返回值\n\n```javascript\nlet arr = [1,2,3,4,5]\narr.forEach((value, index, array) => {\n    console.log(`value--${value}    index--${index}    array--${array}`) \n})\n\n// value--1    index--0    array--1,2,3,4,5\n// value--2    index--1    array--1,2,3,4,5\n// value--3    index--2    array--1,2,3,4,5\n// value--4    index--3    array--1,2,3,4,5\n// value--5    index--4    array--1,2,3,4,5\n```\n\n### 12. arr.map(callbak) \n遍历数组(对原数组的值进行操作)，返回一个新数组\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nlet arr2 = arr.map( (value, index, array)=>{\n    return value = value * 2\n}) \nconsole.log(arr2) // [2,4,6,8,10]\n```\n\n### 13. arr.filter(callback) \n过滤数组，返回一个满足要求的数组\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.filter((value, index) => value >2) \nconsole.log(arr2)  // [3,4,5]\n```\n\n### 14. arr.every(callback) \n根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.every((value, index) => index > 2) \nconsole.log(arr2)  // false\n\nlet arr3 = arr.every((value, index) => index > 0) \nconsole.log(arr3)  // true\n```\n\n### 15. arr.some(callback) \n根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.some((value, index) => index > 2)\nconsole.log(arr2) // true\n let arr3 = arr.some((value, index) => index > 5)\nconsole.log(arr3) // false\n```\n\n### 16. arr.indexOf() \n从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] 2 \nlet arr2 = arr.indexOf(4) \nconsole.log(arr2)  // 3\n\nlet arr3 = arr.indexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 17. arr.lastIndexOf()  \n从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1\n\n```javascript\nlet arr = [1,2,3,4,5,4] \nlet arr2 = arr.lastIndexOf(4) \nconsole.log(arr2)  // 5\n\nlet arr3 = arr.lastIndexOf(6) \nconsole.log(arr3)  // -1\n```\n\n### 18. Array.from() \n[ES6]将伪数组变成数组，只要有length的就可以转成数组\n\n```javascript\nlet str = '12345'\nconsole.log(Array.from(str))    // [\"1\", \"2\", \"3\", \"4\", \"5\"]\n\nlet obj = {0:'a',1:'b',length:2}\nconsole.log(Array.from(obj))   // [\"a\", \"b\"]\n```\n\n### 19. Array.of()  \n[ES6]将一组值转换成数组，类似于声明数组\n\n```javascript\nlet str = '11'\nconsole.log(Array.of(str))   // ['11']\n\n等价于 \nconsole.log(new Array('11'))   // ['11]\n\nps:\nnew Array()有缺点，就是参数问题引起的重载\nconsole.log(new Array(2)) // [empty × 2] 是个空数组\nconsole.log(Array.of(2)) // [2]\n```\n\n### 20. arr.find(callback) \n[ES6]找到第一个符合条件的数组成员\n\n```javascript\nlet arr = [1,2,3,4,5,2,4] \nlet arr2 = arr.find((value, index, array) => value > 2) \nconsole.log(arr2)   // 3\n```\n\n### 21. arr.findIndex(callback) \n[ES6]找到第一个符合条件的数组成员的索引值\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr1 = arr.findIndex((value, index, array) => value > 2) \nconsole.log(arr1)  // 2\n```\n\n### 22. arr.includes() \n[ES6]判断数组中是否包含特定的值\n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.includes(2)  \nconsole.log(arr2) // ture\n\nlet arr3 = arr.includes(9) \nconsole.log(arr3) // false\n\nlet arr4 = [1,2,3,NaN].includes(NaN)\nconsole.log(arr5) // true\n```\n\n### 23. arr.fill(target, start, end) \n[ES6]使用给定的值，填充一个数组（改变原数组）\n\n参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)\n       \n\n```javascript\nlet arr = [1,2,3,4,5]\n\nlet arr2 = arr.fill(5)\nconsole.log(arr2) // [5, 5, 5, 5, 5]\nconsole.log(arr)   // [5, 5, 5, 5, 5]\n\nlet arr3 = arr.fill(5,2)\nconsole.log(arr3)  // [1,2,5,5,5]\n\nlet arr4 = arr.fill(5,1,3)\nconsole.log(arr4)  // [1,5,5,4,5]\n```\n\n### 24. arr.keys() \n[ES6]遍历数组的键名\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.keys() \n\nfor (let key of arr2) { \n    console.log(key)   // 0,1,2,3,4\n}\n```\n\n### 25. arr.values() \n[ES6]遍历数组键值\n\n```javascript\nlet arr = [1,2,3,4,5]\nlet arr1 = arr.values() \n\nfor (let val of arr1) {\n     console.log(val); // 1,2,3,4,5\n}\n```\n\n### 26. arr.entries() \n[ES6]遍历数组的键名和键值\n\nentries() 方法返回迭代数组。\n迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。\n\n```javascript\nlet arr = [1,2,3,4,5] \nlet arr2 = arr.entries() \n\nfor (let e of arr2) { \n    console.log(e);   // [0,1] [1,2] [2,3] [3,4] [4,5]\n}\n```\n\n\n\n### 27.arr.copyWithin() \n[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组\n\n参数:　　target --必选 索引从该位置开始替换数组项\n　　　　 start --可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。\n　　　　 end --可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数\n\n```javascript\nlet arr = [1,2,3,4,5,6,7]\n\nlet arr2 = arr.copyWithin(1)\nconsole.log(arr2)   // [1, 1, 2, 3, 4, 5, 6]\n\nlet arr3 = arr.copyWithin(1,2)\nconsole.log(arr3)   // [1, 3, 4, 5, 6, 7, 7]\n\nlet arr4 = arr.copyWithin(1,2,4) \nconsole.log(arr4)   // [1, 3, 4, 4, 5, 6, 7]\n```\n\n### 28. Array.isArray(value) \n判断一个值是否为数组的方法，若为数组，返回true，反之返回false\n\n```javascript\nlet a = 1234\nlet b = \"fsaufh\"\nlet c = {a:1,b:2}\nlet d = [1,2]\n\nlet mark1 = Array.isArray(a) \n console.log(mark1)  // false\n\nlet mark2 = Array.isArray(b) \nconsole.log(mark2)  // false\n\nlet mark3 = Array.isArray(c) \nconsole.log(mark3)  // false\n\nlet mark4 = Array.isArray(d) \nconsole.log(mark4)  // true\n```\n\n### 29. arr.join(separate)\n把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号\n\n```javascript\nlet arr = [1,2,3,4,5] \n\nconsole.log(arr.join()) // 1,2,3,4,5\nconsole.log(arr.join(\"\")) // 12345\nconsole.log(arr.join(\"-\"))  // 1-2-3-4-5\n```\n\n### 30. arr.flat(pliy)\n[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组\n\n参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字\n\n```javascript\nlet arr = [1, 2, [3, [4, 5]]] \nconsole.log(arr.flat(2))  // [1, 2, 3, 4, 5]\n\nlet arr2 = [1,[2,[3,[4,5]]]] \nconsole.log(arr2.flat(Infinity))  // [1,2,3,4,5]\n```\n\n### 31. arr.flatMap()\n[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。\n\n```javascript\n// 相当于 [[2, 4], [3, 6], [4, 8]].flat()\n\nlet arr = [2, 3, 4]\narr.flatMap((x) => [x, x * 2]) 3 // [2, 4, 3, 6, 4, 8]\n```\n\n### 32. arr.toString()\n将数组转换为字符串并返回。数组中的元素之间用逗号分隔。\n\n```javascript\nlet arr = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"]\nconsole.log(arr.toString())  // Banana,Orange,Apple,Mango\n```\n\n### 33. arr.reduce() \n对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。\n\n接收4个参数：\n\n1.  Accumulator (acc) (累计器)\n2.  Current Value (cur) (当前值)\n3.  Current Index (idx) (当前索引)\n4.  Source Array (src) (源数组)\n\n```javascript\nconst array1 = [1, 2, 3, 4];\nconst reducer = (accumulator, currentValue) => accumulator + currentValue; // 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer)); // expected output: 10\n\n// 5 + 1 + 2 + 3 + 4\nconsole.log(array1.reduce(reducer, 5)); // expected output: 15\n```\n\n\n\n\n\n\n\n","slug":"JS数组方法（ES5、ES6）","published":1,"updated":"2020-12-12T06:24:35.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckileat3b0001u8qc8rs9gu7b","content":"<h3 id=\"1-arr-push\"><a href=\"#1-arr-push\" class=\"headerlink\" title=\"1. arr.push()\"></a>1. arr.push()</h3><p>从后面添加元素，添加一个或多个，返回值为添加完后的数组长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-arr-pop\"><a href=\"#2-arr-pop\" class=\"headerlink\" title=\"2. arr.pop()\"></a>2. arr.pop()</h3><p>从后面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop())  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-arr-shift\"><a href=\"#3-arr-shift\" class=\"headerlink\" title=\"3. arr.shift()\"></a>3. arr.shift()</h3><p>从前面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift())  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-arr-unshift\"><a href=\"#4-arr-unshift\" class=\"headerlink\" title=\"4. arr.unshift()\"></a>4. arr.unshift()</h3><p>从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">6</span>,<span class=\"number\">7</span>))  <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [6,7,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-arr-splice-index-num\"><a href=\"#5-arr-splice-index-num\" class=\"headerlink\" title=\"5. arr.splice(index,num)\"></a>5. arr.splice(index,num)</h3><p>删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组</p>\n<p>参数：index 索引值，num 个数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 删除数组中的某些项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>))  <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [0, 1, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将数据添加至数组的特定索引位置index</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">arr2.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;测试值&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [1, 2, &quot;测试值&quot;, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-str-split\"><a href=\"#6-str-split\" class=\"headerlink\" title=\"6. str.split()\"></a>6. str.split()</h3><p>将字符串转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&#x27;&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&#x27;1/2/3/4/5&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.split(<span class=\"string\">&#x27;/&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-arr-concat\"><a href=\"#7-arr-concat\" class=\"headerlink\" title=\"7. arr.concat()\"></a>7. arr.concat()</h3><p>连接两个数组，返回值是连接后的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] <span class=\"number\">2</span> <span class=\"built_in\">console</span>.log(arr.concat([<span class=\"number\">6</span>,<span class=\"number\">7</span>]))  <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-arr-sort\"><a href=\"#8-arr-sort\" class=\"headerlink\" title=\"8. arr.sort()\"></a>8. arr.sort()</h3><p>将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">40</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">79</span>,<span class=\"number\">3</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort())  <span class=\"comment\">// [10,3,40,5,79,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b) <span class=\"number\">5</span> <span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,5,8,10,40,79]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> b - a) <span class=\"number\">8</span> <span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [79,40,10,8,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-arr-reverse\"><a href=\"#9-arr-reverse\" class=\"headerlink\" title=\"9. arr.reverse()\"></a>9. arr.reverse()</h3><p>将原数组反转，返回值是反转后的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse())  <span class=\"comment\">// [5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-arr-slice-start-end\"><a href=\"#10-arr-slice-start-end\" class=\"headerlink\" title=\"10. arr.slice(start, end)\"></a>10. arr.slice(start, end)</h3><p>切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>))   <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)    <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-arr-forEach-callback\"><a href=\"#11-arr-forEach-callback\" class=\"headerlink\" title=\"11. arr.forEach(callback)\"></a>11. arr.forEach(callback)</h3><p>遍历数组，无返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`value--<span class=\"subst\">$&#123;value&#125;</span>    index--<span class=\"subst\">$&#123;index&#125;</span>    array--<span class=\"subst\">$&#123;array&#125;</span>`</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// value--1    index--0    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--2    index--1    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--3    index--2    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--4    index--3    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--5    index--4    array--1,2,3,4,5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-arr-map-callbak\"><a href=\"#12-arr-map-callbak\" class=\"headerlink\" title=\"12. arr.map(callbak)\"></a>12. arr.map(callbak)</h3><p>遍历数组(对原数组的值进行操作)，返回一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.map( <span class=\"function\">(<span class=\"params\">value, index, array</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value = value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-arr-filter-callback\"><a href=\"#13-arr-filter-callback\" class=\"headerlink\" title=\"13. arr.filter(callback)\"></a>13. arr.filter(callback)</h3><p>过滤数组，返回一个满足要求的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> value &gt;<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-arr-every-callback\"><a href=\"#14-arr-every-callback\" class=\"headerlink\" title=\"14. arr.every(callback)\"></a>14. arr.every(callback)</h3><p>根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-arr-some-callback\"><a href=\"#15-arr-some-callback\" class=\"headerlink\" title=\"15. arr.some(callback)\"></a>15. arr.some(callback)</h3><p>根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// true</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr3 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-arr-indexOf\"><a href=\"#16-arr-indexOf\" class=\"headerlink\" title=\"16. arr.indexOf()\"></a>16. arr.indexOf()</h3><p>从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.indexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.indexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-arr-lastIndexOf\"><a href=\"#17-arr-lastIndexOf\" class=\"headerlink\" title=\"17. arr.lastIndexOf()\"></a>17. arr.lastIndexOf()</h3><p>从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.lastIndexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.lastIndexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Array-from\"><a href=\"#18-Array-from\" class=\"headerlink\" title=\"18. Array.from()\"></a>18. Array.from()</h3><p>[ES6]将伪数组变成数组，只要有length的就可以转成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))    <span class=\"comment\">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(obj))   <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-Array-of\"><a href=\"#19-Array-of\" class=\"headerlink\" title=\"19. Array.of()\"></a>19. Array.of()</h3><p>[ES6]将一组值转换成数组，类似于声明数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;11&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(str))   <span class=\"comment\">// [&#x27;11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于 </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;11&#x27;</span>))   <span class=\"comment\">// [&#x27;11]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()有缺点，就是参数问题引起的重载</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)) <span class=\"comment\">// [empty × 2] 是个空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>)) <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-arr-find-callback\"><a href=\"#20-arr-find-callback\" class=\"headerlink\" title=\"20. arr.find(callback)\"></a>20. arr.find(callback)</h3><p>[ES6]找到第一个符合条件的数组成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.find(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-arr-findIndex-callback\"><a href=\"#21-arr-findIndex-callback\" class=\"headerlink\" title=\"21. arr.findIndex(callback)\"></a>21. arr.findIndex(callback)</h3><p>[ES6]找到第一个符合条件的数组成员的索引值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.findIndex(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-arr-includes\"><a href=\"#22-arr-includes\" class=\"headerlink\" title=\"22. arr.includes()\"></a>22. arr.includes()</h3><p>[ES6]判断数组中是否包含特定的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.includes(<span class=\"number\">2</span>)  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.includes(<span class=\"number\">9</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-arr-fill-target-start-end\"><a href=\"#23-arr-fill-target-start-end\" class=\"headerlink\" title=\"23. arr.fill(target, start, end)\"></a>23. arr.fill(target, start, end)</h3><p>[ES6]使用给定的值，填充一个数组（改变原数组）</p>\n<p>参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.fill(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [1,2,5,5,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)  <span class=\"comment\">// [1,5,5,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24-arr-keys\"><a href=\"#24-arr-keys\" class=\"headerlink\" title=\"24. arr.keys()\"></a>24. arr.keys()</h3><p>[ES6]遍历数组的键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.keys() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)   <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25-arr-values\"><a href=\"#25-arr-values\" class=\"headerlink\" title=\"25. arr.values()\"></a>25. arr.values()</h3><p>[ES6]遍历数组键值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.values() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr1) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-arr-entries\"><a href=\"#26-arr-entries\" class=\"headerlink\" title=\"26. arr.entries()\"></a>26. arr.entries()</h3><p>[ES6]遍历数组的键名和键值</p>\n<p>entries() 方法返回迭代数组。<br>迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.entries() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);   <span class=\"comment\">// [0,1] [1,2] [2,3] [3,4] [4,5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"27-arr-copyWithin\"><a href=\"#27-arr-copyWithin\" class=\"headerlink\" title=\"27.arr.copyWithin()\"></a>27.arr.copyWithin()</h3><p>[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组</p>\n<p>参数:　　target –必选 索引从该位置开始替换数组项<br>　　　　 start –可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。<br>　　　　 end –可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.copyWithin(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// [1, 1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)   <span class=\"comment\">// [1, 3, 4, 5, 6, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)   <span class=\"comment\">// [1, 3, 4, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-Array-isArray-value\"><a href=\"#28-Array-isArray-value\" class=\"headerlink\" title=\"28. Array.isArray(value)\"></a>28. Array.isArray(value)</h3><p>判断一个值是否为数组的方法，若为数组，返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&quot;fsaufh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"built_in\">Array</span>.isArray(a) </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(mark1)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"built_in\">Array</span>.isArray(b) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"built_in\">Array</span>.isArray(c) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark3)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark4 = <span class=\"built_in\">Array</span>.isArray(d) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark4)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29-arr-join-separate\"><a href=\"#29-arr-join-separate\" class=\"headerlink\" title=\"29. arr.join(separate)\"></a>29. arr.join(separate)</h3><p>把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;&quot;</span>)) <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>))  <span class=\"comment\">// 1-2-3-4-5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30-arr-flat-pliy\"><a href=\"#30-arr-flat-pliy\" class=\"headerlink\" title=\"30. arr.flat(pliy)\"></a>30. arr.flat(pliy)</h3><p>[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组</p>\n<p>参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">2</span>))  <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31-arr-flatMap\"><a href=\"#31-arr-flatMap\" class=\"headerlink\" title=\"31. arr.flatMap()\"></a>31. arr.flatMap()</h3><p>[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr.flatMap(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> [x, x * <span class=\"number\">2</span>]) <span class=\"number\">3</span> <span class=\"comment\">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-arr-toString\"><a href=\"#32-arr-toString\" class=\"headerlink\" title=\"32. arr.toString()\"></a>32. arr.toString()</h3><p>将数组转换为字符串并返回。数组中的元素之间用逗号分隔。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString())  <span class=\"comment\">// Banana,Orange,Apple,Mango</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33-arr-reduce\"><a href=\"#33-arr-reduce\" class=\"headerlink\" title=\"33. arr.reduce()\"></a>33. arr.reduce()</h3><p>对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。</p>\n<p>接收4个参数：</p>\n<ol>\n<li> Accumulator (acc) (累计器)</li>\n<li> Current Value (cur) (当前值)</li>\n<li> Current Index (idx) (当前索引)</li>\n<li> Source Array (src) (源数组)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue; <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer)); <span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5 + 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>)); <span class=\"comment\">// expected output: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-arr-push\"><a href=\"#1-arr-push\" class=\"headerlink\" title=\"1. arr.push()\"></a>1. arr.push()</h3><p>从后面添加元素，添加一个或多个，返回值为添加完后的数组长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>)) <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr) <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-arr-pop\"><a href=\"#2-arr-pop\" class=\"headerlink\" title=\"2. arr.pop()\"></a>2. arr.pop()</h3><p>从后面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.pop())  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-arr-shift\"><a href=\"#3-arr-shift\" class=\"headerlink\" title=\"3. arr.shift()\"></a>3. arr.shift()</h3><p>从前面删除元素，只能是一个，返回值是删除的元素</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.shift())  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-arr-unshift\"><a href=\"#4-arr-unshift\" class=\"headerlink\" title=\"4. arr.unshift()\"></a>4. arr.unshift()</h3><p>从前面添加元素，添加一个或多个，返回值是添加完后的数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.unshift(<span class=\"number\">6</span>,<span class=\"number\">7</span>))  <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [6,7,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-arr-splice-index-num\"><a href=\"#5-arr-splice-index-num\" class=\"headerlink\" title=\"5. arr.splice(index,num)\"></a>5. arr.splice(index,num)</h3><p>删除从index（索引值）开始之后的那num（默认到数组的结束位置）个元素，返回值是删除的元素数组</p>\n<p>参数：index 索引值，num 个数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 删除数组中的某些项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.splice(<span class=\"number\">2</span>, <span class=\"number\">2</span>))  <span class=\"comment\">// [2, 3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [0, 1, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. 将数据添加至数组的特定索引位置index</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">arr2.splice(<span class=\"number\">2</span>, <span class=\"number\">0</span>, <span class=\"string\">&#x27;测试值&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [1, 2, &quot;测试值&quot;, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-str-split\"><a href=\"#6-str-split\" class=\"headerlink\" title=\"6. str.split()\"></a>6. str.split()</h3><p>将字符串转化为数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&#x27;&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&#x27;1/2/3/4/5&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str1.split(<span class=\"string\">&#x27;/&#x27;</span>))  <span class=\"comment\">// [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;,&quot;4&quot;,&quot;5&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-arr-concat\"><a href=\"#7-arr-concat\" class=\"headerlink\" title=\"7. arr.concat()\"></a>7. arr.concat()</h3><p>连接两个数组，返回值是连接后的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] <span class=\"number\">2</span> <span class=\"built_in\">console</span>.log(arr.concat([<span class=\"number\">6</span>,<span class=\"number\">7</span>]))  <span class=\"comment\">// [1,2,3,4,5,6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-arr-sort\"><a href=\"#8-arr-sort\" class=\"headerlink\" title=\"8. arr.sort()\"></a>8. arr.sort()</h3><p>将数组进行排序，返回值是排好的数组，默认是按照最左边的数字进行排序（非数字整体大小）</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">40</span>,<span class=\"number\">8</span>,<span class=\"number\">10</span>,<span class=\"number\">5</span>,<span class=\"number\">79</span>,<span class=\"number\">3</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.sort())  <span class=\"comment\">// [10,3,40,5,79,8]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> a - b) <span class=\"number\">5</span> <span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,5,8,10,40,79]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.sort(<span class=\"function\">(<span class=\"params\">a,b</span>) =&gt;</span> b - a) <span class=\"number\">8</span> <span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [79,40,10,8,5,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-arr-reverse\"><a href=\"#9-arr-reverse\" class=\"headerlink\" title=\"9. arr.reverse()\"></a>9. arr.reverse()</h3><p>将原数组反转，返回值是反转后的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.reverse())  <span class=\"comment\">// [5,4,3,2,1]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-arr-slice-start-end\"><a href=\"#10-arr-slice-start-end\" class=\"headerlink\" title=\"10. arr.slice(start, end)\"></a>10. arr.slice(start, end)</h3><p>切去索引值start到索引值end（不包含end的值）的数组，返回值是切出去的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.slice(<span class=\"number\">1</span>,<span class=\"number\">3</span>))   <span class=\"comment\">// [2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)    <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-arr-forEach-callback\"><a href=\"#11-arr-forEach-callback\" class=\"headerlink\" title=\"11. arr.forEach(callback)\"></a>11. arr.forEach(callback)</h3><p>遍历数组，无返回值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`value--<span class=\"subst\">$&#123;value&#125;</span>    index--<span class=\"subst\">$&#123;index&#125;</span>    array--<span class=\"subst\">$&#123;array&#125;</span>`</span>) </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// value--1    index--0    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--2    index--1    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--3    index--2    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--4    index--3    array--1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"comment\">// value--5    index--4    array--1,2,3,4,5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-arr-map-callbak\"><a href=\"#12-arr-map-callbak\" class=\"headerlink\" title=\"12. arr.map(callbak)\"></a>12. arr.map(callbak)</h3><p>遍历数组(对原数组的值进行操作)，返回一个新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.map( <span class=\"function\">(<span class=\"params\">value, index, array</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value = value * <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-arr-filter-callback\"><a href=\"#13-arr-filter-callback\" class=\"headerlink\" title=\"13. arr.filter(callback)\"></a>13. arr.filter(callback)</h3><p>过滤数组，返回一个满足要求的数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.filter(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> value &gt;<span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// [3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-arr-every-callback\"><a href=\"#14-arr-every-callback\" class=\"headerlink\" title=\"14. arr.every(callback)\"></a>14. arr.every(callback)</h3><p>根据判断条件，遍历数组中的元素，是否都满足，若都满足则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.every(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">0</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-arr-some-callback\"><a href=\"#15-arr-some-callback\" class=\"headerlink\" title=\"15. arr.some(callback)\"></a>15. arr.some(callback)</h3><p>根据判断条件，遍历数组中的元素，是否存在至少有一个满足，若存在则返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// true</span></span><br><span class=\"line\"> <span class=\"keyword\">let</span> arr3 = arr.some(<span class=\"function\">(<span class=\"params\">value, index</span>) =&gt;</span> index &gt; <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-arr-indexOf\"><a href=\"#16-arr-indexOf\" class=\"headerlink\" title=\"16. arr.indexOf()\"></a>16. arr.indexOf()</h3><p>从前往后查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] <span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.indexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.indexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-arr-lastIndexOf\"><a href=\"#17-arr-lastIndexOf\" class=\"headerlink\" title=\"17. arr.lastIndexOf()\"></a>17. arr.lastIndexOf()</h3><p>从后往前查找某个元素的索引值，若有重复的，则返回第一个查到的索引值，若不存在，返回 -1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.lastIndexOf(<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)  <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.lastIndexOf(<span class=\"number\">6</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// -1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-Array-from\"><a href=\"#18-Array-from\" class=\"headerlink\" title=\"18. Array.from()\"></a>18. Array.from()</h3><p>[ES6]将伪数组变成数组，只要有length的就可以转成数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;12345&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str))    <span class=\"comment\">// [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"number\">0</span>:<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"number\">1</span>:<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"attr\">length</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(obj))   <span class=\"comment\">// [&quot;a&quot;, &quot;b&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19-Array-of\"><a href=\"#19-Array-of\" class=\"headerlink\" title=\"19. Array.of()\"></a>19. Array.of()</h3><p>[ES6]将一组值转换成数组，类似于声明数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&#x27;11&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(str))   <span class=\"comment\">// [&#x27;11&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">等价于 </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"string\">&#x27;11&#x27;</span>))   <span class=\"comment\">// [&#x27;11]</span></span><br><span class=\"line\"></span><br><span class=\"line\">ps:</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()有缺点，就是参数问题引起的重载</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">2</span>)) <span class=\"comment\">// [empty × 2] 是个空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.of(<span class=\"number\">2</span>)) <span class=\"comment\">// [2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-arr-find-callback\"><a href=\"#20-arr-find-callback\" class=\"headerlink\" title=\"20. arr.find(callback)\"></a>20. arr.find(callback)</h3><p>[ES6]找到第一个符合条件的数组成员</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.find(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21-arr-findIndex-callback\"><a href=\"#21-arr-findIndex-callback\" class=\"headerlink\" title=\"21. arr.findIndex(callback)\"></a>21. arr.findIndex(callback)</h3><p>[ES6]找到第一个符合条件的数组成员的索引值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.findIndex(<span class=\"function\">(<span class=\"params\">value, index, array</span>) =&gt;</span> value &gt; <span class=\"number\">2</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1)  <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22-arr-includes\"><a href=\"#22-arr-includes\" class=\"headerlink\" title=\"22. arr.includes()\"></a>22. arr.includes()</h3><p>[ES6]判断数组中是否包含特定的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.includes(<span class=\"number\">2</span>)  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// ture</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.includes(<span class=\"number\">9</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3) <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"literal\">NaN</span>].includes(<span class=\"literal\">NaN</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr5) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23-arr-fill-target-start-end\"><a href=\"#23-arr-fill-target-start-end\" class=\"headerlink\" title=\"23. arr.fill(target, start, end)\"></a>23. arr.fill(target, start, end)</h3><p>[ES6]使用给定的值，填充一个数组（改变原数组）</p>\n<p>参数：  target – 待填充的元素； start – 开始填充的位置 - 索引； end – 终止填充的位置 - 索引（不包括该位置)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.fill(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2) <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr)   <span class=\"comment\">// [5, 5, 5, 5, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)  <span class=\"comment\">// [1,2,5,5,5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.fill(<span class=\"number\">5</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)  <span class=\"comment\">// [1,5,5,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24-arr-keys\"><a href=\"#24-arr-keys\" class=\"headerlink\" title=\"24. arr.keys()\"></a>24. arr.keys()</h3><p>[ES6]遍历数组的键名</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.keys() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(key)   <span class=\"comment\">// 0,1,2,3,4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"25-arr-values\"><a href=\"#25-arr-values\" class=\"headerlink\" title=\"25. arr.values()\"></a>25. arr.values()</h3><p>[ES6]遍历数组键值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = arr.values() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> val <span class=\"keyword\">of</span> arr1) &#123;</span><br><span class=\"line\">     <span class=\"built_in\">console</span>.log(val); <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"26-arr-entries\"><a href=\"#26-arr-entries\" class=\"headerlink\" title=\"26. arr.entries()\"></a>26. arr.entries()</h3><p>[ES6]遍历数组的键名和键值</p>\n<p>entries() 方法返回迭代数组。<br>迭代数组中每个值 前一个是索引值作为 key， 数组后一个值作为 value。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.entries() </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> e <span class=\"keyword\">of</span> arr2) &#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);   <span class=\"comment\">// [0,1] [1,2] [2,3] [3,4] [4,5]</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"27-arr-copyWithin\"><a href=\"#27-arr-copyWithin\" class=\"headerlink\" title=\"27.arr.copyWithin()\"></a>27.arr.copyWithin()</h3><p>[ES6]在当前数组内部，将制定位置的数组复制到其他位置，会覆盖原数组项，返回当前数组</p>\n<p>参数:　　target –必选 索引从该位置开始替换数组项<br>　　　　 start –可选 索引从该位置开始读取数组项，默认为0.如果为负值，则从右往左读。<br>　　　　 end –可选 索引到该位置停止读取的数组项，默认是Array.length,如果是负值，表示倒数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr.copyWithin(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2)   <span class=\"comment\">// [1, 1, 2, 3, 4, 5, 6]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr3 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3)   <span class=\"comment\">// [1, 3, 4, 5, 6, 7, 7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr4 = arr.copyWithin(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr4)   <span class=\"comment\">// [1, 3, 4, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"28-Array-isArray-value\"><a href=\"#28-Array-isArray-value\" class=\"headerlink\" title=\"28. Array.isArray(value)\"></a>28. Array.isArray(value)</h3><p>判断一个值是否为数组的方法，若为数组，返回true，反之返回false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1234</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&quot;fsaufh&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = &#123;<span class=\"attr\">a</span>:<span class=\"number\">1</span>,<span class=\"attr\">b</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark1 = <span class=\"built_in\">Array</span>.isArray(a) </span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(mark1)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark2 = <span class=\"built_in\">Array</span>.isArray(b) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark2)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark3 = <span class=\"built_in\">Array</span>.isArray(c) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark3)  <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> mark4 = <span class=\"built_in\">Array</span>.isArray(d) </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(mark4)  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"29-arr-join-separate\"><a href=\"#29-arr-join-separate\" class=\"headerlink\" title=\"29. arr.join(separate)\"></a>29. arr.join(separate)</h3><p>把数组中的所有元素放入一个字符串，separate表示分隔符，可省略，默认是逗号</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>] </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join()) <span class=\"comment\">// 1,2,3,4,5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;&quot;</span>)) <span class=\"comment\">// 12345</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.join(<span class=\"string\">&quot;-&quot;</span>))  <span class=\"comment\">// 1-2-3-4-5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"30-arr-flat-pliy\"><a href=\"#30-arr-flat-pliy\" class=\"headerlink\" title=\"30. arr.flat(pliy)\"></a>30. arr.flat(pliy)</h3><p>[ES6]对数组内嵌套的数组“拉平”，就是把数组中的数组的元素挨个拿出来，放数组元素所在位置，返回一个新的数组，不会影响到原来的数组</p>\n<p>参数：pliy表示拉平的层数，默认是1层，想无限拉平可以传入Infinity关键字</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, <span class=\"number\">5</span>]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.flat(<span class=\"number\">2</span>))  <span class=\"comment\">// [1, 2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">1</span>,[<span class=\"number\">2</span>,[<span class=\"number\">3</span>,[<span class=\"number\">4</span>,<span class=\"number\">5</span>]]]] </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2.flat(<span class=\"literal\">Infinity</span>))  <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"31-arr-flatMap\"><a href=\"#31-arr-flatMap\" class=\"headerlink\" title=\"31. arr.flatMap()\"></a>31. arr.flatMap()</h3><p>[ES6]对原数组的每个成员执行一个函数，相当于执行Array.prototype.map(),然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">arr.flatMap(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> [x, x * <span class=\"number\">2</span>]) <span class=\"number\">3</span> <span class=\"comment\">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"32-arr-toString\"><a href=\"#32-arr-toString\" class=\"headerlink\" title=\"32. arr.toString()\"></a>32. arr.toString()</h3><p>将数组转换为字符串并返回。数组中的元素之间用逗号分隔。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr.toString())  <span class=\"comment\">// Banana,Orange,Apple,Mango</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"33-arr-reduce\"><a href=\"#33-arr-reduce\" class=\"headerlink\" title=\"33. arr.reduce()\"></a>33. arr.reduce()</h3><p>对数组中的每个元素执行一个提供的函数（升序执行），将其结果汇总为单个返回值。</p>\n<p>接收4个参数：</p>\n<ol>\n<li> Accumulator (acc) (累计器)</li>\n<li> Current Value (cur) (当前值)</li>\n<li> Current Index (idx) (当前索引)</li>\n<li> Source Array (src) (源数组)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> array1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> reducer = <span class=\"function\">(<span class=\"params\">accumulator, currentValue</span>) =&gt;</span> accumulator + currentValue; <span class=\"comment\">// 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer)); <span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5 + 1 + 2 + 3 + 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array1.reduce(reducer, <span class=\"number\">5</span>)); <span class=\"comment\">// expected output: 15</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n"},{"title":"Vue中axios跨域请求解决方法","date":"2020-12-12T09:00:23.000Z","_content":"\n### 前言\n\n **跨域** ：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。\n\n \n\n所谓 **同源** 是指，域名，协议，端口均相同，浏览器执行 js 脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。\n\n\n### 以下举例：\n\n（1）http://www.123.com/index.html 调用 http://www.123.com/server.php （非跨域）\n\n（2）http://www.123.com/index.html 调用 http://www.456.com/server.php （主域名不同:123/456，跨域）\n\n（3）http://abc.123.com/index.html 调用 http://def.123.com/server.php （子域名不同:abc/def，跨域）\n\n（4）http://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （端口不同:8080/8081，跨域）\n\n（5）http://www.123.com/index.html 调用 https://www.123.com/server.php （协议不同:http/https，跨域）\n\n（6）localhost和127.0.0.1虽然都指向本机，但也属于跨域。\n\n　　\n\n### 一，前端解决之 代理\n\n仅开发环境下建议如此。。\n\n#### 1.  vue-cli 2.x 版本解决方法如下 \n \n\n（1） Vue 的 config 文件夹下的 index.js 文件中，在 proxyTable\n对象中书写跨域配置项：将以  /api 开头的请求地址基础URL替换为 http://localhost:8888 \n\n（2）将 axios 的 baseURL 改为 /api \n\n ![](https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174002544-1723905577.png)\n\n ![](https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174512674-687478051.png)\n\n\n#### 2.  vue-cli 3.x 版本解决方法如下 \n\n（1）在项目根目录下创建全局配置文件 vue.config.js\n\n（2）在配置文件中书写跨域配置（如下图）\n\n（3）将 axios 的 baseURL 改为 /api \n\n\n![](https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141057452-2064672090.png)\n\n \n\n### 二，后端springboot项目解决之 配置项\n \n\n推荐在服务端进行跨域相关配置，在项目中新建允许跨域配置类，如下图。\n\n\n![](https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141622702-1420880345.png)\n\n \n","source":"_posts/Vue中axios跨域请求解决方法.md","raw":"---\ntitle: Vue中axios跨域请求解决方法\ndate: 2020-12-12 17:00:23\ntags: [跨域, vue]\ncategories: Vue\n---\n\n### 前言\n\n **跨域** ：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。\n\n \n\n所谓 **同源** 是指，域名，协议，端口均相同，浏览器执行 js 脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。\n\n\n### 以下举例：\n\n（1）http://www.123.com/index.html 调用 http://www.123.com/server.php （非跨域）\n\n（2）http://www.123.com/index.html 调用 http://www.456.com/server.php （主域名不同:123/456，跨域）\n\n（3）http://abc.123.com/index.html 调用 http://def.123.com/server.php （子域名不同:abc/def，跨域）\n\n（4）http://www.123.com:8080/index.html 调用 http://www.123.com:8081/server.php （端口不同:8080/8081，跨域）\n\n（5）http://www.123.com/index.html 调用 https://www.123.com/server.php （协议不同:http/https，跨域）\n\n（6）localhost和127.0.0.1虽然都指向本机，但也属于跨域。\n\n　　\n\n### 一，前端解决之 代理\n\n仅开发环境下建议如此。。\n\n#### 1.  vue-cli 2.x 版本解决方法如下 \n \n\n（1） Vue 的 config 文件夹下的 index.js 文件中，在 proxyTable\n对象中书写跨域配置项：将以  /api 开头的请求地址基础URL替换为 http://localhost:8888 \n\n（2）将 axios 的 baseURL 改为 /api \n\n ![](https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174002544-1723905577.png)\n\n ![](https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174512674-687478051.png)\n\n\n#### 2.  vue-cli 3.x 版本解决方法如下 \n\n（1）在项目根目录下创建全局配置文件 vue.config.js\n\n（2）在配置文件中书写跨域配置（如下图）\n\n（3）将 axios 的 baseURL 改为 /api \n\n\n![](https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141057452-2064672090.png)\n\n \n\n### 二，后端springboot项目解决之 配置项\n \n\n推荐在服务端进行跨域相关配置，在项目中新建允许跨域配置类，如下图。\n\n\n![](https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141622702-1420880345.png)\n\n \n","slug":"Vue中axios跨域请求解决方法","published":1,"updated":"2020-12-12T09:34:56.704Z","_id":"ckilgy7tb0000qwqc90gqe5pl","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> <strong>跨域</strong> ：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。</p>\n<p>所谓 <strong>同源</strong> 是指，域名，协议，端口均相同，浏览器执行 js 脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。</p>\n<h3 id=\"以下举例：\"><a href=\"#以下举例：\" class=\"headerlink\" title=\"以下举例：\"></a>以下举例：</h3><p>（1）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.123.com/server.php\" >http://www.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （非跨域）</p>\n<p>（2）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.456.com/server.php\" >http://www.456.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （主域名不同:123/456，跨域）</p>\n<p>（3）<a class=\"link\"   href=\"http://abc.123.com/index.html\" >http://abc.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://def.123.com/server.php\" >http://def.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （子域名不同:abc/def，跨域）</p>\n<p>（4）<a class=\"link\"   href=\"http://www.123.com:8080/index.html\" >http://www.123.com:8080/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.123.com:8081/server.php\" >http://www.123.com:8081/server.php<i class=\"fas fa-external-link-alt\"></i></a> （端口不同:8080/8081，跨域）</p>\n<p>（5）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"https://www.123.com/server.php\" >https://www.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （协议不同:http/https，跨域）</p>\n<p>（6）localhost和127.0.0.1虽然都指向本机，但也属于跨域。</p>\n<p>　　</p>\n<h3 id=\"一，前端解决之-代理\"><a href=\"#一，前端解决之-代理\" class=\"headerlink\" title=\"一，前端解决之 代理\"></a>一，前端解决之 代理</h3><p>仅开发环境下建议如此。。</p>\n<h4 id=\"1-vue-cli-2-x-版本解决方法如下\"><a href=\"#1-vue-cli-2-x-版本解决方法如下\" class=\"headerlink\" title=\"1.  vue-cli 2.x 版本解决方法如下\"></a>1.  vue-cli 2.x 版本解决方法如下</h4><p>（1） Vue 的 config 文件夹下的 index.js 文件中，在 proxyTable<br>对象中书写跨域配置项：将以  /api 开头的请求地址基础URL替换为 <a class=\"link\"   href=\"http://localhost:8888/\" >http://localhost:8888<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>（2）将 axios 的 baseURL 改为 /api </p>\n<p> <img src=\"https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174002544-1723905577.png\"></p>\n<p> <img src=\"https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174512674-687478051.png\"></p>\n<h4 id=\"2-vue-cli-3-x-版本解决方法如下\"><a href=\"#2-vue-cli-3-x-版本解决方法如下\" class=\"headerlink\" title=\"2.  vue-cli 3.x 版本解决方法如下\"></a>2.  vue-cli 3.x 版本解决方法如下</h4><p>（1）在项目根目录下创建全局配置文件 vue.config.js</p>\n<p>（2）在配置文件中书写跨域配置（如下图）</p>\n<p>（3）将 axios 的 baseURL 改为 /api </p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141057452-2064672090.png\"></p>\n<h3 id=\"二，后端springboot项目解决之-配置项\"><a href=\"#二，后端springboot项目解决之-配置项\" class=\"headerlink\" title=\"二，后端springboot项目解决之 配置项\"></a>二，后端springboot项目解决之 配置项</h3><p>推荐在服务端进行跨域相关配置，在项目中新建允许跨域配置类，如下图。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141622702-1420880345.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p> <strong>跨域</strong> ：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对JavaScript施加的安全限制。</p>\n<p>所谓 <strong>同源</strong> 是指，域名，协议，端口均相同，浏览器执行 js 脚本时，会检查这个脚本属于哪个页面，如果不是同源页面，就不会被执行。</p>\n<h3 id=\"以下举例：\"><a href=\"#以下举例：\" class=\"headerlink\" title=\"以下举例：\"></a>以下举例：</h3><p>（1）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.123.com/server.php\" >http://www.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （非跨域）</p>\n<p>（2）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.456.com/server.php\" >http://www.456.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （主域名不同:123/456，跨域）</p>\n<p>（3）<a class=\"link\"   href=\"http://abc.123.com/index.html\" >http://abc.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://def.123.com/server.php\" >http://def.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （子域名不同:abc/def，跨域）</p>\n<p>（4）<a class=\"link\"   href=\"http://www.123.com:8080/index.html\" >http://www.123.com:8080/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"http://www.123.com:8081/server.php\" >http://www.123.com:8081/server.php<i class=\"fas fa-external-link-alt\"></i></a> （端口不同:8080/8081，跨域）</p>\n<p>（5）<a class=\"link\"   href=\"http://www.123.com/index.html\" >http://www.123.com/index.html<i class=\"fas fa-external-link-alt\"></i></a> 调用 <a class=\"link\"   href=\"https://www.123.com/server.php\" >https://www.123.com/server.php<i class=\"fas fa-external-link-alt\"></i></a> （协议不同:http/https，跨域）</p>\n<p>（6）localhost和127.0.0.1虽然都指向本机，但也属于跨域。</p>\n<p>　　</p>\n<h3 id=\"一，前端解决之-代理\"><a href=\"#一，前端解决之-代理\" class=\"headerlink\" title=\"一，前端解决之 代理\"></a>一，前端解决之 代理</h3><p>仅开发环境下建议如此。。</p>\n<h4 id=\"1-vue-cli-2-x-版本解决方法如下\"><a href=\"#1-vue-cli-2-x-版本解决方法如下\" class=\"headerlink\" title=\"1.  vue-cli 2.x 版本解决方法如下\"></a>1.  vue-cli 2.x 版本解决方法如下</h4><p>（1） Vue 的 config 文件夹下的 index.js 文件中，在 proxyTable<br>对象中书写跨域配置项：将以  /api 开头的请求地址基础URL替换为 <a class=\"link\"   href=\"http://localhost:8888/\" >http://localhost:8888<i class=\"fas fa-external-link-alt\"></i></a> </p>\n<p>（2）将 axios 的 baseURL 改为 /api </p>\n<p> <img src=\"https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174002544-1723905577.png\"></p>\n<p> <img src=\"https://img2020.cnblogs.com/blog/1855591/202003/1855591-20200308174512674-687478051.png\"></p>\n<h4 id=\"2-vue-cli-3-x-版本解决方法如下\"><a href=\"#2-vue-cli-3-x-版本解决方法如下\" class=\"headerlink\" title=\"2.  vue-cli 3.x 版本解决方法如下\"></a>2.  vue-cli 3.x 版本解决方法如下</h4><p>（1）在项目根目录下创建全局配置文件 vue.config.js</p>\n<p>（2）在配置文件中书写跨域配置（如下图）</p>\n<p>（3）将 axios 的 baseURL 改为 /api </p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141057452-2064672090.png\"></p>\n<h3 id=\"二，后端springboot项目解决之-配置项\"><a href=\"#二，后端springboot项目解决之-配置项\" class=\"headerlink\" title=\"二，后端springboot项目解决之 配置项\"></a>二，后端springboot项目解决之 配置项</h3><p>推荐在服务端进行跨域相关配置，在项目中新建允许跨域配置类，如下图。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202008/1855591-20200830141622702-1420880345.png\"></p>\n"},{"title":"moment插件的使用姿势","date":"2020-12-12T08:31:57.000Z","_content":"\n\n\n### 日期格式化：\n\n```javascript\n1 moment().format('MMMM Do YYYY, h:mm:ss a'); // 三月 7日 2020, 11:59:47 中午\n2 \n3 moment().format('dddd');                    // 星期六\n4 \n5 moment().format(\"MMM Do YY\");               // 3月 7日 20\n6 \n7 moment().format('YYYY [escaped] YYYY');     // 2020 escaped 2020\n8 \n9 moment().format();                          // 2020-03-07T11:59:47+08:00\n```\n\n\n### 相对时间：\n\n```javascript\n1 moment(\"20111031\", \"YYYYMMDD\").fromNow(); // 8 年前\n2 \n3 moment(\"20120620\", \"YYYYMMDD\").fromNow(); // 8 年前\n4 \n5 moment().startOf('day').fromNow();        // 12 小时前\n6 \n7 moment().endOf('day').fromNow();          // 12 小时内\n8 \n9 moment().startOf('hour').fromNow();       // 1 小时前\n```\n\n\n### 日历时间：\n\n```javascript\n 1 moment().subtract(10, 'days').calendar(); // 2020/02/26\n 2 \n 3 moment().subtract(6, 'days').calendar();  // 上星期日11:59\n 4 \n 5 moment().subtract(3, 'days').calendar();  // 上星期三11:59\n 6 \n 7 moment().subtract(1, 'days').calendar();  // 昨天11:59\n 8 \n 9 moment().calendar();                      // 今天11:59\n10 \n11 moment().add(1, 'days').calendar();       // 明天11:59\n12 \n13 moment().add(3, 'days').calendar();       // 下星期二11:59\n14 \n15 moment().add(10, 'days').calendar();      // 2020/03/17\n```\n\n\n### 其他格式：\n\n```javascript\n 1 moment.locale();         // zh-cn\n 2 \n 3 moment().format('LT');   // 11:59\n 4 \n 5 moment().format('LTS');  // 11:59:47\n 6 \n 7 moment().format('L');    // 2020/03/07\n 8 \n 9 moment().format('l');    // 2020/3/7\n10 \n11 moment().format('LL');   // 2020年3月7日\n12 \n13 moment().format('ll');   // 2020年3月7日\n14 \n15 moment().format('LLL');  // 2020年3月7日中午11点59分\n16 \n17 moment().format('lll');  // 2020年3月7日 11:59\n18 \n19 moment().format('LLLL'); // 2020年3月7日星期六中午11点59分\n20 \n21 moment().format('llll'); // 2020年3月7日星期六 11:59\n```\n\n \n### 常用格式：\n\n \n```javascript\nmoment().format(\"YYYY年MM月DD日 HH时mm分ss秒\"); //2020年04月20日 18时59分50秒\n\nmoment(1711641720000).format('YYYY-MM-DD HH:mm:ss'); //2020-04-20 18:59:50（24小时制）\n \nmoment(1711641720000).format('YYYY-MM-DD hh:mm:ss'); //2020-04-20 06:59:50（12小时制）\n```\n \n \n\n \n\n> [moment 文档](http://momentjs.cn/docs/)\n\n \n\n","source":"_posts/moment插件的使用姿势.md","raw":"---\ntitle: moment插件的使用姿势\ndate: 2020-12-12 16:31:57\ntags: [插件, moment]\ncategories: Vue\n---\n\n\n\n### 日期格式化：\n\n```javascript\n1 moment().format('MMMM Do YYYY, h:mm:ss a'); // 三月 7日 2020, 11:59:47 中午\n2 \n3 moment().format('dddd');                    // 星期六\n4 \n5 moment().format(\"MMM Do YY\");               // 3月 7日 20\n6 \n7 moment().format('YYYY [escaped] YYYY');     // 2020 escaped 2020\n8 \n9 moment().format();                          // 2020-03-07T11:59:47+08:00\n```\n\n\n### 相对时间：\n\n```javascript\n1 moment(\"20111031\", \"YYYYMMDD\").fromNow(); // 8 年前\n2 \n3 moment(\"20120620\", \"YYYYMMDD\").fromNow(); // 8 年前\n4 \n5 moment().startOf('day').fromNow();        // 12 小时前\n6 \n7 moment().endOf('day').fromNow();          // 12 小时内\n8 \n9 moment().startOf('hour').fromNow();       // 1 小时前\n```\n\n\n### 日历时间：\n\n```javascript\n 1 moment().subtract(10, 'days').calendar(); // 2020/02/26\n 2 \n 3 moment().subtract(6, 'days').calendar();  // 上星期日11:59\n 4 \n 5 moment().subtract(3, 'days').calendar();  // 上星期三11:59\n 6 \n 7 moment().subtract(1, 'days').calendar();  // 昨天11:59\n 8 \n 9 moment().calendar();                      // 今天11:59\n10 \n11 moment().add(1, 'days').calendar();       // 明天11:59\n12 \n13 moment().add(3, 'days').calendar();       // 下星期二11:59\n14 \n15 moment().add(10, 'days').calendar();      // 2020/03/17\n```\n\n\n### 其他格式：\n\n```javascript\n 1 moment.locale();         // zh-cn\n 2 \n 3 moment().format('LT');   // 11:59\n 4 \n 5 moment().format('LTS');  // 11:59:47\n 6 \n 7 moment().format('L');    // 2020/03/07\n 8 \n 9 moment().format('l');    // 2020/3/7\n10 \n11 moment().format('LL');   // 2020年3月7日\n12 \n13 moment().format('ll');   // 2020年3月7日\n14 \n15 moment().format('LLL');  // 2020年3月7日中午11点59分\n16 \n17 moment().format('lll');  // 2020年3月7日 11:59\n18 \n19 moment().format('LLLL'); // 2020年3月7日星期六中午11点59分\n20 \n21 moment().format('llll'); // 2020年3月7日星期六 11:59\n```\n\n \n### 常用格式：\n\n \n```javascript\nmoment().format(\"YYYY年MM月DD日 HH时mm分ss秒\"); //2020年04月20日 18时59分50秒\n\nmoment(1711641720000).format('YYYY-MM-DD HH:mm:ss'); //2020-04-20 18:59:50（24小时制）\n \nmoment(1711641720000).format('YYYY-MM-DD hh:mm:ss'); //2020-04-20 06:59:50（12小时制）\n```\n \n \n\n \n\n> [moment 文档](http://momentjs.cn/docs/)\n\n \n\n","slug":"moment插件的使用姿势","published":1,"updated":"2020-12-12T09:37:38.226Z","_id":"ckili3kay0006qwqceksx25r4","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"日期格式化：\"><a href=\"#日期格式化：\" class=\"headerlink\" title=\"日期格式化：\"></a>日期格式化：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> moment().format(<span class=\"string\">&#x27;MMMM Do YYYY, h:mm:ss a&#x27;</span>); <span class=\"comment\">// 三月 7日 2020, 11:59:47 中午</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> moment().format(<span class=\"string\">&#x27;dddd&#x27;</span>);                    <span class=\"comment\">// 星期六</span></span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"number\">5</span> moment().format(<span class=\"string\">&quot;MMM Do YY&quot;</span>);               <span class=\"comment\">// 3月 7日 20</span></span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> moment().format(<span class=\"string\">&#x27;YYYY [escaped] YYYY&#x27;</span>);     <span class=\"comment\">// 2020 escaped 2020</span></span><br><span class=\"line\"><span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">9</span> moment().format();                          <span class=\"comment\">// 2020-03-07T11:59:47+08:00</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"相对时间：\"><a href=\"#相对时间：\" class=\"headerlink\" title=\"相对时间：\"></a>相对时间：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> moment(<span class=\"string\">&quot;20111031&quot;</span>, <span class=\"string\">&quot;YYYYMMDD&quot;</span>).fromNow(); <span class=\"comment\">// 8 年前</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> moment(<span class=\"string\">&quot;20120620&quot;</span>, <span class=\"string\">&quot;YYYYMMDD&quot;</span>).fromNow(); <span class=\"comment\">// 8 年前</span></span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"number\">5</span> moment().startOf(<span class=\"string\">&#x27;day&#x27;</span>).fromNow();        <span class=\"comment\">// 12 小时前</span></span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> moment().endOf(<span class=\"string\">&#x27;day&#x27;</span>).fromNow();          <span class=\"comment\">// 12 小时内</span></span><br><span class=\"line\"><span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">9</span> moment().startOf(<span class=\"string\">&#x27;hour&#x27;</span>).fromNow();       <span class=\"comment\">// 1 小时前</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"日历时间：\"><a href=\"#日历时间：\" class=\"headerlink\" title=\"日历时间：\"></a>日历时间：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> moment().subtract(<span class=\"number\">10</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar(); <span class=\"comment\">// 2020/02/26</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"number\">3</span> moment().subtract(<span class=\"number\">6</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 上星期日11:59</span></span><br><span class=\"line\"> <span class=\"number\">4</span> </span><br><span class=\"line\"> <span class=\"number\">5</span> moment().subtract(<span class=\"number\">3</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 上星期三11:59</span></span><br><span class=\"line\"> <span class=\"number\">6</span> </span><br><span class=\"line\"> <span class=\"number\">7</span> moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 昨天11:59</span></span><br><span class=\"line\"> <span class=\"number\">8</span> </span><br><span class=\"line\"> <span class=\"number\">9</span> moment().calendar();                      <span class=\"comment\">// 今天11:59</span></span><br><span class=\"line\"><span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">11</span> moment().add(<span class=\"number\">1</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();       <span class=\"comment\">// 明天11:59</span></span><br><span class=\"line\"><span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"number\">13</span> moment().add(<span class=\"number\">3</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();       <span class=\"comment\">// 下星期二11:59</span></span><br><span class=\"line\"><span class=\"number\">14</span> </span><br><span class=\"line\"><span class=\"number\">15</span> moment().add(<span class=\"number\">10</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();      <span class=\"comment\">// 2020/03/17</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"其他格式：\"><a href=\"#其他格式：\" class=\"headerlink\" title=\"其他格式：\"></a>其他格式：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> moment.locale();         <span class=\"comment\">// zh-cn</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"number\">3</span> moment().format(<span class=\"string\">&#x27;LT&#x27;</span>);   <span class=\"comment\">// 11:59</span></span><br><span class=\"line\"> <span class=\"number\">4</span> </span><br><span class=\"line\"> <span class=\"number\">5</span> moment().format(<span class=\"string\">&#x27;LTS&#x27;</span>);  <span class=\"comment\">// 11:59:47</span></span><br><span class=\"line\"> <span class=\"number\">6</span> </span><br><span class=\"line\"> <span class=\"number\">7</span> moment().format(<span class=\"string\">&#x27;L&#x27;</span>);    <span class=\"comment\">// 2020/03/07</span></span><br><span class=\"line\"> <span class=\"number\">8</span> </span><br><span class=\"line\"> <span class=\"number\">9</span> moment().format(<span class=\"string\">&#x27;l&#x27;</span>);    <span class=\"comment\">// 2020/3/7</span></span><br><span class=\"line\"><span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">11</span> moment().format(<span class=\"string\">&#x27;LL&#x27;</span>);   <span class=\"comment\">// 2020年3月7日</span></span><br><span class=\"line\"><span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"number\">13</span> moment().format(<span class=\"string\">&#x27;ll&#x27;</span>);   <span class=\"comment\">// 2020年3月7日</span></span><br><span class=\"line\"><span class=\"number\">14</span> </span><br><span class=\"line\"><span class=\"number\">15</span> moment().format(<span class=\"string\">&#x27;LLL&#x27;</span>);  <span class=\"comment\">// 2020年3月7日中午11点59分</span></span><br><span class=\"line\"><span class=\"number\">16</span> </span><br><span class=\"line\"><span class=\"number\">17</span> moment().format(<span class=\"string\">&#x27;lll&#x27;</span>);  <span class=\"comment\">// 2020年3月7日 11:59</span></span><br><span class=\"line\"><span class=\"number\">18</span> </span><br><span class=\"line\"><span class=\"number\">19</span> moment().format(<span class=\"string\">&#x27;LLLL&#x27;</span>); <span class=\"comment\">// 2020年3月7日星期六中午11点59分</span></span><br><span class=\"line\"><span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"number\">21</span> moment().format(<span class=\"string\">&#x27;llll&#x27;</span>); <span class=\"comment\">// 2020年3月7日星期六 11:59</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"常用格式：\"><a href=\"#常用格式：\" class=\"headerlink\" title=\"常用格式：\"></a>常用格式：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">&quot;YYYY年MM月DD日 HH时mm分ss秒&quot;</span>); <span class=\"comment\">//2020年04月20日 18时59分50秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">moment(<span class=\"number\">1711641720000</span>).format(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>); <span class=\"comment\">//2020-04-20 18:59:50（24小时制）</span></span><br><span class=\"line\"> </span><br><span class=\"line\">moment(<span class=\"number\">1711641720000</span>).format(<span class=\"string\">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>); <span class=\"comment\">//2020-04-20 06:59:50（12小时制）</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p><a class=\"link\"   href=\"http://momentjs.cn/docs/\" >moment 文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"日期格式化：\"><a href=\"#日期格式化：\" class=\"headerlink\" title=\"日期格式化：\"></a>日期格式化：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> moment().format(<span class=\"string\">&#x27;MMMM Do YYYY, h:mm:ss a&#x27;</span>); <span class=\"comment\">// 三月 7日 2020, 11:59:47 中午</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> moment().format(<span class=\"string\">&#x27;dddd&#x27;</span>);                    <span class=\"comment\">// 星期六</span></span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"number\">5</span> moment().format(<span class=\"string\">&quot;MMM Do YY&quot;</span>);               <span class=\"comment\">// 3月 7日 20</span></span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> moment().format(<span class=\"string\">&#x27;YYYY [escaped] YYYY&#x27;</span>);     <span class=\"comment\">// 2020 escaped 2020</span></span><br><span class=\"line\"><span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">9</span> moment().format();                          <span class=\"comment\">// 2020-03-07T11:59:47+08:00</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"相对时间：\"><a href=\"#相对时间：\" class=\"headerlink\" title=\"相对时间：\"></a>相对时间：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> moment(<span class=\"string\">&quot;20111031&quot;</span>, <span class=\"string\">&quot;YYYYMMDD&quot;</span>).fromNow(); <span class=\"comment\">// 8 年前</span></span><br><span class=\"line\"><span class=\"number\">2</span> </span><br><span class=\"line\"><span class=\"number\">3</span> moment(<span class=\"string\">&quot;20120620&quot;</span>, <span class=\"string\">&quot;YYYYMMDD&quot;</span>).fromNow(); <span class=\"comment\">// 8 年前</span></span><br><span class=\"line\"><span class=\"number\">4</span> </span><br><span class=\"line\"><span class=\"number\">5</span> moment().startOf(<span class=\"string\">&#x27;day&#x27;</span>).fromNow();        <span class=\"comment\">// 12 小时前</span></span><br><span class=\"line\"><span class=\"number\">6</span> </span><br><span class=\"line\"><span class=\"number\">7</span> moment().endOf(<span class=\"string\">&#x27;day&#x27;</span>).fromNow();          <span class=\"comment\">// 12 小时内</span></span><br><span class=\"line\"><span class=\"number\">8</span> </span><br><span class=\"line\"><span class=\"number\">9</span> moment().startOf(<span class=\"string\">&#x27;hour&#x27;</span>).fromNow();       <span class=\"comment\">// 1 小时前</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"日历时间：\"><a href=\"#日历时间：\" class=\"headerlink\" title=\"日历时间：\"></a>日历时间：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> moment().subtract(<span class=\"number\">10</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar(); <span class=\"comment\">// 2020/02/26</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"number\">3</span> moment().subtract(<span class=\"number\">6</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 上星期日11:59</span></span><br><span class=\"line\"> <span class=\"number\">4</span> </span><br><span class=\"line\"> <span class=\"number\">5</span> moment().subtract(<span class=\"number\">3</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 上星期三11:59</span></span><br><span class=\"line\"> <span class=\"number\">6</span> </span><br><span class=\"line\"> <span class=\"number\">7</span> moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();  <span class=\"comment\">// 昨天11:59</span></span><br><span class=\"line\"> <span class=\"number\">8</span> </span><br><span class=\"line\"> <span class=\"number\">9</span> moment().calendar();                      <span class=\"comment\">// 今天11:59</span></span><br><span class=\"line\"><span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">11</span> moment().add(<span class=\"number\">1</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();       <span class=\"comment\">// 明天11:59</span></span><br><span class=\"line\"><span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"number\">13</span> moment().add(<span class=\"number\">3</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();       <span class=\"comment\">// 下星期二11:59</span></span><br><span class=\"line\"><span class=\"number\">14</span> </span><br><span class=\"line\"><span class=\"number\">15</span> moment().add(<span class=\"number\">10</span>, <span class=\"string\">&#x27;days&#x27;</span>).calendar();      <span class=\"comment\">// 2020/03/17</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"其他格式：\"><a href=\"#其他格式：\" class=\"headerlink\" title=\"其他格式：\"></a>其他格式：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"number\">1</span> moment.locale();         <span class=\"comment\">// zh-cn</span></span><br><span class=\"line\"> <span class=\"number\">2</span> </span><br><span class=\"line\"> <span class=\"number\">3</span> moment().format(<span class=\"string\">&#x27;LT&#x27;</span>);   <span class=\"comment\">// 11:59</span></span><br><span class=\"line\"> <span class=\"number\">4</span> </span><br><span class=\"line\"> <span class=\"number\">5</span> moment().format(<span class=\"string\">&#x27;LTS&#x27;</span>);  <span class=\"comment\">// 11:59:47</span></span><br><span class=\"line\"> <span class=\"number\">6</span> </span><br><span class=\"line\"> <span class=\"number\">7</span> moment().format(<span class=\"string\">&#x27;L&#x27;</span>);    <span class=\"comment\">// 2020/03/07</span></span><br><span class=\"line\"> <span class=\"number\">8</span> </span><br><span class=\"line\"> <span class=\"number\">9</span> moment().format(<span class=\"string\">&#x27;l&#x27;</span>);    <span class=\"comment\">// 2020/3/7</span></span><br><span class=\"line\"><span class=\"number\">10</span> </span><br><span class=\"line\"><span class=\"number\">11</span> moment().format(<span class=\"string\">&#x27;LL&#x27;</span>);   <span class=\"comment\">// 2020年3月7日</span></span><br><span class=\"line\"><span class=\"number\">12</span> </span><br><span class=\"line\"><span class=\"number\">13</span> moment().format(<span class=\"string\">&#x27;ll&#x27;</span>);   <span class=\"comment\">// 2020年3月7日</span></span><br><span class=\"line\"><span class=\"number\">14</span> </span><br><span class=\"line\"><span class=\"number\">15</span> moment().format(<span class=\"string\">&#x27;LLL&#x27;</span>);  <span class=\"comment\">// 2020年3月7日中午11点59分</span></span><br><span class=\"line\"><span class=\"number\">16</span> </span><br><span class=\"line\"><span class=\"number\">17</span> moment().format(<span class=\"string\">&#x27;lll&#x27;</span>);  <span class=\"comment\">// 2020年3月7日 11:59</span></span><br><span class=\"line\"><span class=\"number\">18</span> </span><br><span class=\"line\"><span class=\"number\">19</span> moment().format(<span class=\"string\">&#x27;LLLL&#x27;</span>); <span class=\"comment\">// 2020年3月7日星期六中午11点59分</span></span><br><span class=\"line\"><span class=\"number\">20</span> </span><br><span class=\"line\"><span class=\"number\">21</span> moment().format(<span class=\"string\">&#x27;llll&#x27;</span>); <span class=\"comment\">// 2020年3月7日星期六 11:59</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"常用格式：\"><a href=\"#常用格式：\" class=\"headerlink\" title=\"常用格式：\"></a>常用格式：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">moment().format(<span class=\"string\">&quot;YYYY年MM月DD日 HH时mm分ss秒&quot;</span>); <span class=\"comment\">//2020年04月20日 18时59分50秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">moment(<span class=\"number\">1711641720000</span>).format(<span class=\"string\">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>); <span class=\"comment\">//2020-04-20 18:59:50（24小时制）</span></span><br><span class=\"line\"> </span><br><span class=\"line\">moment(<span class=\"number\">1711641720000</span>).format(<span class=\"string\">&#x27;YYYY-MM-DD hh:mm:ss&#x27;</span>); <span class=\"comment\">//2020-04-20 06:59:50（12小时制）</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<blockquote>\n<p><a class=\"link\"   href=\"http://momentjs.cn/docs/\" >moment 文档<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"Web前端存储之sessionStorage和localStorage","date":"2020-12-12T09:37:57.000Z","_content":"\n## 前言\n\n1. 对浏览器来说，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage\n\nlocalStorage和sessionStorage的存储数据大小一般都是：5MB\n\n- sessionStorage（临时存储） ：为每一个数据源维持一个存储区域，在浏览器的此标签页打开期间存在，包括此标签页的页面重新加载\n\n- localStorage（长期存储） ：与 sessionStorage 一样，但是浏览器关闭后，数据依然会一直存在\n \n\n> 用法说明：sessionStorage 和 localStorage 的用法基本一致，引用类型的值需要转换成 JSON 进行存储\n\n## 用法\n \n\n### 1. 保存数据到本地\n\n```javascript\nlet obj = {\n    name: 'xiaoming',\n    age: 18,\n    birthday: '2000-01-01',\n}\n\nsessionStorage.setItem('userInfo', JSON.stringify(obj))\n\nlocalStorage.setItem('userInfo', JSON.stringify(obj))\n```\n\n> 注：若第二次存储的key值与第一次存储的key值相同，则会覆盖第一次的值。\n\n \n\n### 2. 从本地读取数据\n\n \n```javascript\nlet obj1 = JSON.parse(sessionStorage.getItem('userInfo'))\n\nlet obj2 = JSON.parse(localStorage.getItem('userInfo'))\n``` \n\n### 3. 从本地删除指定 key 值\n\n \n```javascript\nsessionStorage.removeItem('userInfo')\n\nlocalStorage.removeItem('userInfo')\n```\n\n### 4. 清空存储的所有值\n\n \n```javascript\nsessionStorage.clear()\n\nlocalStorage.clear()\n ```\n \n","source":"_posts/Web前端存储之sessionStorage和localStorage.md","raw":"---\ntitle: Web前端存储之sessionStorage和localStorage\ndate: 2020-12-12 17:37:57\ntags: 前端存储\ncategories: JavaScript\n---\n\n## 前言\n\n1. 对浏览器来说，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage\n\nlocalStorage和sessionStorage的存储数据大小一般都是：5MB\n\n- sessionStorage（临时存储） ：为每一个数据源维持一个存储区域，在浏览器的此标签页打开期间存在，包括此标签页的页面重新加载\n\n- localStorage（长期存储） ：与 sessionStorage 一样，但是浏览器关闭后，数据依然会一直存在\n \n\n> 用法说明：sessionStorage 和 localStorage 的用法基本一致，引用类型的值需要转换成 JSON 进行存储\n\n## 用法\n \n\n### 1. 保存数据到本地\n\n```javascript\nlet obj = {\n    name: 'xiaoming',\n    age: 18,\n    birthday: '2000-01-01',\n}\n\nsessionStorage.setItem('userInfo', JSON.stringify(obj))\n\nlocalStorage.setItem('userInfo', JSON.stringify(obj))\n```\n\n> 注：若第二次存储的key值与第一次存储的key值相同，则会覆盖第一次的值。\n\n \n\n### 2. 从本地读取数据\n\n \n```javascript\nlet obj1 = JSON.parse(sessionStorage.getItem('userInfo'))\n\nlet obj2 = JSON.parse(localStorage.getItem('userInfo'))\n``` \n\n### 3. 从本地删除指定 key 值\n\n \n```javascript\nsessionStorage.removeItem('userInfo')\n\nlocalStorage.removeItem('userInfo')\n```\n\n### 4. 清空存储的所有值\n\n \n```javascript\nsessionStorage.clear()\n\nlocalStorage.clear()\n ```\n \n","slug":"Web前端存储之sessionStorage和localStorage","published":1,"updated":"2020-12-12T09:38:49.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckilibqq90000hoqcdpqef2u8","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li>对浏览器来说，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage</li>\n</ol>\n<p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<ul>\n<li><p>sessionStorage（临时存储） ：为每一个数据源维持一个存储区域，在浏览器的此标签页打开期间存在，包括此标签页的页面重新加载</p>\n</li>\n<li><p>localStorage（长期存储） ：与 sessionStorage 一样，但是浏览器关闭后，数据依然会一直存在</p>\n</li>\n</ul>\n<blockquote>\n<p>用法说明：sessionStorage 和 localStorage 的用法基本一致，引用类型的值需要转换成 JSON 进行存储</p>\n</blockquote>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1-保存数据到本地\"><a href=\"#1-保存数据到本地\" class=\"headerlink\" title=\"1. 保存数据到本地\"></a>1. 保存数据到本地</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    birthday: <span class=\"string\">&#x27;2000-01-01&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sessionStorage.setItem(<span class=\"string\">&#x27;userInfo&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;userInfo&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(obj))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：若第二次存储的key值与第一次存储的key值相同，则会覆盖第一次的值。</p>\n</blockquote>\n<h3 id=\"2-从本地读取数据\"><a href=\"#2-从本地读取数据\" class=\"headerlink\" title=\"2. 从本地读取数据\"></a>2. 从本地读取数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">&#x27;userInfo&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;userInfo&#x27;</span>))</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 3. 从本地删除指定 key 值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">sessionStorage.removeItem(<span class=\"string\">&#x27;userInfo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.removeItem(<span class=\"string\">&#x27;userInfo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-清空存储的所有值\"><a href=\"#4-清空存储的所有值\" class=\"headerlink\" title=\"4. 清空存储的所有值\"></a>4. 清空存储的所有值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.clear()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><ol>\n<li>对浏览器来说，使用 Web Storage 存储键值对比存储 Cookie 方式更直观，而且容量更大，它包含两种：localStorage 和 sessionStorage</li>\n</ol>\n<p>localStorage和sessionStorage的存储数据大小一般都是：5MB</p>\n<ul>\n<li><p>sessionStorage（临时存储） ：为每一个数据源维持一个存储区域，在浏览器的此标签页打开期间存在，包括此标签页的页面重新加载</p>\n</li>\n<li><p>localStorage（长期存储） ：与 sessionStorage 一样，但是浏览器关闭后，数据依然会一直存在</p>\n</li>\n</ul>\n<blockquote>\n<p>用法说明：sessionStorage 和 localStorage 的用法基本一致，引用类型的值需要转换成 JSON 进行存储</p>\n</blockquote>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><h3 id=\"1-保存数据到本地\"><a href=\"#1-保存数据到本地\" class=\"headerlink\" title=\"1. 保存数据到本地\"></a>1. 保存数据到本地</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    name: <span class=\"string\">&#x27;xiaoming&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">18</span>,</span><br><span class=\"line\">    birthday: <span class=\"string\">&#x27;2000-01-01&#x27;</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">sessionStorage.setItem(<span class=\"string\">&#x27;userInfo&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(obj))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&#x27;userInfo&#x27;</span>, <span class=\"built_in\">JSON</span>.stringify(obj))</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：若第二次存储的key值与第一次存储的key值相同，则会覆盖第一次的值。</p>\n</blockquote>\n<h3 id=\"2-从本地读取数据\"><a href=\"#2-从本地读取数据\" class=\"headerlink\" title=\"2. 从本地读取数据\"></a>2. 从本地读取数据</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj1 = <span class=\"built_in\">JSON</span>.parse(sessionStorage.getItem(<span class=\"string\">&#x27;userInfo&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&#x27;userInfo&#x27;</span>))</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">` </span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">### 3. 从本地删除指定 key 值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"> </span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>javascript</span><br><span class=\"line\">sessionStorage.removeItem(<span class=\"string\">&#x27;userInfo&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.removeItem(<span class=\"string\">&#x27;userInfo&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-清空存储的所有值\"><a href=\"#4-清空存储的所有值\" class=\"headerlink\" title=\"4. 清空存储的所有值\"></a>4. 清空存储的所有值</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sessionStorage.clear()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">localStorage</span>.clear()</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JS常用正则表达式","date":"2020-12-12T09:40:34.000Z","_content":"\n## 一 常用正则\n \n\n\n1.  `\\` ：将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。\n\n　　例如：\"\\d\" 匹配数字字符，而不是匹配字母d。\n\n \n\n2.  `^`  ：匹配输入的开始位置。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。\n\n　　例如：/^A/ 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。\n\n \n\n3. `$`  ：匹配输入的结束位置。如果多行标志被设置为 true，那么也匹配换行符前的位置。\n\n　　例如：/t$/ 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。\n\n \n\n4.  `*`  ：匹配一个表达式 0 次或多次，等价于 {0, }。\n\n　　例如：/bo*/ 会匹配 \"A ghost boooooed\" 中的 'booooo' 和 \"A bird warbled\" 中的 'b'，但是在 \"A goat grunted\" 中不会匹配任何内容。\n\n \n\n5. `+`  ：匹配前面一个表达式 1 次或多次，等价于{1, }。\n\n　　例如：/a+/ 会匹配 \"candy\" 中的 'a' 和 \"caaaaaaandy\" 中所有的 'a'，但是在 \"cndy\" 中不会匹配任何内容。\n\n \n\n6.  `?`   ：匹配前面一个表达式 0 次或 1 次，等价于{0, 1}。\n\n　　例如：/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。\n\n　　如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 \"123abc\" 使用 /\\d+/ 将会匹配 \"123\"，而使用 /\\d+?/ 则只会匹配到 \"1\"。\n\n \n\n7.   `.`  ：（小数点）默认匹配换行符之外的任何单个字符。\n\n　　例如：/.n/ 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。如果 s (\"dotAll\") 标志位被设为 true，它也会匹配换行符。\n\n \n\n像下面的8-12例子( )展示的那样，它会匹配 'x' 并且记住匹配项。其中括号被称为捕获括号。\n\n8.  `(x)`   ：模式 /(foo) (bar) \\1 \\2/ 中的 '(foo)' 和 '(bar)' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的 \\1 和 \\2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \\1、\\2、...、\\n 是用在正则表达式的匹配环节。而在正则表达式的替换环节，则要使用像 $1、$2、...、$n 这样的语法，例如，'bar foo'.replace(/(...) (...)/, '$2 $1')。$& 表示整个用于匹配的原字符串。\n\n \n\n9.  `(?:x)`   ：匹配 'x' 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。\n\n　　　例如：/(?:foo){1,2}/。如果表达式是 /foo{1,2}/，{1,2} 将只应用于 'foo' 的最后一个字符 'o'。如果使用非捕获括号，则 {1,2} 会应用于整个 'foo' 单词。\n\n \n\n10.   `x(?=y)`  ：匹配 x 仅仅当 x 后面跟着 y 这种叫做先行断言。\n\n　　例如：/Jack(?=Sprat)/会匹配到'Jack'仅当它后面跟着'Sprat'。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。\n\n \n\n11.  `(?<=y)x`  ：匹配 x 仅当前面是 y ，这种叫做后行断言。\n\n　　例如：/(?<=Jack)Sprat/会匹配到' Sprat '仅仅当它前面是' Jack '。/(?<=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是'Jack'或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。\n\n \n\n12.  `x(?!y)` ：仅仅当 x 后面不跟着 y 时匹配 x，这种为正否定查找。\n\n　　例如：仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!\\.)/ 匹配一个数字。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’。\n\n \n\n13.  `(?<!y)x`  ：仅仅当前面不是 y 时匹配 x ，这种为反否定查找。\n\n　　例如：仅仅当这个数字前面没有负号的时候，/(?<!-)\\d+/ 匹配一个数字。/(?<!-)\\d+/.exec('3') 匹配到 \"3\".。/(?<!-)\\d+/.exec('-3') 因为这个数字前有负号，所以没有匹配到。\n\n \n\n14.  `x|y`  ：匹配 x 或者 y。\n\n　　例如：/green|red/匹配“green apple”中的‘green’和“red apple”中的‘red’。\n\n \n\n15.  `{n}`   ：n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。\n\n　　例如：/a{2}/ 不会匹配“candy”中的'a',但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个'a'。\n\n \n\n16.  `{n, }`   ：n 是一个正整数，匹配前一个字符至少出现了 n 次。\n\n　　例如：/a{2,}/ 匹配 \"aa\", \"aaaa\" 和 \"aaaaa\" 但是不匹配 \"a\"。\n\n \n\n17.  `{n,m}`   ：n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次。如果这个值是 0，这个值会被忽略。\n\n　　例如：/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。\n\n \n\n18.  `[xyz]`   ：一个字符集合。匹配方括号中的任意字符，包括转义序列。可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。\n\n　　例如：[abcd] 和[a-d]是一样的。他们都匹配\"brisket\"中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。\n\n \n\n19.  `[^xyz]`   ：一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。\n\n　　例如：[^abc] 和 [^a-c] 是一样的。他们匹配\"brisket\"中的‘r’，也匹配“chop”中的‘h’。\n\n \n\n20.  `[\\b]`  ：匹配一个退格(U+0008)。（不要和\\b混淆了。）\n\n \n\n21.  `\\b`   ：匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）\n\n　　例如：使用\"moon\"举例：\n　　　　/\\bm/匹配“moon”中的‘m’；\n　　　　/oo\\b/并不匹配\"moon\"中的'oo'，因为'oo'被一个“字”字符'n'紧跟着。\n　　　　/oon\\b/匹配\"moon\"中的'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。\n\n \n\n22.  `\\B`  ：匹配一个非单词边界。匹配如下情况：（1）字符串第一个字符为非“字”字符（2）字符串最后一个字符为非“字”字符（3）两个单词字符之间（4）两个非单词字符之间（5）空字符串\n\n　　例如：/\\B../匹配\"noonday\"中的'oo', 而/y\\B../匹配\"possibly yesterday\"中的’yes‘。\n\n \n\n23.  `\\cX`  ：当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。\n\n　　例如：/\\cM/ 匹配字符串中的 control-M (U+000D)。\n\n \n\n24.  `\\d`  ：匹配一个数字，等价于[0,9]。\n\n　　例如： /\\d/ 或者 /[0-9]/ 匹配\"B2 is the suite number.\"中的'2'。\n\n \n\n25.  `\\D`  ：匹配一个非数字字符，等价于[^0,9]。\n\n　　例如：/\\D/ 或者 /[^0-9]/ 匹配\"B2 is the suite number.\"中的'B' 。\n\n \n\n26.  `\\f`  ：匹配一个换页符 (U+000C)。\n\n \n\n27.  `\\n`  ：匹配一个换行符 (U+000A)。\n\n \n\n28.  `\\r`  ：匹配一个回车符 (U+000D)。\n\n \n\n29.  `\\s`  ：匹配一个空白字符，包括空格、制表符、换页符和换行符，等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n　　例如：/\\s\\w*/ 匹配\"foo bar.\"中的' bar'。\n\n \n\n30.  `\\S`  ：匹配一个非空白字符，等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n　　例如：/\\S\\w*/ 匹配\"foo bar.\"中的'foo'。\n\n \n\n31.  `\\t`  ：匹配一个水平制表符 (U+0009)。\n\n \n\n32.  `\\v`  ：匹配一个垂直制表符 (U+000B)。\n\n \n\n33.  `\\w`  ：匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。\n\n　　例如：/\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。\n\n \n\n34.  `\\W`  ：匹配一个非单词字符，等价于[^A-Za-z0-9_]。\n\n　　例如：/\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%'。\n\n \n\n35.  `\\n`  ：在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。\n\n \n\n36.  `\\0` ： 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。\n\n \n\n37.  `\\xhh`  ：匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。\n\n \n\n38.  `\\uhhhh`  ：匹配一个四位十六进制数表示的 UTF-16 代码单元。\n\n \n\n39.  `\\u{hhhh}`  或  `\\uhhhhh`  ：(仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。\n\n \n\n## 二 正则表达式标志\n \n\n1.  `g` ：全局搜索\n\n2.  `i` ：不区分大小写搜索\n\n3.  `m` ： 多行搜索\n\n4.  `s` ： 允许 . 匹配换行字符\n\n5.  `u` ：使用Unicode码的模式进行匹配\n\n6. `y` ： 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。\n\n \n\n## 三 使用括号的子字符串匹配\n一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素[1],……[n]。\n\n使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。\n\n例如：下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。\n\n```javascript\nvar re = /(\\w+)\\s(\\w+)/;\n\nvar str = \"John Smith\";\n\nvar newstr = str.replace(re, \"$2, $1\");\n\nconsole.log(newstr);  // Smith, John\n```\n\n## 四 使用正则表达式的方法\n \n\n1.  `exec` ：一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。\n\n \n```javascript\nvar text = \"mom and dad and baby\";\n\nvar pattern = /mom( and dad( and baby)?)?/gi;\n\nvar matches = pattern.exec(text);\n\nconsole.log(matches.index); //0\n\nconsole.log(matches.input); //mom and dad and baby\n\nconsole.log(matches[0]);    //mom and dad and baby\n\nconsole.log(matches[1]);    //and dad and baby\n\nconsole.log(matches[2]);    //and baby\n```\n\n \n\n2.  `test` ：一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。\n\n \n```javascript\nvar str = '374829348791';\n\nvar re = /\\D/;      //  \\D代表非数字\n\nif( re.test(str) ){   // 返回true,代表在字符串中找到了非数字。\n\n    alert('不全是数字');\n\n}else{\n\n    alert('全是数字');\n\n}\n```\n\n \n\n3.  `match` ：一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。\n\n \n\n\"186a619b28\".match(/\\d+/g); // [\"186\",\"619\",\"28\"] \n \n\n \n\n4.  `matchAll` ：一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。\n\n \n\n5.  `search` ：一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。\n\n \n```javascript\nvar str = 'abcdef';\n\nvar re = /B/i;\n\n//var re = new RegExp('B','i'); 也可以这样写\n\nalert( str.search(re) ); // 1\n```\n \n\n6.  `replace` ：一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。\n\n \n```javascript\nreplace 方法去除字符串 前 中 后 的空格：\n\nlet val = '  这是  一段  测试文字  '\n\nval = val.trim().replace(/\\s/g,\"\") // 这是一段测试文字\n```\n \n\n7.  `split` ：一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。\n\n\n## 五 常用校验方法\n \n\n1. 金额格式校验替换\n\n```javascript\nfunction moneyReplace(val) {\n  if(!val) return val\n  // 若第一字符是 .  则替换为 0.\n  val = String(val).replace(/^\\./, \"0.\")\n  // 保证 . 只出现一次 ， 而不能出现两次或两次以上\n  val = val.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\")\n  // 只能输入两个小数\n  val = val.replace(/^(\\d+)\\.(\\d\\d).*$/, \"$1.$2\")\n  // 如果没有小数点，首位不能为类似于 01、02的金额\n  if((val.indexOf(\".\") == -1) && val != 0) {\n    val = parseFloat(val)\n  }\n  return Number.isNaN(Number(val)) ? '0.00' : val\n}\n\nmoneyReplace(12.345) // 12.34\n\nmoneyReplace(.789) // 0.78\n\nmoneyReplace('abc') // 0.00\n```\n \n> [JS正则表达式详解](https://www.cnblogs.com/moqiutao/articles/6513628.html)\n\n ","source":"_posts/JS常用正则表达式.md","raw":"---\ntitle: JS常用正则表达式\ndate: 2020-12-12 17:40:34\ntags: 正则\ncategories: JavaScript\n---\n\n## 一 常用正则\n \n\n\n1.  `\\` ：将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。\n\n　　例如：\"\\d\" 匹配数字字符，而不是匹配字母d。\n\n \n\n2.  `^`  ：匹配输入的开始位置。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。\n\n　　例如：/^A/ 并不会匹配 \"an A\" 中的 'A'，但是会匹配 \"An E\" 中的 'A'。\n\n \n\n3. `$`  ：匹配输入的结束位置。如果多行标志被设置为 true，那么也匹配换行符前的位置。\n\n　　例如：/t$/ 并不会匹配 \"eater\" 中的 't'，但是会匹配 \"eat\" 中的 't'。\n\n \n\n4.  `*`  ：匹配一个表达式 0 次或多次，等价于 {0, }。\n\n　　例如：/bo*/ 会匹配 \"A ghost boooooed\" 中的 'booooo' 和 \"A bird warbled\" 中的 'b'，但是在 \"A goat grunted\" 中不会匹配任何内容。\n\n \n\n5. `+`  ：匹配前面一个表达式 1 次或多次，等价于{1, }。\n\n　　例如：/a+/ 会匹配 \"candy\" 中的 'a' 和 \"caaaaaaandy\" 中所有的 'a'，但是在 \"cndy\" 中不会匹配任何内容。\n\n \n\n6.  `?`   ：匹配前面一个表达式 0 次或 1 次，等价于{0, 1}。\n\n　　例如：/e?le?/ 匹配 \"angel\" 中的 'el'、\"angle\" 中的 'le' 以及 \"oslo' 中的 'l'。\n\n　　如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 \"123abc\" 使用 /\\d+/ 将会匹配 \"123\"，而使用 /\\d+?/ 则只会匹配到 \"1\"。\n\n \n\n7.   `.`  ：（小数点）默认匹配换行符之外的任何单个字符。\n\n　　例如：/.n/ 将会匹配 \"nay, an apple is on the tree\" 中的 'an' 和 'on'，但是不会匹配 'nay'。如果 s (\"dotAll\") 标志位被设为 true，它也会匹配换行符。\n\n \n\n像下面的8-12例子( )展示的那样，它会匹配 'x' 并且记住匹配项。其中括号被称为捕获括号。\n\n8.  `(x)`   ：模式 /(foo) (bar) \\1 \\2/ 中的 '(foo)' 和 '(bar)' 匹配并记住字符串 \"foo bar foo bar\" 中前两个单词。模式中的 \\1 和 \\2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \\1、\\2、...、\\n 是用在正则表达式的匹配环节。而在正则表达式的替换环节，则要使用像 $1、$2、...、$n 这样的语法，例如，'bar foo'.replace(/(...) (...)/, '$2 $1')。$& 表示整个用于匹配的原字符串。\n\n \n\n9.  `(?:x)`   ：匹配 'x' 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。\n\n　　　例如：/(?:foo){1,2}/。如果表达式是 /foo{1,2}/，{1,2} 将只应用于 'foo' 的最后一个字符 'o'。如果使用非捕获括号，则 {1,2} 会应用于整个 'foo' 单词。\n\n \n\n10.   `x(?=y)`  ：匹配 x 仅仅当 x 后面跟着 y 这种叫做先行断言。\n\n　　例如：/Jack(?=Sprat)/会匹配到'Jack'仅当它后面跟着'Sprat'。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着'Sprat'或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。\n\n \n\n11.  `(?<=y)x`  ：匹配 x 仅当前面是 y ，这种叫做后行断言。\n\n　　例如：/(?<=Jack)Sprat/会匹配到' Sprat '仅仅当它前面是' Jack '。/(?<=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是'Jack'或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。\n\n \n\n12.  `x(?!y)` ：仅仅当 x 后面不跟着 y 时匹配 x，这种为正否定查找。\n\n　　例如：仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!\\.)/ 匹配一个数字。正则表达式/\\d+(?!\\.)/.exec(\"3.141\")匹配‘141’而不是‘3.141’。\n\n \n\n13.  `(?<!y)x`  ：仅仅当前面不是 y 时匹配 x ，这种为反否定查找。\n\n　　例如：仅仅当这个数字前面没有负号的时候，/(?<!-)\\d+/ 匹配一个数字。/(?<!-)\\d+/.exec('3') 匹配到 \"3\".。/(?<!-)\\d+/.exec('-3') 因为这个数字前有负号，所以没有匹配到。\n\n \n\n14.  `x|y`  ：匹配 x 或者 y。\n\n　　例如：/green|red/匹配“green apple”中的‘green’和“red apple”中的‘red’。\n\n \n\n15.  `{n}`   ：n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。\n\n　　例如：/a{2}/ 不会匹配“candy”中的'a',但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个'a'。\n\n \n\n16.  `{n, }`   ：n 是一个正整数，匹配前一个字符至少出现了 n 次。\n\n　　例如：/a{2,}/ 匹配 \"aa\", \"aaaa\" 和 \"aaaaa\" 但是不匹配 \"a\"。\n\n \n\n17.  `{n,m}`   ：n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次。如果这个值是 0，这个值会被忽略。\n\n　　例如：/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。\n\n \n\n18.  `[xyz]`   ：一个字符集合。匹配方括号中的任意字符，包括转义序列。可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。\n\n　　例如：[abcd] 和[a-d]是一样的。他们都匹配\"brisket\"中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。\n\n \n\n19.  `[^xyz]`   ：一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。\n\n　　例如：[^abc] 和 [^a-c] 是一样的。他们匹配\"brisket\"中的‘r’，也匹配“chop”中的‘h’。\n\n \n\n20.  `[\\b]`  ：匹配一个退格(U+0008)。（不要和\\b混淆了。）\n\n \n\n21.  `\\b`   ：匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）\n\n　　例如：使用\"moon\"举例：\n　　　　/\\bm/匹配“moon”中的‘m’；\n　　　　/oo\\b/并不匹配\"moon\"中的'oo'，因为'oo'被一个“字”字符'n'紧跟着。\n　　　　/oon\\b/匹配\"moon\"中的'oon'，因为'oon'是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。\n\n \n\n22.  `\\B`  ：匹配一个非单词边界。匹配如下情况：（1）字符串第一个字符为非“字”字符（2）字符串最后一个字符为非“字”字符（3）两个单词字符之间（4）两个非单词字符之间（5）空字符串\n\n　　例如：/\\B../匹配\"noonday\"中的'oo', 而/y\\B../匹配\"possibly yesterday\"中的’yes‘。\n\n \n\n23.  `\\cX`  ：当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。\n\n　　例如：/\\cM/ 匹配字符串中的 control-M (U+000D)。\n\n \n\n24.  `\\d`  ：匹配一个数字，等价于[0,9]。\n\n　　例如： /\\d/ 或者 /[0-9]/ 匹配\"B2 is the suite number.\"中的'2'。\n\n \n\n25.  `\\D`  ：匹配一个非数字字符，等价于[^0,9]。\n\n　　例如：/\\D/ 或者 /[^0-9]/ 匹配\"B2 is the suite number.\"中的'B' 。\n\n \n\n26.  `\\f`  ：匹配一个换页符 (U+000C)。\n\n \n\n27.  `\\n`  ：匹配一个换行符 (U+000A)。\n\n \n\n28.  `\\r`  ：匹配一个回车符 (U+000D)。\n\n \n\n29.  `\\s`  ：匹配一个空白字符，包括空格、制表符、换页符和换行符，等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n　　例如：/\\s\\w*/ 匹配\"foo bar.\"中的' bar'。\n\n \n\n30.  `\\S`  ：匹配一个非空白字符，等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。\n\n　　例如：/\\S\\w*/ 匹配\"foo bar.\"中的'foo'。\n\n \n\n31.  `\\t`  ：匹配一个水平制表符 (U+0009)。\n\n \n\n32.  `\\v`  ：匹配一个垂直制表符 (U+000B)。\n\n \n\n33.  `\\w`  ：匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。\n\n　　例如：/\\w/ 匹配 \"apple,\" 中的 'a'，\"$5.28,\"中的 '5' 和 \"3D.\" 中的 '3'。\n\n \n\n34.  `\\W`  ：匹配一个非单词字符，等价于[^A-Za-z0-9_]。\n\n　　例如：/\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 \"50%.\" 中的 '%'。\n\n \n\n35.  `\\n`  ：在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。\n\n \n\n36.  `\\0` ： 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。\n\n \n\n37.  `\\xhh`  ：匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。\n\n \n\n38.  `\\uhhhh`  ：匹配一个四位十六进制数表示的 UTF-16 代码单元。\n\n \n\n39.  `\\u{hhhh}`  或  `\\uhhhhh`  ：(仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。\n\n \n\n## 二 正则表达式标志\n \n\n1.  `g` ：全局搜索\n\n2.  `i` ：不区分大小写搜索\n\n3.  `m` ： 多行搜索\n\n4.  `s` ： 允许 . 匹配换行字符\n\n5.  `u` ：使用Unicode码的模式进行匹配\n\n6. `y` ： 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。\n\n \n\n## 三 使用括号的子字符串匹配\n一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素[1],……[n]。\n\n使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。\n\n例如：下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。\n\n```javascript\nvar re = /(\\w+)\\s(\\w+)/;\n\nvar str = \"John Smith\";\n\nvar newstr = str.replace(re, \"$2, $1\");\n\nconsole.log(newstr);  // Smith, John\n```\n\n## 四 使用正则表达式的方法\n \n\n1.  `exec` ：一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。\n\n \n```javascript\nvar text = \"mom and dad and baby\";\n\nvar pattern = /mom( and dad( and baby)?)?/gi;\n\nvar matches = pattern.exec(text);\n\nconsole.log(matches.index); //0\n\nconsole.log(matches.input); //mom and dad and baby\n\nconsole.log(matches[0]);    //mom and dad and baby\n\nconsole.log(matches[1]);    //and dad and baby\n\nconsole.log(matches[2]);    //and baby\n```\n\n \n\n2.  `test` ：一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。\n\n \n```javascript\nvar str = '374829348791';\n\nvar re = /\\D/;      //  \\D代表非数字\n\nif( re.test(str) ){   // 返回true,代表在字符串中找到了非数字。\n\n    alert('不全是数字');\n\n}else{\n\n    alert('全是数字');\n\n}\n```\n\n \n\n3.  `match` ：一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。\n\n \n\n\"186a619b28\".match(/\\d+/g); // [\"186\",\"619\",\"28\"] \n \n\n \n\n4.  `matchAll` ：一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。\n\n \n\n5.  `search` ：一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。\n\n \n```javascript\nvar str = 'abcdef';\n\nvar re = /B/i;\n\n//var re = new RegExp('B','i'); 也可以这样写\n\nalert( str.search(re) ); // 1\n```\n \n\n6.  `replace` ：一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。\n\n \n```javascript\nreplace 方法去除字符串 前 中 后 的空格：\n\nlet val = '  这是  一段  测试文字  '\n\nval = val.trim().replace(/\\s/g,\"\") // 这是一段测试文字\n```\n \n\n7.  `split` ：一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。\n\n\n## 五 常用校验方法\n \n\n1. 金额格式校验替换\n\n```javascript\nfunction moneyReplace(val) {\n  if(!val) return val\n  // 若第一字符是 .  则替换为 0.\n  val = String(val).replace(/^\\./, \"0.\")\n  // 保证 . 只出现一次 ， 而不能出现两次或两次以上\n  val = val.replace(\".\", \"$#$\").replace(/\\./g, \"\").replace(\"$#$\", \".\")\n  // 只能输入两个小数\n  val = val.replace(/^(\\d+)\\.(\\d\\d).*$/, \"$1.$2\")\n  // 如果没有小数点，首位不能为类似于 01、02的金额\n  if((val.indexOf(\".\") == -1) && val != 0) {\n    val = parseFloat(val)\n  }\n  return Number.isNaN(Number(val)) ? '0.00' : val\n}\n\nmoneyReplace(12.345) // 12.34\n\nmoneyReplace(.789) // 0.78\n\nmoneyReplace('abc') // 0.00\n```\n \n> [JS正则表达式详解](https://www.cnblogs.com/moqiutao/articles/6513628.html)\n\n ","slug":"JS常用正则表达式","published":1,"updated":"2020-12-12T09:55:10.301Z","_id":"ckilih44f0000d8qc3u8j2pj9","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一-常用正则\"><a href=\"#一-常用正则\" class=\"headerlink\" title=\"一 常用正则\"></a>一 常用正则</h2><ol>\n<li> <code>\\</code> ：将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。</li>\n</ol>\n<p>　　例如：”\\d” 匹配数字字符，而不是匹配字母d。</p>\n<ol start=\"2\">\n<li> <code>^</code>  ：匹配输入的开始位置。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。</li>\n</ol>\n<p>　　例如：/^A/ 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。</p>\n<ol start=\"3\">\n<li><code>$</code>  ：匹配输入的结束位置。如果多行标志被设置为 true，那么也匹配换行符前的位置。</li>\n</ol>\n<p>　　例如：/t$/ 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</p>\n<ol start=\"4\">\n<li> <code>*</code>  ：匹配一个表达式 0 次或多次，等价于 {0, }。</li>\n</ol>\n<p>　　例如：/bo*/ 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</p>\n<ol start=\"5\">\n<li><code>+</code>  ：匹配前面一个表达式 1 次或多次，等价于{1, }。</li>\n</ol>\n<p>　　例如：/a+/ 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</p>\n<ol start=\"6\">\n<li> <code>?</code>   ：匹配前面一个表达式 0 次或 1 次，等价于{0, 1}。</li>\n</ol>\n<p>　　例如：/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</p>\n<p>　　如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 /\\d+/ 将会匹配 “123”，而使用 /\\d+?/ 则只会匹配到 “1”。</p>\n<ol start=\"7\">\n<li>  <code>.</code>  ：（小数点）默认匹配换行符之外的任何单个字符。</li>\n</ol>\n<p>　　例如：/.n/ 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。如果 s (“dotAll”) 标志位被设为 true，它也会匹配换行符。</p>\n<p>像下面的8-12例子( )展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。</p>\n<ol start=\"8\">\n<li> <code>(x)</code>   ：模式 /(foo) (bar) \\1 \\2/ 中的 ‘(foo)’ 和 ‘(bar)’ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 \\1 和 \\2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \\1、\\2、…、\\n 是用在正则表达式的匹配环节。而在正则表达式的替换环节，则要使用像 $1、$2、…、$n 这样的语法，例如，’bar foo’.replace(/(…) (…)/, ‘$2 $1’)。$&amp; 表示整个用于匹配的原字符串。</li>\n</ol>\n<ol start=\"9\">\n<li> <code>(?:x)</code>   ：匹配 ‘x’ 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。</li>\n</ol>\n<p>　　　例如：/(?:foo){1,2}/。如果表达式是 /foo{1,2}/，{1,2} 将只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，则 {1,2} 会应用于整个 ‘foo’ 单词。</p>\n<ol start=\"10\">\n<li>  <code>x(?=y)</code>  ：匹配 x 仅仅当 x 后面跟着 y 这种叫做先行断言。</li>\n</ol>\n<p>　　例如：/Jack(?=Sprat)/会匹配到’Jack’仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</p>\n<ol start=\"11\">\n<li> <code>(?&lt;=y)x</code>  ：匹配 x 仅当前面是 y ，这种叫做后行断言。</li>\n</ol>\n<p>　　例如：/(?&lt;=Jack)Sprat/会匹配到’ Sprat ‘仅仅当它前面是’ Jack ‘。/(?&lt;=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是’Jack’或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。</p>\n<ol start=\"12\">\n<li> <code>x(?!y)</code> ：仅仅当 x 后面不跟着 y 时匹配 x，这种为正否定查找。</li>\n</ol>\n<p>　　例如：仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’。</p>\n<ol start=\"13\">\n<li> <code>(?&lt;!y)x</code>  ：仅仅当前面不是 y 时匹配 x ，这种为反否定查找。</li>\n</ol>\n<p>　　例如：仅仅当这个数字前面没有负号的时候，/(?&lt;!-)\\d+/ 匹配一个数字。/(?&lt;!-)\\d+/.exec(‘3’) 匹配到 “3”.。/(?&lt;!-)\\d+/.exec(‘-3’) 因为这个数字前有负号，所以没有匹配到。</p>\n<ol start=\"14\">\n<li> <code>x|y</code>  ：匹配 x 或者 y。</li>\n</ol>\n<p>　　例如：/green|red/匹配“green apple”中的‘green’和“red apple”中的‘red’。</p>\n<ol start=\"15\">\n<li> <code>&#123;n&#125;</code>   ：n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。</li>\n</ol>\n<p>　　例如：/a{2}/ 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</p>\n<ol start=\"16\">\n<li> <code>&#123;n, &#125;</code>   ：n 是一个正整数，匹配前一个字符至少出现了 n 次。</li>\n</ol>\n<p>　　例如：/a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</p>\n<ol start=\"17\">\n<li> <code>&#123;n,m&#125;</code>   ：n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次。如果这个值是 0，这个值会被忽略。</li>\n</ol>\n<p>　　例如：/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</p>\n<ol start=\"18\">\n<li> <code>[xyz]</code>   ：一个字符集合。匹配方括号中的任意字符，包括转义序列。可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。</li>\n</ol>\n<p>　　例如：[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。</p>\n<ol start=\"19\">\n<li> <code>[^xyz]</code>   ：一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</li>\n</ol>\n<p>　　例如：[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的‘r’，也匹配“chop”中的‘h’。</p>\n<ol start=\"20\">\n<li> <code>[\\b]</code>  ：匹配一个退格(U+0008)。（不要和\\b混淆了。）</li>\n</ol>\n<ol start=\"21\">\n<li> <code>\\b</code>   ：匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）</li>\n</ol>\n<p>　　例如：使用”moon”举例：<br>　　　　/\\bm/匹配“moon”中的‘m’；<br>　　　　/oo\\b/并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。<br>　　　　/oon\\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。</p>\n<ol start=\"22\">\n<li> <code>\\B</code>  ：匹配一个非单词边界。匹配如下情况：（1）字符串第一个字符为非“字”字符（2）字符串最后一个字符为非“字”字符（3）两个单词字符之间（4）两个非单词字符之间（5）空字符串</li>\n</ol>\n<p>　　例如：/\\B../匹配”noonday”中的’oo’, 而/y\\B../匹配”possibly yesterday”中的’yes‘。</p>\n<ol start=\"23\">\n<li> <code>\\cX</code>  ：当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。</li>\n</ol>\n<p>　　例如：/\\cM/ 匹配字符串中的 control-M (U+000D)。</p>\n<ol start=\"24\">\n<li> <code>\\d</code>  ：匹配一个数字，等价于[0,9]。</li>\n</ol>\n<p>　　例如： /\\d/ 或者 /[0-9]/ 匹配”B2 is the suite number.”中的’2’。</p>\n<ol start=\"25\">\n<li> <code>\\D</code>  ：匹配一个非数字字符，等价于[^0,9]。</li>\n</ol>\n<p>　　例如：/\\D/ 或者 /[^0-9]/ 匹配”B2 is the suite number.”中的’B’ 。</p>\n<ol start=\"26\">\n<li> <code>\\f</code>  ：匹配一个换页符 (U+000C)。</li>\n</ol>\n<ol start=\"27\">\n<li> <code>\\n</code>  ：匹配一个换行符 (U+000A)。</li>\n</ol>\n<ol start=\"28\">\n<li> <code>\\r</code>  ：匹配一个回车符 (U+000D)。</li>\n</ol>\n<ol start=\"29\">\n<li> <code>\\s</code>  ：匹配一个空白字符，包括空格、制表符、换页符和换行符，等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</li>\n</ol>\n<p>　　例如：/\\s\\w*/ 匹配”foo bar.”中的’ bar’。</p>\n<ol start=\"30\">\n<li> <code>\\S</code>  ：匹配一个非空白字符，等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</li>\n</ol>\n<p>　　例如：/\\S\\w*/ 匹配”foo bar.”中的’foo’。</p>\n<ol start=\"31\">\n<li> <code>\\t</code>  ：匹配一个水平制表符 (U+0009)。</li>\n</ol>\n<ol start=\"32\">\n<li> <code>\\v</code>  ：匹配一个垂直制表符 (U+000B)。</li>\n</ol>\n<ol start=\"33\">\n<li> <code>\\w</code>  ：匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。</li>\n</ol>\n<p>　　例如：/\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<ol start=\"34\">\n<li> <code>\\W</code>  ：匹配一个非单词字符，等价于[^A-Za-z0-9_]。</li>\n</ol>\n<p>　　例如：/\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<ol start=\"35\">\n<li> <code>\\n</code>  ：在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</li>\n</ol>\n<ol start=\"36\">\n<li> <code>\\0</code> ： 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。</li>\n</ol>\n<ol start=\"37\">\n<li> <code>\\xhh</code>  ：匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。</li>\n</ol>\n<ol start=\"38\">\n<li> <code>\\uhhhh</code>  ：匹配一个四位十六进制数表示的 UTF-16 代码单元。</li>\n</ol>\n<ol start=\"39\">\n<li> <code>\\u&#123;hhhh&#125;</code>  或  <code>\\uhhhhh</code>  ：(仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</li>\n</ol>\n<h2 id=\"二-正则表达式标志\"><a href=\"#二-正则表达式标志\" class=\"headerlink\" title=\"二 正则表达式标志\"></a>二 正则表达式标志</h2><ol>\n<li><p> <code>g</code> ：全局搜索</p>\n</li>\n<li><p> <code>i</code> ：不区分大小写搜索</p>\n</li>\n<li><p> <code>m</code> ： 多行搜索</p>\n</li>\n<li><p> <code>s</code> ： 允许 . 匹配换行字符</p>\n</li>\n<li><p> <code>u</code> ：使用Unicode码的模式进行匹配</p>\n</li>\n<li><p><code>y</code> ： 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。</p>\n</li>\n</ol>\n<h2 id=\"三-使用括号的子字符串匹配\"><a href=\"#三-使用括号的子字符串匹配\" class=\"headerlink\" title=\"三 使用括号的子字符串匹配\"></a>三 使用括号的子字符串匹配</h2><p>一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素[1],……[n]。</p>\n<p>使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。</p>\n<p>例如：下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/(\\w+)\\s(\\w+)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;John Smith&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newstr = str.replace(re, <span class=\"string\">&quot;$2, $1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newstr);  <span class=\"comment\">// Smith, John</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-使用正则表达式的方法\"><a href=\"#四-使用正则表达式的方法\" class=\"headerlink\" title=\"四 使用正则表达式的方法\"></a>四 使用正则表达式的方法</h2><ol>\n<li> <code>exec</code> ：一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;mom and dad and baby&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = pattern.exec(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches.index); <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches.input); <span class=\"comment\">//mom and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">0</span>]);    <span class=\"comment\">//mom and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">1</span>]);    <span class=\"comment\">//and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">2</span>]);    <span class=\"comment\">//and baby</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li> <code>test</code> ：一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>;      <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( re.test(str) )&#123;   <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li> <code>match</code> ：一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</li>\n</ol>\n<p>“186a619b28”.match(/\\d+/g); // [“186”,”619”,”28”] </p>\n<ol start=\"4\">\n<li> <code>matchAll</code> ：一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</li>\n</ol>\n<ol start=\"5\">\n<li> <code>search</code> ：一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcdef&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/B/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//var re = new RegExp(&#x27;B&#x27;,&#x27;i&#x27;); 也可以这样写</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert( str.search(re) ); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"6\">\n<li> <code>replace</code> ：一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace 方法去除字符串 前 中 后 的空格：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = <span class=\"string\">&#x27;  这是  一段  测试文字  &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">val = val.trim().replace(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// 这是一段测试文字</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"7\">\n<li> <code>split</code> ：一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</li>\n</ol>\n<h2 id=\"五-常用校验方法\"><a href=\"#五-常用校验方法\" class=\"headerlink\" title=\"五 常用校验方法\"></a>五 常用校验方法</h2><ol>\n<li>金额格式校验替换</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moneyReplace</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!val) <span class=\"keyword\">return</span> val</span><br><span class=\"line\">  <span class=\"comment\">// 若第一字符是 .  则替换为 0.</span></span><br><span class=\"line\">  val = <span class=\"built_in\">String</span>(val).replace(<span class=\"regexp\">/^\\./</span>, <span class=\"string\">&quot;0.&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 保证 . 只出现一次 ， 而不能出现两次或两次以上</span></span><br><span class=\"line\">  val = val.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;$#$&quot;</span>).replace(<span class=\"regexp\">/\\./g</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;$#$&quot;</span>, <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 只能输入两个小数</span></span><br><span class=\"line\">  val = val.replace(<span class=\"regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"string\">&quot;$1.$2&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有小数点，首位不能为类似于 01、02的金额</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>((val.indexOf(<span class=\"string\">&quot;.&quot;</span>) == -<span class=\"number\">1</span>) &amp;&amp; val != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    val = <span class=\"built_in\">parseFloat</span>(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>.isNaN(<span class=\"built_in\">Number</span>(val)) ? <span class=\"string\">&#x27;0.00&#x27;</span> : val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"number\">12.345</span>) <span class=\"comment\">// 12.34</span></span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"number\">.789</span>) <span class=\"comment\">// 0.78</span></span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">// 0.00</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/moqiutao/articles/6513628.html\" >JS正则表达式详解<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一-常用正则\"><a href=\"#一-常用正则\" class=\"headerlink\" title=\"一 常用正则\"></a>一 常用正则</h2><ol>\n<li> <code>\\</code> ：将下一个字符标记为一个特殊字符、或一个原义字符、或一个 向后引用、或一个八进制转义符。</li>\n</ol>\n<p>　　例如：”\\d” 匹配数字字符，而不是匹配字母d。</p>\n<ol start=\"2\">\n<li> <code>^</code>  ：匹配输入的开始位置。如果多行标志被设置为 true，那么也匹配换行符后紧跟的位置。</li>\n</ol>\n<p>　　例如：/^A/ 并不会匹配 “an A” 中的 ‘A’，但是会匹配 “An E” 中的 ‘A’。</p>\n<ol start=\"3\">\n<li><code>$</code>  ：匹配输入的结束位置。如果多行标志被设置为 true，那么也匹配换行符前的位置。</li>\n</ol>\n<p>　　例如：/t$/ 并不会匹配 “eater” 中的 ‘t’，但是会匹配 “eat” 中的 ‘t’。</p>\n<ol start=\"4\">\n<li> <code>*</code>  ：匹配一个表达式 0 次或多次，等价于 {0, }。</li>\n</ol>\n<p>　　例如：/bo*/ 会匹配 “A ghost boooooed” 中的 ‘booooo’ 和 “A bird warbled” 中的 ‘b’，但是在 “A goat grunted” 中不会匹配任何内容。</p>\n<ol start=\"5\">\n<li><code>+</code>  ：匹配前面一个表达式 1 次或多次，等价于{1, }。</li>\n</ol>\n<p>　　例如：/a+/ 会匹配 “candy” 中的 ‘a’ 和 “caaaaaaandy” 中所有的 ‘a’，但是在 “cndy” 中不会匹配任何内容。</p>\n<ol start=\"6\">\n<li> <code>?</code>   ：匹配前面一个表达式 0 次或 1 次，等价于{0, 1}。</li>\n</ol>\n<p>　　例如：/e?le?/ 匹配 “angel” 中的 ‘el’、”angle” 中的 ‘le’ 以及 “oslo’ 中的 ‘l’。</p>\n<p>　　如果紧跟在任何量词 *、 +、? 或 {} 的后面，将会使量词变为非贪婪（匹配尽量少的字符），和缺省使用的贪婪模式（匹配尽可能多的字符）正好相反。例如，对 “123abc” 使用 /\\d+/ 将会匹配 “123”，而使用 /\\d+?/ 则只会匹配到 “1”。</p>\n<ol start=\"7\">\n<li>  <code>.</code>  ：（小数点）默认匹配换行符之外的任何单个字符。</li>\n</ol>\n<p>　　例如：/.n/ 将会匹配 “nay, an apple is on the tree” 中的 ‘an’ 和 ‘on’，但是不会匹配 ‘nay’。如果 s (“dotAll”) 标志位被设为 true，它也会匹配换行符。</p>\n<p>像下面的8-12例子( )展示的那样，它会匹配 ‘x’ 并且记住匹配项。其中括号被称为捕获括号。</p>\n<ol start=\"8\">\n<li> <code>(x)</code>   ：模式 /(foo) (bar) \\1 \\2/ 中的 ‘(foo)’ 和 ‘(bar)’ 匹配并记住字符串 “foo bar foo bar” 中前两个单词。模式中的 \\1 和 \\2 表示第一个和第二个被捕获括号匹配的子字符串，即 foo 和 bar，匹配了原字符串中的后两个单词。注意 \\1、\\2、…、\\n 是用在正则表达式的匹配环节。而在正则表达式的替换环节，则要使用像 $1、$2、…、$n 这样的语法，例如，’bar foo’.replace(/(…) (…)/, ‘$2 $1’)。$&amp; 表示整个用于匹配的原字符串。</li>\n</ol>\n<ol start=\"9\">\n<li> <code>(?:x)</code>   ：匹配 ‘x’ 但是不记住匹配项。这种括号叫作非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。</li>\n</ol>\n<p>　　　例如：/(?:foo){1,2}/。如果表达式是 /foo{1,2}/，{1,2} 将只应用于 ‘foo’ 的最后一个字符 ‘o’。如果使用非捕获括号，则 {1,2} 会应用于整个 ‘foo’ 单词。</p>\n<ol start=\"10\">\n<li>  <code>x(?=y)</code>  ：匹配 x 仅仅当 x 后面跟着 y 这种叫做先行断言。</li>\n</ol>\n<p>　　例如：/Jack(?=Sprat)/会匹配到’Jack’仅当它后面跟着’Sprat’。/Jack(?=Sprat|Frost)/匹配‘Jack’仅当它后面跟着’Sprat’或者是‘Frost’。但是‘Sprat’和‘Frost’都不是匹配结果的一部分。</p>\n<ol start=\"11\">\n<li> <code>(?&lt;=y)x</code>  ：匹配 x 仅当前面是 y ，这种叫做后行断言。</li>\n</ol>\n<p>　　例如：/(?&lt;=Jack)Sprat/会匹配到’ Sprat ‘仅仅当它前面是’ Jack ‘。/(?&lt;=Jack|Tom)Sprat/匹配‘ Sprat ’仅仅当它前面是’Jack’或者是‘Tom’。但是‘Jack’和‘Tom’都不是匹配结果的一部分。</p>\n<ol start=\"12\">\n<li> <code>x(?!y)</code> ：仅仅当 x 后面不跟着 y 时匹配 x，这种为正否定查找。</li>\n</ol>\n<p>　　例如：仅仅当这个数字后面没有跟小数点的时候，/\\d+(?!.)/ 匹配一个数字。正则表达式/\\d+(?!.)/.exec(“3.141”)匹配‘141’而不是‘3.141’。</p>\n<ol start=\"13\">\n<li> <code>(?&lt;!y)x</code>  ：仅仅当前面不是 y 时匹配 x ，这种为反否定查找。</li>\n</ol>\n<p>　　例如：仅仅当这个数字前面没有负号的时候，/(?&lt;!-)\\d+/ 匹配一个数字。/(?&lt;!-)\\d+/.exec(‘3’) 匹配到 “3”.。/(?&lt;!-)\\d+/.exec(‘-3’) 因为这个数字前有负号，所以没有匹配到。</p>\n<ol start=\"14\">\n<li> <code>x|y</code>  ：匹配 x 或者 y。</li>\n</ol>\n<p>　　例如：/green|red/匹配“green apple”中的‘green’和“red apple”中的‘red’。</p>\n<ol start=\"15\">\n<li> <code>&#123;n&#125;</code>   ：n 是一个正整数，匹配了前面一个字符刚好出现了 n 次。</li>\n</ol>\n<p>　　例如：/a{2}/ 不会匹配“candy”中的’a’,但是会匹配“caandy”中所有的 a，以及“caaandy”中的前两个’a’。</p>\n<ol start=\"16\">\n<li> <code>&#123;n, &#125;</code>   ：n 是一个正整数，匹配前一个字符至少出现了 n 次。</li>\n</ol>\n<p>　　例如：/a{2,}/ 匹配 “aa”, “aaaa” 和 “aaaaa” 但是不匹配 “a”。</p>\n<ol start=\"17\">\n<li> <code>&#123;n,m&#125;</code>   ：n 和 m 都是整数，匹配前面的字符至少 n 次，最多 m 次。如果这个值是 0，这个值会被忽略。</li>\n</ol>\n<p>　　例如：/a{1, 3}/ 并不匹配“cndy”中的任意字符，匹配“candy”中的a，匹配“caandy”中的前两个a，也匹配“caaaaaaandy”中的前三个a。注意，当匹配”caaaaaaandy“时，匹配的值是“aaa”，即使原始的字符串中有更多的a。</p>\n<ol start=\"18\">\n<li> <code>[xyz]</code>   ：一个字符集合。匹配方括号中的任意字符，包括转义序列。可以使用破折号（-）来指定一个字符范围。对于点（.）和星号（*）这样的特殊符号在一个字符集中没有特殊的意义。他们不必进行转义，不过转义也是起作用的。</li>\n</ol>\n<p>　　例如：[abcd] 和[a-d]是一样的。他们都匹配”brisket”中的‘b’,也都匹配“city”中的‘c’。/[a-z.]+/ 和/[\\w.]+/与字符串“test.i.ng”匹配。</p>\n<ol start=\"19\">\n<li> <code>[^xyz]</code>   ：一个反向字符集。也就是说， 它匹配任何没有包含在方括号中的字符。可以使用破折号（-）来指定一个字符范围。任何普通字符在这里都是起作用的。</li>\n</ol>\n<p>　　例如：[^abc] 和 [^a-c] 是一样的。他们匹配”brisket”中的‘r’，也匹配“chop”中的‘h’。</p>\n<ol start=\"20\">\n<li> <code>[\\b]</code>  ：匹配一个退格(U+0008)。（不要和\\b混淆了。）</li>\n</ol>\n<ol start=\"21\">\n<li> <code>\\b</code>   ：匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间。注意，匹配中不包括匹配的字边界。换句话说，一个匹配的词的边界的内容的长度是0。（不要和[\\b]混淆了）</li>\n</ol>\n<p>　　例如：使用”moon”举例：<br>　　　　/\\bm/匹配“moon”中的‘m’；<br>　　　　/oo\\b/并不匹配”moon”中的’oo’，因为’oo’被一个“字”字符’n’紧跟着。<br>　　　　/oon\\b/匹配”moon”中的’oon’，因为’oon’是这个字符串的结束部分。这样他没有被一个“字”字符紧跟着。</p>\n<ol start=\"22\">\n<li> <code>\\B</code>  ：匹配一个非单词边界。匹配如下情况：（1）字符串第一个字符为非“字”字符（2）字符串最后一个字符为非“字”字符（3）两个单词字符之间（4）两个非单词字符之间（5）空字符串</li>\n</ol>\n<p>　　例如：/\\B../匹配”noonday”中的’oo’, 而/y\\B../匹配”possibly yesterday”中的’yes‘。</p>\n<ol start=\"23\">\n<li> <code>\\cX</code>  ：当X是处于A到Z之间的字符的时候，匹配字符串中的一个控制符。</li>\n</ol>\n<p>　　例如：/\\cM/ 匹配字符串中的 control-M (U+000D)。</p>\n<ol start=\"24\">\n<li> <code>\\d</code>  ：匹配一个数字，等价于[0,9]。</li>\n</ol>\n<p>　　例如： /\\d/ 或者 /[0-9]/ 匹配”B2 is the suite number.”中的’2’。</p>\n<ol start=\"25\">\n<li> <code>\\D</code>  ：匹配一个非数字字符，等价于[^0,9]。</li>\n</ol>\n<p>　　例如：/\\D/ 或者 /[^0-9]/ 匹配”B2 is the suite number.”中的’B’ 。</p>\n<ol start=\"26\">\n<li> <code>\\f</code>  ：匹配一个换页符 (U+000C)。</li>\n</ol>\n<ol start=\"27\">\n<li> <code>\\n</code>  ：匹配一个换行符 (U+000A)。</li>\n</ol>\n<ol start=\"28\">\n<li> <code>\\r</code>  ：匹配一个回车符 (U+000D)。</li>\n</ol>\n<ol start=\"29\">\n<li> <code>\\s</code>  ：匹配一个空白字符，包括空格、制表符、换页符和换行符，等价于[ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</li>\n</ol>\n<p>　　例如：/\\s\\w*/ 匹配”foo bar.”中的’ bar’。</p>\n<ol start=\"30\">\n<li> <code>\\S</code>  ：匹配一个非空白字符，等价于[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u180e\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]。</li>\n</ol>\n<p>　　例如：/\\S\\w*/ 匹配”foo bar.”中的’foo’。</p>\n<ol start=\"31\">\n<li> <code>\\t</code>  ：匹配一个水平制表符 (U+0009)。</li>\n</ol>\n<ol start=\"32\">\n<li> <code>\\v</code>  ：匹配一个垂直制表符 (U+000B)。</li>\n</ol>\n<ol start=\"33\">\n<li> <code>\\w</code>  ：匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]。</li>\n</ol>\n<p>　　例如：/\\w/ 匹配 “apple,” 中的 ‘a’，”$5.28,”中的 ‘5’ 和 “3D.” 中的 ‘3’。</p>\n<ol start=\"34\">\n<li> <code>\\W</code>  ：匹配一个非单词字符，等价于[^A-Za-z0-9_]。</li>\n</ol>\n<p>　　例如：/\\W/ 或者 /[^A-Za-z0-9_]/ 匹配 “50%.” 中的 ‘%’。</p>\n<ol start=\"35\">\n<li> <code>\\n</code>  ：在正则表达式中，它返回最后的第n个子捕获匹配的子字符串(捕获的数目以左括号计数)。</li>\n</ol>\n<ol start=\"36\">\n<li> <code>\\0</code> ： 匹配 NULL（U+0000）字符， 不要在这后面跟其它小数，因为 \\0<digits> 是一个八进制转义序列。</li>\n</ol>\n<ol start=\"37\">\n<li> <code>\\xhh</code>  ：匹配一个两位十六进制数（\\x00-\\xFF）表示的字符。</li>\n</ol>\n<ol start=\"38\">\n<li> <code>\\uhhhh</code>  ：匹配一个四位十六进制数表示的 UTF-16 代码单元。</li>\n</ol>\n<ol start=\"39\">\n<li> <code>\\u&#123;hhhh&#125;</code>  或  <code>\\uhhhhh</code>  ：(仅当设置了u标志时）匹配一个十六进制数表示的 Unicode 字符。</li>\n</ol>\n<h2 id=\"二-正则表达式标志\"><a href=\"#二-正则表达式标志\" class=\"headerlink\" title=\"二 正则表达式标志\"></a>二 正则表达式标志</h2><ol>\n<li><p> <code>g</code> ：全局搜索</p>\n</li>\n<li><p> <code>i</code> ：不区分大小写搜索</p>\n</li>\n<li><p> <code>m</code> ： 多行搜索</p>\n</li>\n<li><p> <code>s</code> ： 允许 . 匹配换行字符</p>\n</li>\n<li><p> <code>u</code> ：使用Unicode码的模式进行匹配</p>\n</li>\n<li><p><code>y</code> ： 执行“粘性(sticky)”搜索,匹配从目标字符串的当前位置开始。</p>\n</li>\n</ol>\n<h2 id=\"三-使用括号的子字符串匹配\"><a href=\"#三-使用括号的子字符串匹配\" class=\"headerlink\" title=\"三 使用括号的子字符串匹配\"></a>三 使用括号的子字符串匹配</h2><p>一个正则表达式模式使用括号，将导致相应的子匹配被记住。例如，/a(b)c /可以匹配字符串“abc”，并且记得“b”。回调这些括号中匹配的子串，使用数组元素[1],……[n]。</p>\n<p>使用括号匹配的子字符串的数量是无限的。返回的数组中保存所有被发现的子匹配。下面的例子说明了如何使用括号的子字符串匹配。</p>\n<p>例如：下面的脚本使用replace()方法来转换字符串中的单词。在匹配到的替换文本中，脚本使用替代的$ 1,$ 2表示第一个和第二个括号的子字符串匹配。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/(\\w+)\\s(\\w+)/</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;John Smith&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> newstr = str.replace(re, <span class=\"string\">&quot;$2, $1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newstr);  <span class=\"comment\">// Smith, John</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四-使用正则表达式的方法\"><a href=\"#四-使用正则表达式的方法\" class=\"headerlink\" title=\"四 使用正则表达式的方法\"></a>四 使用正则表达式的方法</h2><ol>\n<li> <code>exec</code> ：一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回 null）。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> text = <span class=\"string\">&quot;mom and dad and baby&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pattern = <span class=\"regexp\">/mom( and dad( and baby)?)?/gi</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> matches = pattern.exec(text);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches.index); <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches.input); <span class=\"comment\">//mom and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">0</span>]);    <span class=\"comment\">//mom and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">1</span>]);    <span class=\"comment\">//and dad and baby</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(matches[<span class=\"number\">2</span>]);    <span class=\"comment\">//and baby</span></span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"2\">\n<li> <code>test</code> ：一个在字符串中测试是否匹配的RegExp方法，它返回 true 或 false。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;374829348791&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/\\D/</span>;      <span class=\"comment\">//  \\D代表非数字</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span>( re.test(str) )&#123;   <span class=\"comment\">// 返回true,代表在字符串中找到了非数字。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;不全是数字&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;全是数字&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol start=\"3\">\n<li> <code>match</code> ：一个在字符串中执行查找匹配的String方法，它返回一个数组，在未匹配到时会返回 null。</li>\n</ol>\n<p>“186a619b28”.match(/\\d+/g); // [“186”,”619”,”28”] </p>\n<ol start=\"4\">\n<li> <code>matchAll</code> ：一个在字符串中执行查找所有匹配的String方法，它返回一个迭代器（iterator）。</li>\n</ol>\n<ol start=\"5\">\n<li> <code>search</code> ：一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&#x27;abcdef&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> re = <span class=\"regexp\">/B/i</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//var re = new RegExp(&#x27;B&#x27;,&#x27;i&#x27;); 也可以这样写</span></span><br><span class=\"line\"></span><br><span class=\"line\">alert( str.search(re) ); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"6\">\n<li> <code>replace</code> ：一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replace 方法去除字符串 前 中 后 的空格：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = <span class=\"string\">&#x27;  这是  一段  测试文字  &#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">val = val.trim().replace(<span class=\"regexp\">/\\s/g</span>,<span class=\"string\">&quot;&quot;</span>) <span class=\"comment\">// 这是一段测试文字</span></span><br></pre></td></tr></table></figure>\n\n\n<ol start=\"7\">\n<li> <code>split</code> ：一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</li>\n</ol>\n<h2 id=\"五-常用校验方法\"><a href=\"#五-常用校验方法\" class=\"headerlink\" title=\"五 常用校验方法\"></a>五 常用校验方法</h2><ol>\n<li>金额格式校验替换</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moneyReplace</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!val) <span class=\"keyword\">return</span> val</span><br><span class=\"line\">  <span class=\"comment\">// 若第一字符是 .  则替换为 0.</span></span><br><span class=\"line\">  val = <span class=\"built_in\">String</span>(val).replace(<span class=\"regexp\">/^\\./</span>, <span class=\"string\">&quot;0.&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 保证 . 只出现一次 ， 而不能出现两次或两次以上</span></span><br><span class=\"line\">  val = val.replace(<span class=\"string\">&quot;.&quot;</span>, <span class=\"string\">&quot;$#$&quot;</span>).replace(<span class=\"regexp\">/\\./g</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;$#$&quot;</span>, <span class=\"string\">&quot;.&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 只能输入两个小数</span></span><br><span class=\"line\">  val = val.replace(<span class=\"regexp\">/^(\\d+)\\.(\\d\\d).*$/</span>, <span class=\"string\">&quot;$1.$2&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 如果没有小数点，首位不能为类似于 01、02的金额</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>((val.indexOf(<span class=\"string\">&quot;.&quot;</span>) == -<span class=\"number\">1</span>) &amp;&amp; val != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    val = <span class=\"built_in\">parseFloat</span>(val)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Number</span>.isNaN(<span class=\"built_in\">Number</span>(val)) ? <span class=\"string\">&#x27;0.00&#x27;</span> : val</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"number\">12.345</span>) <span class=\"comment\">// 12.34</span></span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"number\">.789</span>) <span class=\"comment\">// 0.78</span></span><br><span class=\"line\"></span><br><span class=\"line\">moneyReplace(<span class=\"string\">&#x27;abc&#x27;</span>) <span class=\"comment\">// 0.00</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/moqiutao/articles/6513628.html\" >JS正则表达式详解<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"JS值传递与应用传递","date":"2020-12-12T10:01:18.000Z","_content":"\nJS 有7中基本数据类型：Boolean、Null、Undefined、Number、BigInt、String、Symbol。这些基本数据类型都是通过值传递的方式。\n\n值得注意的是还有另外三种类型: Array、Function 和 Object，它们通过引用来传递。从底层技术上看，它们三都是对象。\n\n### 一、基本数据类型\n\n> 基本类型存放在栈区，访问时按值访问，赋值是按照普通方式赋值\n\n1. 如果一个基本的数据类型绑定到某个变量，我们可以认为该变量包含这个基本数据类型的值。\n\n\n```javascript\nlet x = 10;\nlet y = \"abc\";\nlet z = null;\n```\n\n2. 当我们使用 = 对这些基本数据类型进行过赋值操作时，实际上是将对应的值拷贝了一份，然后赋值给新的变量。我们把它称作值传递。\n\n\n```javascript\nlet a = 11\nlet b = 'ab'\n\nlet aa = a\nlet bb = b\n\nconsole.log(a, b, aa, bb) // 11, ab, 11, ab\n```\n\n3. a 和 aa 都包含 11， 并且他们是相互独立的拷贝，互不干涉，如果我们将 a 的值改变，aa 不会受到影响。\n\n\n```javascript\na = 1111\nconsole.log(a, aa) // 1111, 11\n\nb = 'abcd'\nconsole.log(b, bb) // abcd, ab\n```\n\n\n### 二、引用数据类型\n\n> 引用类型指的是对象。可以拥有属性和方法，并且我们可以修改其属性和方法。引用对象存放的方式是：在栈中存放对象变量标示名称和该对象在堆中的存放地址，在堆中存放数据。\n\n> 对象使用的是引用赋值。当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在堆中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n\n\n如果一个变量绑定到一个非基本数据类型(Array, Function, Object)，那么它只记录了一个内存地址，该地址存放了具体的数据。注意之前提到指向基本数据类型的变量相当于包含了数据，而现在指向非基本数据类型的变量本身是不包含数据的。\n\n\n1. 对象在内存中被创建，当我们声明 arr = []，我们在内存中创建了一个数组。arr 记录的是该内存的地址\n\n\n```javascript\nlet arr = [1, 2, 3]\n```\n当执行完之后，内存中创建了一个空的数组对象，其内存地址为 #001 ，arr指向该地址\n\n\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3]\n\n2. 对象是通过引用传递，而不是值传递。也就是说，变量赋值只会将地址传递过去\n\n\n```javascript\nlet arr2 = arr\nconsole.log(arr, arr2) // [1, 2, 3], [1, 2, 3]\n```\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3]\narr2 | #001 | (↑)\n\n3. arr 和 arr2 指向同一个数组。 如果我们更新 arr，arr2 也会受到影响\n\n\n```javascript\narr.push(4)\nconsole.log(arr, arr2) // [1, 2, 3, 4], [1, 2, 3, 4]\n```\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3, 4]\narr2 | #001 | (↑)\n\n4. 引用重新赋值：如果我们将一个已经赋值的变量重新赋值，那么它将包含新的数据或则引用地址。如果原来的对象内容没有任何变量去引用，JS就会释放掉原来的对象内存。\n\n\n```javascript\nlet obj = {a: 1}\nconsole.log(obj) // {a: 1}\n```\n\n变量 | 地址 | 对象\n---|---|---\nobj | #0001 | {a: 1}\n\n\n```javascript\nobj = {a: 1, b: 2}\nconsole.log(obj) // {a: 1, b: 2}\n```\n\n变量 | 地址 | 对象\n---|---|---\n(空)| #0001 | {a: 1}\nobj | #0002 | {a: 1, b: 2}\n\n\n### 三、== 和 ===\n\n1. 对于引用类型的变量，== 和 === 只会判断引用的地址是否相同，而不会判断对象具体里属性以及值是否相同。因此，如果两个变量指向相同的对象，则返回 true\n\n```javascript\nlet aa = [1, 2]\nlet bb = aa\n\nconsole.log(aa === bb) // true\n```\n\n变量 | 地址 | 对象\n---|---|---\naa | #001 | [1, 2]\nbb | #001 |  (↑)\n\n2. 如果是不同的对象，即使包含相同的属性和值，也会返回 false\n\n\n```javascript\nlet aa = [1, 2]\nlet bb = [1, 2]\n\nconsole.log(aa === bb) // false\n```\n\n变量 | 地址 | 对象\n---|---|---\naa | #001 | [1, 2]\nbb | #002 | [1, 2]\n\n3. 如果想判断两个不同的对象是否真的相同，一个简单的方法就是将它们转换为字符串然后判断(不完美)\n\n\n```javascript\nlet str = JSON.stringify(aa)\nlet str2 = JSON.stringify(bb)\n\nconsole.log(str === str2) // true\n```\n\n### 四、函数参数传递\n\n1. js 的函数参数传递为值传递。当传入的是 基本类型的参数时：就是复制了份内容给 i 而已，i 与 age 之间没有关系\n\n\n```javascript\nfunction setAge(i) {\n    alert(i); // 24\n    i = 18;\n    alert(i);//18,i的改变不会影响外面的age\n};\n \nlet age = 24;\nsetAge(age);\nalert(age); // 24\n```\n\n2. 当传入的参数为引用类型时。传进去的是个地址。\n\n\n```javascript\nfunction setName(obj) {\n    obj.name = 'haha';\n};\n \nlet obj2 = new Object();\nsetName(obj2);\nalert(obj2.name);    // haha\n```\n\n\n### 五、相关面试题\n\n> 阿里2014年的笔试题\n\n```javascript\nlet a = 1\n\nlet obj = {\n    b: 2\n}\n\nlet fn = function () {}\nfn.c = 3\n \nfunction test(x, y, z) {\n    x = 4\n    y.b = 5\n    z.c = 6\n    return z\n}\ntest(a, obj, fn)\n\nalert(a + obj.b + fn.c) // 12\n```\n\n首先test传递进去的实参中，a是基本类型（，复制了一份值），obj是object（指向地址，你动我也动），fn也当然不是基本类型啦。在执行test的时候，x被赋值为4(跟a没关系，各玩各的，a仍然为1)，y的b被赋值为5，那obj的b也变为5，z的c变为6，那fn的c当然也会是6. 所以alert的结果应该是1+5+6 =12. （其实test不返回z也一样，z仍然改变的）。\n\n\n\n> [JS 的引用赋值与传值赋值](https://www.cnblogs.com/cench/p/6019453.html)  \n[JavaScript的值传递和引用传递](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n\n\n\n","source":"_posts/JS值传递与应用传递.md","raw":"---\ntitle: JS值传递与应用传递\ndate: 2020-12-12 18:01:18\ntags: 值与引用传递\ncategories: JavaScript\n---\n\nJS 有7中基本数据类型：Boolean、Null、Undefined、Number、BigInt、String、Symbol。这些基本数据类型都是通过值传递的方式。\n\n值得注意的是还有另外三种类型: Array、Function 和 Object，它们通过引用来传递。从底层技术上看，它们三都是对象。\n\n### 一、基本数据类型\n\n> 基本类型存放在栈区，访问时按值访问，赋值是按照普通方式赋值\n\n1. 如果一个基本的数据类型绑定到某个变量，我们可以认为该变量包含这个基本数据类型的值。\n\n\n```javascript\nlet x = 10;\nlet y = \"abc\";\nlet z = null;\n```\n\n2. 当我们使用 = 对这些基本数据类型进行过赋值操作时，实际上是将对应的值拷贝了一份，然后赋值给新的变量。我们把它称作值传递。\n\n\n```javascript\nlet a = 11\nlet b = 'ab'\n\nlet aa = a\nlet bb = b\n\nconsole.log(a, b, aa, bb) // 11, ab, 11, ab\n```\n\n3. a 和 aa 都包含 11， 并且他们是相互独立的拷贝，互不干涉，如果我们将 a 的值改变，aa 不会受到影响。\n\n\n```javascript\na = 1111\nconsole.log(a, aa) // 1111, 11\n\nb = 'abcd'\nconsole.log(b, bb) // abcd, ab\n```\n\n\n### 二、引用数据类型\n\n> 引用类型指的是对象。可以拥有属性和方法，并且我们可以修改其属性和方法。引用对象存放的方式是：在栈中存放对象变量标示名称和该对象在堆中的存放地址，在堆中存放数据。\n\n> 对象使用的是引用赋值。当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在堆中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。\n\n\n如果一个变量绑定到一个非基本数据类型(Array, Function, Object)，那么它只记录了一个内存地址，该地址存放了具体的数据。注意之前提到指向基本数据类型的变量相当于包含了数据，而现在指向非基本数据类型的变量本身是不包含数据的。\n\n\n1. 对象在内存中被创建，当我们声明 arr = []，我们在内存中创建了一个数组。arr 记录的是该内存的地址\n\n\n```javascript\nlet arr = [1, 2, 3]\n```\n当执行完之后，内存中创建了一个空的数组对象，其内存地址为 #001 ，arr指向该地址\n\n\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3]\n\n2. 对象是通过引用传递，而不是值传递。也就是说，变量赋值只会将地址传递过去\n\n\n```javascript\nlet arr2 = arr\nconsole.log(arr, arr2) // [1, 2, 3], [1, 2, 3]\n```\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3]\narr2 | #001 | (↑)\n\n3. arr 和 arr2 指向同一个数组。 如果我们更新 arr，arr2 也会受到影响\n\n\n```javascript\narr.push(4)\nconsole.log(arr, arr2) // [1, 2, 3, 4], [1, 2, 3, 4]\n```\n\n变量 | 地址 | 对象\n---|---|---\narr | #001 | [1, 2, 3, 4]\narr2 | #001 | (↑)\n\n4. 引用重新赋值：如果我们将一个已经赋值的变量重新赋值，那么它将包含新的数据或则引用地址。如果原来的对象内容没有任何变量去引用，JS就会释放掉原来的对象内存。\n\n\n```javascript\nlet obj = {a: 1}\nconsole.log(obj) // {a: 1}\n```\n\n变量 | 地址 | 对象\n---|---|---\nobj | #0001 | {a: 1}\n\n\n```javascript\nobj = {a: 1, b: 2}\nconsole.log(obj) // {a: 1, b: 2}\n```\n\n变量 | 地址 | 对象\n---|---|---\n(空)| #0001 | {a: 1}\nobj | #0002 | {a: 1, b: 2}\n\n\n### 三、== 和 ===\n\n1. 对于引用类型的变量，== 和 === 只会判断引用的地址是否相同，而不会判断对象具体里属性以及值是否相同。因此，如果两个变量指向相同的对象，则返回 true\n\n```javascript\nlet aa = [1, 2]\nlet bb = aa\n\nconsole.log(aa === bb) // true\n```\n\n变量 | 地址 | 对象\n---|---|---\naa | #001 | [1, 2]\nbb | #001 |  (↑)\n\n2. 如果是不同的对象，即使包含相同的属性和值，也会返回 false\n\n\n```javascript\nlet aa = [1, 2]\nlet bb = [1, 2]\n\nconsole.log(aa === bb) // false\n```\n\n变量 | 地址 | 对象\n---|---|---\naa | #001 | [1, 2]\nbb | #002 | [1, 2]\n\n3. 如果想判断两个不同的对象是否真的相同，一个简单的方法就是将它们转换为字符串然后判断(不完美)\n\n\n```javascript\nlet str = JSON.stringify(aa)\nlet str2 = JSON.stringify(bb)\n\nconsole.log(str === str2) // true\n```\n\n### 四、函数参数传递\n\n1. js 的函数参数传递为值传递。当传入的是 基本类型的参数时：就是复制了份内容给 i 而已，i 与 age 之间没有关系\n\n\n```javascript\nfunction setAge(i) {\n    alert(i); // 24\n    i = 18;\n    alert(i);//18,i的改变不会影响外面的age\n};\n \nlet age = 24;\nsetAge(age);\nalert(age); // 24\n```\n\n2. 当传入的参数为引用类型时。传进去的是个地址。\n\n\n```javascript\nfunction setName(obj) {\n    obj.name = 'haha';\n};\n \nlet obj2 = new Object();\nsetName(obj2);\nalert(obj2.name);    // haha\n```\n\n\n### 五、相关面试题\n\n> 阿里2014年的笔试题\n\n```javascript\nlet a = 1\n\nlet obj = {\n    b: 2\n}\n\nlet fn = function () {}\nfn.c = 3\n \nfunction test(x, y, z) {\n    x = 4\n    y.b = 5\n    z.c = 6\n    return z\n}\ntest(a, obj, fn)\n\nalert(a + obj.b + fn.c) // 12\n```\n\n首先test传递进去的实参中，a是基本类型（，复制了一份值），obj是object（指向地址，你动我也动），fn也当然不是基本类型啦。在执行test的时候，x被赋值为4(跟a没关系，各玩各的，a仍然为1)，y的b被赋值为5，那obj的b也变为5，z的c变为6，那fn的c当然也会是6. 所以alert的结果应该是1+5+6 =12. （其实test不返回z也一样，z仍然改变的）。\n\n\n\n> [JS 的引用赋值与传值赋值](https://www.cnblogs.com/cench/p/6019453.html)  \n[JavaScript的值传递和引用传递](https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/)\n\n\n\n","slug":"JS值传递与应用传递","published":1,"updated":"2020-12-12T10:03:44.721Z","_id":"ckilj6q7o00006gqc3kd7c0v8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>JS 有7中基本数据类型：Boolean、Null、Undefined、Number、BigInt、String、Symbol。这些基本数据类型都是通过值传递的方式。</p>\n<p>值得注意的是还有另外三种类型: Array、Function 和 Object，它们通过引用来传递。从底层技术上看，它们三都是对象。</p>\n<h3 id=\"一、基本数据类型\"><a href=\"#一、基本数据类型\" class=\"headerlink\" title=\"一、基本数据类型\"></a>一、基本数据类型</h3><blockquote>\n<p>基本类型存放在栈区，访问时按值访问，赋值是按照普通方式赋值</p>\n</blockquote>\n<ol>\n<li>如果一个基本的数据类型绑定到某个变量，我们可以认为该变量包含这个基本数据类型的值。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> z = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>当我们使用 = 对这些基本数据类型进行过赋值操作时，实际上是将对应的值拷贝了一份，然后赋值给新的变量。我们把它称作值传递。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;ab&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aa = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, aa, bb) <span class=\"comment\">// 11, ab, 11, ab</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>a 和 aa 都包含 11， 并且他们是相互独立的拷贝，互不干涉，如果我们将 a 的值改变，aa 不会受到影响。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1111</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, aa) <span class=\"comment\">// 1111, 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"string\">&#x27;abcd&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b, bb) <span class=\"comment\">// abcd, ab</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、引用数据类型\"><a href=\"#二、引用数据类型\" class=\"headerlink\" title=\"二、引用数据类型\"></a>二、引用数据类型</h3><blockquote>\n<p>引用类型指的是对象。可以拥有属性和方法，并且我们可以修改其属性和方法。引用对象存放的方式是：在栈中存放对象变量标示名称和该对象在堆中的存放地址，在堆中存放数据。</p>\n</blockquote>\n<blockquote>\n<p>对象使用的是引用赋值。当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在堆中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p>\n</blockquote>\n<p>如果一个变量绑定到一个非基本数据类型(Array, Function, Object)，那么它只记录了一个内存地址，该地址存放了具体的数据。注意之前提到指向基本数据类型的变量相当于包含了数据，而现在指向非基本数据类型的变量本身是不包含数据的。</p>\n<ol>\n<li>对象在内存中被创建，当我们声明 arr = []，我们在内存中创建了一个数组。arr 记录的是该内存的地址</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>当执行完之后，内存中创建了一个空的数组对象，其内存地址为 #001 ，arr指向该地址</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3]</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>对象是通过引用传递，而不是值传递。也就是说，变量赋值只会将地址传递过去</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr2) <span class=\"comment\">// [1, 2, 3], [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3]</td>\n</tr>\n<tr>\n<td>arr2</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>arr 和 arr2 指向同一个数组。 如果我们更新 arr，arr2 也会受到影响</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr2) <span class=\"comment\">// [1, 2, 3, 4], [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>arr2</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>引用重新赋值：如果我们将一个已经赋值的变量重新赋值，那么它将包含新的数据或则引用地址。如果原来的对象内容没有任何变量去引用，JS就会释放掉原来的对象内存。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>obj</td>\n<td>#0001</td>\n<td>{a: 1}</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(空)</td>\n<td>#0001</td>\n<td>{a: 1}</td>\n</tr>\n<tr>\n<td>obj</td>\n<td>#0002</td>\n<td>{a: 1, b: 2}</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、-和\"><a href=\"#三、-和\" class=\"headerlink\" title=\"三、== 和 ===\"></a>三、== 和 ===</h3><ol>\n<li>对于引用类型的变量，== 和 === 只会判断引用的地址是否相同，而不会判断对象具体里属性以及值是否相同。因此，如果两个变量指向相同的对象，则返回 true</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aa = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = aa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa === bb) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>aa</td>\n<td>#001</td>\n<td>[1, 2]</td>\n</tr>\n<tr>\n<td>bb</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>如果是不同的对象，即使包含相同的属性和值，也会返回 false</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aa = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa === bb) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>aa</td>\n<td>#001</td>\n<td>[1, 2]</td>\n</tr>\n<tr>\n<td>bb</td>\n<td>#002</td>\n<td>[1, 2]</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>如果想判断两个不同的对象是否真的相同，一个简单的方法就是将它们转换为字符串然后判断(不完美)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(aa)</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = <span class=\"built_in\">JSON</span>.stringify(bb)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str === str2) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、函数参数传递\"><a href=\"#四、函数参数传递\" class=\"headerlink\" title=\"四、函数参数传递\"></a>四、函数参数传递</h3><ol>\n<li>js 的函数参数传递为值传递。当传入的是 基本类型的参数时：就是复制了份内容给 i 而已，i 与 age 之间没有关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setAge</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    alert(i); <span class=\"comment\">// 24</span></span><br><span class=\"line\">    i = <span class=\"number\">18</span>;</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//18,i的改变不会影响外面的age</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\">setAge(age);</span><br><span class=\"line\">alert(age); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>当传入的参数为引用类型时。传进去的是个地址。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    obj.name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">setName(obj2);</span><br><span class=\"line\">alert(obj2.name);    <span class=\"comment\">// haha</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"五、相关面试题\"><a href=\"#五、相关面试题\" class=\"headerlink\" title=\"五、相关面试题\"></a>五、相关面试题</h3><blockquote>\n<p>阿里2014年的笔试题</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fn.c = <span class=\"number\">3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">    x = <span class=\"number\">4</span></span><br><span class=\"line\">    y.b = <span class=\"number\">5</span></span><br><span class=\"line\">    z.c = <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(a, obj, fn)</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a + obj.b + fn.c) <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>首先test传递进去的实参中，a是基本类型（，复制了一份值），obj是object（指向地址，你动我也动），fn也当然不是基本类型啦。在执行test的时候，x被赋值为4(跟a没关系，各玩各的，a仍然为1)，y的b被赋值为5，那obj的b也变为5，z的c变为6，那fn的c当然也会是6. 所以alert的结果应该是1+5+6 =12. （其实test不返回z也一样，z仍然改变的）。</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/cench/p/6019453.html\" >JS 的引用赋值与传值赋值<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" >JavaScript的值传递和引用传递<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>JS 有7中基本数据类型：Boolean、Null、Undefined、Number、BigInt、String、Symbol。这些基本数据类型都是通过值传递的方式。</p>\n<p>值得注意的是还有另外三种类型: Array、Function 和 Object，它们通过引用来传递。从底层技术上看，它们三都是对象。</p>\n<h3 id=\"一、基本数据类型\"><a href=\"#一、基本数据类型\" class=\"headerlink\" title=\"一、基本数据类型\"></a>一、基本数据类型</h3><blockquote>\n<p>基本类型存放在栈区，访问时按值访问，赋值是按照普通方式赋值</p>\n</blockquote>\n<ol>\n<li>如果一个基本的数据类型绑定到某个变量，我们可以认为该变量包含这个基本数据类型的值。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> z = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>当我们使用 = 对这些基本数据类型进行过赋值操作时，实际上是将对应的值拷贝了一份，然后赋值给新的变量。我们把它称作值传递。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"string\">&#x27;ab&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> aa = a</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, b, aa, bb) <span class=\"comment\">// 11, ab, 11, ab</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>a 和 aa 都包含 11， 并且他们是相互独立的拷贝，互不干涉，如果我们将 a 的值改变，aa 不会受到影响。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1111</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a, aa) <span class=\"comment\">// 1111, 11</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"string\">&#x27;abcd&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b, bb) <span class=\"comment\">// abcd, ab</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"二、引用数据类型\"><a href=\"#二、引用数据类型\" class=\"headerlink\" title=\"二、引用数据类型\"></a>二、引用数据类型</h3><blockquote>\n<p>引用类型指的是对象。可以拥有属性和方法，并且我们可以修改其属性和方法。引用对象存放的方式是：在栈中存放对象变量标示名称和该对象在堆中的存放地址，在堆中存放数据。</p>\n</blockquote>\n<blockquote>\n<p>对象使用的是引用赋值。当我们把一个对象赋值给一个新的变量时，赋的其实是该对象的在堆中的地址，而不是堆中的数据。也就是两个对象指向的是同一个存储空间，无论哪个对象发生改变，其实都是改变的存储空间的内容，因此，两个对象是联动的。</p>\n</blockquote>\n<p>如果一个变量绑定到一个非基本数据类型(Array, Function, Object)，那么它只记录了一个内存地址，该地址存放了具体的数据。注意之前提到指向基本数据类型的变量相当于包含了数据，而现在指向非基本数据类型的变量本身是不包含数据的。</p>\n<ol>\n<li>对象在内存中被创建，当我们声明 arr = []，我们在内存中创建了一个数组。arr 记录的是该内存的地址</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>当执行完之后，内存中创建了一个空的数组对象，其内存地址为 #001 ，arr指向该地址</p>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3]</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>对象是通过引用传递，而不是值传递。也就是说，变量赋值只会将地址传递过去</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr2 = arr</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr2) <span class=\"comment\">// [1, 2, 3], [1, 2, 3]</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3]</td>\n</tr>\n<tr>\n<td>arr2</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>arr 和 arr2 指向同一个数组。 如果我们更新 arr，arr2 也会受到影响</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.push(<span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr, arr2) <span class=\"comment\">// [1, 2, 3, 4], [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>arr</td>\n<td>#001</td>\n<td>[1, 2, 3, 4]</td>\n</tr>\n<tr>\n<td>arr2</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"4\">\n<li>引用重新赋值：如果我们将一个已经赋值的变量重新赋值，那么它将包含新的数据或则引用地址。如果原来的对象内容没有任何变量去引用，JS就会释放掉原来的对象内存。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>obj</td>\n<td>#0001</td>\n<td>{a: 1}</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj) <span class=\"comment\">// &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>(空)</td>\n<td>#0001</td>\n<td>{a: 1}</td>\n</tr>\n<tr>\n<td>obj</td>\n<td>#0002</td>\n<td>{a: 1, b: 2}</td>\n</tr>\n</tbody></table>\n<h3 id=\"三、-和\"><a href=\"#三、-和\" class=\"headerlink\" title=\"三、== 和 ===\"></a>三、== 和 ===</h3><ol>\n<li>对于引用类型的变量，== 和 === 只会判断引用的地址是否相同，而不会判断对象具体里属性以及值是否相同。因此，如果两个变量指向相同的对象，则返回 true</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aa = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = aa</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa === bb) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>aa</td>\n<td>#001</td>\n<td>[1, 2]</td>\n</tr>\n<tr>\n<td>bb</td>\n<td>#001</td>\n<td>(↑)</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>如果是不同的对象，即使包含相同的属性和值，也会返回 false</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> aa = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> bb = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(aa === bb) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>地址</th>\n<th>对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>aa</td>\n<td>#001</td>\n<td>[1, 2]</td>\n</tr>\n<tr>\n<td>bb</td>\n<td>#002</td>\n<td>[1, 2]</td>\n</tr>\n</tbody></table>\n<ol start=\"3\">\n<li>如果想判断两个不同的对象是否真的相同，一个简单的方法就是将它们转换为字符串然后判断(不完美)</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"built_in\">JSON</span>.stringify(aa)</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = <span class=\"built_in\">JSON</span>.stringify(bb)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str === str2) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、函数参数传递\"><a href=\"#四、函数参数传递\" class=\"headerlink\" title=\"四、函数参数传递\"></a>四、函数参数传递</h3><ol>\n<li>js 的函数参数传递为值传递。当传入的是 基本类型的参数时：就是复制了份内容给 i 而已，i 与 age 之间没有关系</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setAge</span>(<span class=\"params\">i</span>) </span>&#123;</span><br><span class=\"line\">    alert(i); <span class=\"comment\">// 24</span></span><br><span class=\"line\">    i = <span class=\"number\">18</span>;</span><br><span class=\"line\">    alert(i);<span class=\"comment\">//18,i的改变不会影响外面的age</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">24</span>;</span><br><span class=\"line\">setAge(age);</span><br><span class=\"line\">alert(age); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>当传入的参数为引用类型时。传进去的是个地址。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setName</span>(<span class=\"params\">obj</span>) </span>&#123;</span><br><span class=\"line\">    obj.name = <span class=\"string\">&#x27;haha&#x27;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">let</span> obj2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">setName(obj2);</span><br><span class=\"line\">alert(obj2.name);    <span class=\"comment\">// haha</span></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"五、相关面试题\"><a href=\"#五、相关面试题\" class=\"headerlink\" title=\"五、相关面试题\"></a>五、相关面试题</h3><blockquote>\n<p>阿里2014年的笔试题</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">    b: <span class=\"number\">2</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> fn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">fn.c = <span class=\"number\">3</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">    x = <span class=\"number\">4</span></span><br><span class=\"line\">    y.b = <span class=\"number\">5</span></span><br><span class=\"line\">    z.c = <span class=\"number\">6</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(a, obj, fn)</span><br><span class=\"line\"></span><br><span class=\"line\">alert(a + obj.b + fn.c) <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<p>首先test传递进去的实参中，a是基本类型（，复制了一份值），obj是object（指向地址，你动我也动），fn也当然不是基本类型啦。在执行test的时候，x被赋值为4(跟a没关系，各玩各的，a仍然为1)，y的b被赋值为5，那obj的b也变为5，z的c变为6，那fn的c当然也会是6. 所以alert的结果应该是1+5+6 =12. （其实test不返回z也一样，z仍然改变的）。</p>\n<blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/cench/p/6019453.html\" >JS 的引用赋值与传值赋值<i class=\"fas fa-external-link-alt\"></i></a><br><a class=\"link\"   href=\"https://blog.fundebug.com/2017/08/09/explain_value_reference_in_js/\" >JavaScript的值传递和引用传递<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n"},{"title":"JS面向对象与prototype，__proto__，constructor","date":"2020-12-12T10:08:08.000Z","_content":"\n\n## 一、Java中的面向对象与继承\n\n1. 下面代码中，我们定义了一个小狗类，在类中定义了一个属性和两个方法，一个构造方法用于初始化小狗的年龄 age，一个公有方法 say 用于打印。\n\n```javascript\npublic class Puppy{\n    int puppyAge;\n    \n    public Puppy(age){\n      puppyAge = age;\n    }\n    \n    public void say() {\n      System.out.println(\"汪汪汪\"); \n    }\n}\n```\n<br>\n\n2. 这是一个通用的类，当我们需要一个两岁的小狗的实例是这样写的，这个实例同时具有父类的方法。\n\n```javascript\nPuppy myPuppy = new Puppy(2);\nmuPuppy.say(); // 汪汪汪\n```\n<br>\n\n3. 以上的类和实例的实现均基于 java 的语法来的，但是相比于相对完善的 java 语法来说，早期的 js 没有 class 关键字啊（以下说 js 没有 class 关键字都是指 ES6 之前的 js ，主要帮助大家理解概念）。JS为了支持面向对象，使用了一种比较曲折的方式，具体如下。\n\n## 二、JS中的面向对象与继承\n\n\n1. **没有 class，用函数代替** ：早期的 js 没有 class 关键字，是怎么办的呢？对，是用函数来代替，函数不仅能执行普通功能，还能当 class 使用，栗子如下。\n\n```javascript\nfunction Puppy() {}\n```\n<br>\n\n2. 以上代码实现了一个函数。下面我们就可以生成以上函数的实例了。\n\n> 构造函数本身就是一个函数，与普通函数没有任何区别，不过为了规范一般将其首字母大写。构造函数和普通函数的区别在于，使用 new 生成实例的函数就是构造函数，直接调用的就是普通函数。\n\n```javascript\nlet myPuppy = new Puppy()\n```\n<br>\n\n3. **函数本身就是构造函数** ：虽然我们有了小狗的实例，但是不像 java 语法似的可以在类中定义构造函数来不能设置小狗的年龄啊。不慌，其实，充当类使用的函数本身就是构造函数，而且它就是默认的构造函数，下面我们重写以上代码，让构造函数接收函数来初始化小狗的年龄 age 。\n\n```javascript\n// 构造函数：可接收参数来初始化属性值\nfunction Puppy(age) {\n  this.puppyAge = age\n}\n\n// 实例化时可以传年龄参数了\nlet myPuppy = new Puppy(2)\n```\n<br>\n\n4. **构造函数中的 this 指向实例化对象** ：构造函数中的 this 指向需要注意：被作为类使用的函数里面 this 总是指向实例化对象，也就是 myPuppy 。这么设计的目的就是让使用者可以通过构造函数给实例对象设置属性，这时候打印出来看 myPuppy.puppyAge 就是 2 。\n\n```javascript\nconsole.log(myPuppy.puppyAge)   // 2\n```\n<br>\n\n5. **prototype 上定义实例方法** ：以上 4 点，我们实现了构造函数定义以及实例化。java 语法可以直接在类中定义公共方法来让实例小狗汪汪汪，js 如何办呢？对此，js 给出的解决方案是给构造方法添加一个 `prototype` 属性，挂载在这上面的方法，实例化时就会给到实例对象。\n\n```javascript\n// 在构造函数的 prototype 上添加方法\nPuppy.prototype.say = function() {\n  console.log(\"汪汪汪\")\n}\n\n// 实例对象调用相应方法\nmyPuppy.say()    // 汪汪汪\n```\n<br>\n\n6. **实例方法的查找用 proto** ：以上可能有的同学就会有疑问了，方法在构造函数的 `prototype` 上，实例对象 myPuppy 怎么会找到 say 方法了呢？我们来打印 myPuppy 。\n\n（1）当你访问一个对象上没有的属性时，比如 myPuppy.say，对象会去 `__proto__` 查找。 `__proto__` 的值就等于父类的 prototype , `myPuppy.__proto__` 指向了 Puppy.prototype。\n\n![实例方法的查找](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143617741-537961056.png)\n\n（2）如果你访问的属性在 `Puppy.prototype` 也不存在，那又会继续往 `Puppy.prototype.__proto__` 上找，这时候其实就找到了 `Object.prototype` 了，`Object.prototype` 再往上找就没有了，也就是 null，这其实就是 `原型链`。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143646241-1354675868.png)\n\n<br>\n\n7. **constructor** ：\n\n（1）每个实例都有一个 constructor（构造函数）属性，该属性指向对象本身。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143656225-984188307.png)\n\n（2）prototype.constructor 是 prototype 上的一个保留属性，这个属性就指向类函数本身，用于指示当前类的构造函数。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143703547-376698011.png)\n\n（3）既然 prototype.constructor 是指向构造函数的一个指针，那我们是不是可以通过它来修改构造函数呢？我们来试试就知道了。我们先修改下这个函数，然后新建一个实例看看效果\n\n```javascript\nfunction Puppy(age) {\n  this.puppyAge = age;\n}\n\nPuppy.prototype.constructor = function myConstructor(age) {\n  this.puppyAge2 = age + 1;\n}\n\nconst myPuppy2 = new Puppy(2);\nconsole.log(myPuppy2.puppyAge);    // 2\n```\n上例说明，我们修改 `prototype.constructor` 只是修改了这个指针而已，并没有修改真正的构造函数。\n\n（4）上面我们其实已经说清楚了 `prototype`，`__proto__`，`constructor` 几者之间的关系，下面画一张图来更直观的看下\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143713505-1807018330.png)\n\n<br>\n\n8. **静态方法** ：我们知道很多面向对象有静态方法这个概念，比如 java 直接是加一个 static 关键字就能将一个方法定义为静态方法。js  中定义一个静态方法更简单，直接将它作为类函数的属性就行。\n\n```javascript\n// 在构造函数上定义静态方法 statciFunc\nPuppy.statciFunc = function() {\n  console.log('我是静态方法，this拿不到实例对象')\n}      \n\n// 直接通过类名调用\nPuppy.statciFunc(); \n```\n\n<br>\n\n9. **继承**：面向对象怎么能没有继承呢，根据前面所讲的知识，我们其实已经能够自己写一个继承了。所谓继承不就是子类能够继承父类的属性和方法吗？换句话说就是子类能够找到父类的 `prototype` ，最简单的方法就是子类原型的 `__proto__` 指向父类原型就行了。\n\n（1）以下继承方法只是让 Child 访问到了 Parent 原型链，但是没有执行 Parent 的构造函数\n\n```javascript\nfunction Parent() {}\nfunction Child() {}\n\nChild.prototype.__proto__ = Parent.prototype;\n\nconst obj = new Child();\nconsole.log(obj instanceof Child );   // true\nconsole.log(obj instanceof Parent );   // true\n```\n\n（2）为了解决上述问题，我们不能单纯的修改 `Child.prototype.__proto__` 指向，还需要用 new 执行下 Parent 的构造函数。\n\n```javascript\nfunction Parent() {\n  this.parentAge = 50;\n}\nfunction Child() {}\n\nChild.prototype.__proto__ = new Parent();\n\nconst obj = new Child();\nconsole.log(obj.parentAge);    // 50\n```\n（3）上述方法会多一个 `__proto__` 层级，可以换成修改 `Child.prototype` 的指向来解决，注意将 `Child.prototype.constructor` 重置回来。\n\n```javascript\nfunction Parent() {\n  this.parentAge = 50;\n}\nfunction Child() {}\n\nChild.prototype = new Parent();\n// 注意重置constructor\nChild.prototype.constructor = Child;\n\nconst obj = new Child();\nconsole.log(obj.parentAge);   // 50\n```\n<br>\n\n10. **自己实现一个new**：结合上面讲的，我们知道 new 其实就是生成了一个对象，这个对象能够访问类的原型，知道了原理，我们就可以自己实现一个 new 了。\n\n```javascript\nfunction myNew(func, ...args) {\n    // 新建一个空对象\n  const obj = {};     \n  // 执行构造函数\n  func.call(obj, ...args);  \n  // 设置原型链\n  obj.__proto__ = func.prototype;    \n\n  return obj;\n}\n\nfunction Puppy(age) {\n  this.puppyAge = age;\n}\n\nPuppy.prototype.say = function() {\n  console.log(\"汪汪汪\");\n}\n\nconst myPuppy3 = myNew(Puppy, 2);\n\nconsole.log(myPuppy3.puppyAge);  // 2\nconsole.log(myPuppy3.say());     // 汪汪汪\n```\n\n<br>\n\n11. **自己实现一个 instanceof**：知道了原理，其实我们也知道了 instanceof 是干啥的。instanceof 不就是检查一个对象是不是某个类的实例吗？换句话说就是检查一个对象的的原型链上有没有这个类的 prototype ，知道了这个我们就可以自己实现一个了\n\n```javascript\nfunction myInstanceof(targetObj, targetClass) {\n  // 参数检查\n  if(!targetObj || !targetClass || !targetObj.__proto__ || !targetClass.prototype){\n    return false;\n  }\n\n  let current = targetObj;\n\n  while(current) {   // 一直往原型链上面找\n    if(current.__proto__ === targetClass.prototype) {\n      return true;    // 找到了返回true\n    }\n\n    current = current.__proto__;\n  }\n\n  return false;     // 没找到返回false\n}\n\n// 用我们前面的继承实验下\nfunction Parent() {}\nfunction Child() {}\n\nChild.prototype.__proto__ = Parent.prototype;\n\nconst obj = new Child();\nconsole.log(myInstanceof(obj, Child) );   // true\nconsole.log(myInstanceof(obj, Parent) );   // true\nconsole.log(myInstanceof({}, Parent) );   // false\n```\n\n<br>\n\n## 三、ES6的 class\n\nES6 的 class 就是前面说的函数类的语法糖，比如我们的 Puppy 用 ES6 的 class 写就是这样\n\n```javascript\nclass Puppy {\n  // 构造函数\n  constructor(age) {            \n    this.puppyAge = age;\n  }\n\n  // 实例方法\n  say() {\n    console.log(\"汪汪汪\")\n  }\n\n  // 静态方法\n  static statciFunc() {\n    console.log('我是静态方法，this拿不到实例对象');\n  }\n}\n\nconst myPuppy = new Puppy(2);\nconsole.log(myPuppy.puppyAge);    // 2\nconsole.log(myPuppy.say());       // 汪汪汪\nconsole.log(Puppy.statciFunc());  // 我是静态方法，this拿不到实例对象\n```\n\n> 使用class可以让我们的代码看起来更像标准的面向对象，构造函数，实例方法，静态方法都有明确的标识。但是他本质只是改变了一种写法，所以可以看做是一种语法糖，如果你去看babel编译后的代码，你会发现他其实也是把class编译成了我们前面的函数类，extends关键字也是使用我们前面的原型继承的方式实现的。\n\n<br>\n\n## 四、总结\n\n1. JS中的函数可以作为函数使用，也可以作为类使用\n\n2. 作为类使用的函数实例化时需要使用new\n\n3. 为了让函数具有类的功能，函数都具有`prototype`属性。\n\n4. 为了让实例化出来的对象能够访问到prototype上的属性和方法，实例对象的 `__proto__` 指向了类的 `prototype`。所以`prototype`是函数的属性，不是对象的。对象拥有的是`__proto__`，是用来查找`prototype`的。\n\n5. `prototype.constructor`指向的是构造函数，也就是类函数本身。改变这个指针并不能改变构造函数。\n\n6. 对象本身并没有`constructor`属性，你访问到的是原型链上的`prototype.constructor`。\n\n7. 函数本身也是对象，也具有`__proto__`，他指向的是JS内置对象Function的原型 Function.prototype 。所以你才能调用func.call, func.apply这些方法，你调用的其实是 Function.prototype.call 和 Function.prototype.apply 。\n\n8. `prototype`本身也是对象，所以他也有`__proto__`，指向了他父级的prototype。`__proto__`和`prototype`的这种链式指向构成了JS的原型链。原型链的最终指向是Object的原型。Object上面原型链是null，即 `Object.prototype.__proto__ === null`。\n\n9. 另外评论区有朋友提到：`Function.__proto__ === Function.prototype `。这是因为JS中所有函数的原型都是 Function.prototype ，也就是说所有函数都是 Function 的实例。Function 本身也是可以作为函数使用的---- Function()，所以他也是 Function 的一个实例。类似的还有Object，Array等，他们也可以作为函数使用: Object(), Array() 。所以他们本身的原型也是Function.prototype，即 `Object.__proto__ === null Function.prototype` 。换句话说，这些可以 new 的内置对象其实都是一个类，就像我们的 Puppy 类一样。\n\n10. ES6 的 class 其实是函数类的一种语法糖，书写起来更清晰，但原理是一样的。\n\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143726912-1477686856.png)\n\n\n<br><br><br>\n\n> [轻松理解JS中的面向对象，顺便搞懂prototype和__proto__](https://www.toutiao.com/i6797216661217739275/?tt_from=mobile_qq&utm_campaign=client_share&timestamp=1585615280&app=news_article&utm_source=mobile_qq&utm_medium=toutiao_android&req_id=20200331084119010131074200316BEA8F&group_id=6797216661217739275)、\n[JS 系列二：深入 constructor、prototype、__proto__、[[Prototype]] 及 原型链](https://juejin.im/post/6844903924290289671#heading-11)\n\n\n","source":"_posts/JS面向对象与prototype，-proto-，constructor.md","raw":"---\ntitle: JS面向对象与prototype，__proto__，constructor\ndate: 2020-12-12 18:08:08\ntags: [原型链, 面向对象]\ncategories: JavaScript\n---\n\n\n## 一、Java中的面向对象与继承\n\n1. 下面代码中，我们定义了一个小狗类，在类中定义了一个属性和两个方法，一个构造方法用于初始化小狗的年龄 age，一个公有方法 say 用于打印。\n\n```javascript\npublic class Puppy{\n    int puppyAge;\n    \n    public Puppy(age){\n      puppyAge = age;\n    }\n    \n    public void say() {\n      System.out.println(\"汪汪汪\"); \n    }\n}\n```\n<br>\n\n2. 这是一个通用的类，当我们需要一个两岁的小狗的实例是这样写的，这个实例同时具有父类的方法。\n\n```javascript\nPuppy myPuppy = new Puppy(2);\nmuPuppy.say(); // 汪汪汪\n```\n<br>\n\n3. 以上的类和实例的实现均基于 java 的语法来的，但是相比于相对完善的 java 语法来说，早期的 js 没有 class 关键字啊（以下说 js 没有 class 关键字都是指 ES6 之前的 js ，主要帮助大家理解概念）。JS为了支持面向对象，使用了一种比较曲折的方式，具体如下。\n\n## 二、JS中的面向对象与继承\n\n\n1. **没有 class，用函数代替** ：早期的 js 没有 class 关键字，是怎么办的呢？对，是用函数来代替，函数不仅能执行普通功能，还能当 class 使用，栗子如下。\n\n```javascript\nfunction Puppy() {}\n```\n<br>\n\n2. 以上代码实现了一个函数。下面我们就可以生成以上函数的实例了。\n\n> 构造函数本身就是一个函数，与普通函数没有任何区别，不过为了规范一般将其首字母大写。构造函数和普通函数的区别在于，使用 new 生成实例的函数就是构造函数，直接调用的就是普通函数。\n\n```javascript\nlet myPuppy = new Puppy()\n```\n<br>\n\n3. **函数本身就是构造函数** ：虽然我们有了小狗的实例，但是不像 java 语法似的可以在类中定义构造函数来不能设置小狗的年龄啊。不慌，其实，充当类使用的函数本身就是构造函数，而且它就是默认的构造函数，下面我们重写以上代码，让构造函数接收函数来初始化小狗的年龄 age 。\n\n```javascript\n// 构造函数：可接收参数来初始化属性值\nfunction Puppy(age) {\n  this.puppyAge = age\n}\n\n// 实例化时可以传年龄参数了\nlet myPuppy = new Puppy(2)\n```\n<br>\n\n4. **构造函数中的 this 指向实例化对象** ：构造函数中的 this 指向需要注意：被作为类使用的函数里面 this 总是指向实例化对象，也就是 myPuppy 。这么设计的目的就是让使用者可以通过构造函数给实例对象设置属性，这时候打印出来看 myPuppy.puppyAge 就是 2 。\n\n```javascript\nconsole.log(myPuppy.puppyAge)   // 2\n```\n<br>\n\n5. **prototype 上定义实例方法** ：以上 4 点，我们实现了构造函数定义以及实例化。java 语法可以直接在类中定义公共方法来让实例小狗汪汪汪，js 如何办呢？对此，js 给出的解决方案是给构造方法添加一个 `prototype` 属性，挂载在这上面的方法，实例化时就会给到实例对象。\n\n```javascript\n// 在构造函数的 prototype 上添加方法\nPuppy.prototype.say = function() {\n  console.log(\"汪汪汪\")\n}\n\n// 实例对象调用相应方法\nmyPuppy.say()    // 汪汪汪\n```\n<br>\n\n6. **实例方法的查找用 proto** ：以上可能有的同学就会有疑问了，方法在构造函数的 `prototype` 上，实例对象 myPuppy 怎么会找到 say 方法了呢？我们来打印 myPuppy 。\n\n（1）当你访问一个对象上没有的属性时，比如 myPuppy.say，对象会去 `__proto__` 查找。 `__proto__` 的值就等于父类的 prototype , `myPuppy.__proto__` 指向了 Puppy.prototype。\n\n![实例方法的查找](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143617741-537961056.png)\n\n（2）如果你访问的属性在 `Puppy.prototype` 也不存在，那又会继续往 `Puppy.prototype.__proto__` 上找，这时候其实就找到了 `Object.prototype` 了，`Object.prototype` 再往上找就没有了，也就是 null，这其实就是 `原型链`。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143646241-1354675868.png)\n\n<br>\n\n7. **constructor** ：\n\n（1）每个实例都有一个 constructor（构造函数）属性，该属性指向对象本身。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143656225-984188307.png)\n\n（2）prototype.constructor 是 prototype 上的一个保留属性，这个属性就指向类函数本身，用于指示当前类的构造函数。\n\n![](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143703547-376698011.png)\n\n（3）既然 prototype.constructor 是指向构造函数的一个指针，那我们是不是可以通过它来修改构造函数呢？我们来试试就知道了。我们先修改下这个函数，然后新建一个实例看看效果\n\n```javascript\nfunction Puppy(age) {\n  this.puppyAge = age;\n}\n\nPuppy.prototype.constructor = function myConstructor(age) {\n  this.puppyAge2 = age + 1;\n}\n\nconst myPuppy2 = new Puppy(2);\nconsole.log(myPuppy2.puppyAge);    // 2\n```\n上例说明，我们修改 `prototype.constructor` 只是修改了这个指针而已，并没有修改真正的构造函数。\n\n（4）上面我们其实已经说清楚了 `prototype`，`__proto__`，`constructor` 几者之间的关系，下面画一张图来更直观的看下\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143713505-1807018330.png)\n\n<br>\n\n8. **静态方法** ：我们知道很多面向对象有静态方法这个概念，比如 java 直接是加一个 static 关键字就能将一个方法定义为静态方法。js  中定义一个静态方法更简单，直接将它作为类函数的属性就行。\n\n```javascript\n// 在构造函数上定义静态方法 statciFunc\nPuppy.statciFunc = function() {\n  console.log('我是静态方法，this拿不到实例对象')\n}      \n\n// 直接通过类名调用\nPuppy.statciFunc(); \n```\n\n<br>\n\n9. **继承**：面向对象怎么能没有继承呢，根据前面所讲的知识，我们其实已经能够自己写一个继承了。所谓继承不就是子类能够继承父类的属性和方法吗？换句话说就是子类能够找到父类的 `prototype` ，最简单的方法就是子类原型的 `__proto__` 指向父类原型就行了。\n\n（1）以下继承方法只是让 Child 访问到了 Parent 原型链，但是没有执行 Parent 的构造函数\n\n```javascript\nfunction Parent() {}\nfunction Child() {}\n\nChild.prototype.__proto__ = Parent.prototype;\n\nconst obj = new Child();\nconsole.log(obj instanceof Child );   // true\nconsole.log(obj instanceof Parent );   // true\n```\n\n（2）为了解决上述问题，我们不能单纯的修改 `Child.prototype.__proto__` 指向，还需要用 new 执行下 Parent 的构造函数。\n\n```javascript\nfunction Parent() {\n  this.parentAge = 50;\n}\nfunction Child() {}\n\nChild.prototype.__proto__ = new Parent();\n\nconst obj = new Child();\nconsole.log(obj.parentAge);    // 50\n```\n（3）上述方法会多一个 `__proto__` 层级，可以换成修改 `Child.prototype` 的指向来解决，注意将 `Child.prototype.constructor` 重置回来。\n\n```javascript\nfunction Parent() {\n  this.parentAge = 50;\n}\nfunction Child() {}\n\nChild.prototype = new Parent();\n// 注意重置constructor\nChild.prototype.constructor = Child;\n\nconst obj = new Child();\nconsole.log(obj.parentAge);   // 50\n```\n<br>\n\n10. **自己实现一个new**：结合上面讲的，我们知道 new 其实就是生成了一个对象，这个对象能够访问类的原型，知道了原理，我们就可以自己实现一个 new 了。\n\n```javascript\nfunction myNew(func, ...args) {\n    // 新建一个空对象\n  const obj = {};     \n  // 执行构造函数\n  func.call(obj, ...args);  \n  // 设置原型链\n  obj.__proto__ = func.prototype;    \n\n  return obj;\n}\n\nfunction Puppy(age) {\n  this.puppyAge = age;\n}\n\nPuppy.prototype.say = function() {\n  console.log(\"汪汪汪\");\n}\n\nconst myPuppy3 = myNew(Puppy, 2);\n\nconsole.log(myPuppy3.puppyAge);  // 2\nconsole.log(myPuppy3.say());     // 汪汪汪\n```\n\n<br>\n\n11. **自己实现一个 instanceof**：知道了原理，其实我们也知道了 instanceof 是干啥的。instanceof 不就是检查一个对象是不是某个类的实例吗？换句话说就是检查一个对象的的原型链上有没有这个类的 prototype ，知道了这个我们就可以自己实现一个了\n\n```javascript\nfunction myInstanceof(targetObj, targetClass) {\n  // 参数检查\n  if(!targetObj || !targetClass || !targetObj.__proto__ || !targetClass.prototype){\n    return false;\n  }\n\n  let current = targetObj;\n\n  while(current) {   // 一直往原型链上面找\n    if(current.__proto__ === targetClass.prototype) {\n      return true;    // 找到了返回true\n    }\n\n    current = current.__proto__;\n  }\n\n  return false;     // 没找到返回false\n}\n\n// 用我们前面的继承实验下\nfunction Parent() {}\nfunction Child() {}\n\nChild.prototype.__proto__ = Parent.prototype;\n\nconst obj = new Child();\nconsole.log(myInstanceof(obj, Child) );   // true\nconsole.log(myInstanceof(obj, Parent) );   // true\nconsole.log(myInstanceof({}, Parent) );   // false\n```\n\n<br>\n\n## 三、ES6的 class\n\nES6 的 class 就是前面说的函数类的语法糖，比如我们的 Puppy 用 ES6 的 class 写就是这样\n\n```javascript\nclass Puppy {\n  // 构造函数\n  constructor(age) {            \n    this.puppyAge = age;\n  }\n\n  // 实例方法\n  say() {\n    console.log(\"汪汪汪\")\n  }\n\n  // 静态方法\n  static statciFunc() {\n    console.log('我是静态方法，this拿不到实例对象');\n  }\n}\n\nconst myPuppy = new Puppy(2);\nconsole.log(myPuppy.puppyAge);    // 2\nconsole.log(myPuppy.say());       // 汪汪汪\nconsole.log(Puppy.statciFunc());  // 我是静态方法，this拿不到实例对象\n```\n\n> 使用class可以让我们的代码看起来更像标准的面向对象，构造函数，实例方法，静态方法都有明确的标识。但是他本质只是改变了一种写法，所以可以看做是一种语法糖，如果你去看babel编译后的代码，你会发现他其实也是把class编译成了我们前面的函数类，extends关键字也是使用我们前面的原型继承的方式实现的。\n\n<br>\n\n## 四、总结\n\n1. JS中的函数可以作为函数使用，也可以作为类使用\n\n2. 作为类使用的函数实例化时需要使用new\n\n3. 为了让函数具有类的功能，函数都具有`prototype`属性。\n\n4. 为了让实例化出来的对象能够访问到prototype上的属性和方法，实例对象的 `__proto__` 指向了类的 `prototype`。所以`prototype`是函数的属性，不是对象的。对象拥有的是`__proto__`，是用来查找`prototype`的。\n\n5. `prototype.constructor`指向的是构造函数，也就是类函数本身。改变这个指针并不能改变构造函数。\n\n6. 对象本身并没有`constructor`属性，你访问到的是原型链上的`prototype.constructor`。\n\n7. 函数本身也是对象，也具有`__proto__`，他指向的是JS内置对象Function的原型 Function.prototype 。所以你才能调用func.call, func.apply这些方法，你调用的其实是 Function.prototype.call 和 Function.prototype.apply 。\n\n8. `prototype`本身也是对象，所以他也有`__proto__`，指向了他父级的prototype。`__proto__`和`prototype`的这种链式指向构成了JS的原型链。原型链的最终指向是Object的原型。Object上面原型链是null，即 `Object.prototype.__proto__ === null`。\n\n9. 另外评论区有朋友提到：`Function.__proto__ === Function.prototype `。这是因为JS中所有函数的原型都是 Function.prototype ，也就是说所有函数都是 Function 的实例。Function 本身也是可以作为函数使用的---- Function()，所以他也是 Function 的一个实例。类似的还有Object，Array等，他们也可以作为函数使用: Object(), Array() 。所以他们本身的原型也是Function.prototype，即 `Object.__proto__ === null Function.prototype` 。换句话说，这些可以 new 的内置对象其实都是一个类，就像我们的 Puppy 类一样。\n\n10. ES6 的 class 其实是函数类的一种语法糖，书写起来更清晰，但原理是一样的。\n\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143726912-1477686856.png)\n\n\n<br><br><br>\n\n> [轻松理解JS中的面向对象，顺便搞懂prototype和__proto__](https://www.toutiao.com/i6797216661217739275/?tt_from=mobile_qq&utm_campaign=client_share&timestamp=1585615280&app=news_article&utm_source=mobile_qq&utm_medium=toutiao_android&req_id=20200331084119010131074200316BEA8F&group_id=6797216661217739275)、\n[JS 系列二：深入 constructor、prototype、__proto__、[[Prototype]] 及 原型链](https://juejin.im/post/6844903924290289671#heading-11)\n\n\n","slug":"JS面向对象与prototype，-proto-，constructor","published":1,"updated":"2020-12-12T10:11:07.092Z","_id":"ckiljegm30000sgqc5qc318wo","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、Java中的面向对象与继承\"><a href=\"#一、Java中的面向对象与继承\" class=\"headerlink\" title=\"一、Java中的面向对象与继承\"></a>一、Java中的面向对象与继承</h2><ol>\n<li>下面代码中，我们定义了一个小狗类，在类中定义了一个属性和两个方法，一个构造方法用于初始化小狗的年龄 age，一个公有方法 say 用于打印。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Puppy</span></span>&#123;</span><br><span class=\"line\">    int puppyAge;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Puppy</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">      puppyAge = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;汪汪汪&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"2\">\n<li>这是一个通用的类，当我们需要一个两岁的小狗的实例是这样写的，这个实例同时具有父类的方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Puppy myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\">muPuppy.say(); <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"3\">\n<li>以上的类和实例的实现均基于 java 的语法来的，但是相比于相对完善的 java 语法来说，早期的 js 没有 class 关键字啊（以下说 js 没有 class 关键字都是指 ES6 之前的 js ，主要帮助大家理解概念）。JS为了支持面向对象，使用了一种比较曲折的方式，具体如下。</li>\n</ol>\n<h2 id=\"二、JS中的面向对象与继承\"><a href=\"#二、JS中的面向对象与继承\" class=\"headerlink\" title=\"二、JS中的面向对象与继承\"></a>二、JS中的面向对象与继承</h2><ol>\n<li><strong>没有 class，用函数代替</strong> ：早期的 js 没有 class 关键字，是怎么办的呢？对，是用函数来代替，函数不仅能执行普通功能，还能当 class 使用，栗子如下。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"2\">\n<li>以上代码实现了一个函数。下面我们就可以生成以上函数的实例了。</li>\n</ol>\n<blockquote>\n<p>构造函数本身就是一个函数，与普通函数没有任何区别，不过为了规范一般将其首字母大写。构造函数和普通函数的区别在于，使用 new 生成实例的函数就是构造函数，直接调用的就是普通函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myPuppy = <span class=\"keyword\">new</span> Puppy()</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"3\">\n<li><strong>函数本身就是构造函数</strong> ：虽然我们有了小狗的实例，但是不像 java 语法似的可以在类中定义构造函数来不能设置小狗的年龄啊。不慌，其实，充当类使用的函数本身就是构造函数，而且它就是默认的构造函数，下面我们重写以上代码，让构造函数接收函数来初始化小狗的年龄 age 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数：可接收参数来初始化属性值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化时可以传年龄参数了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"4\">\n<li><strong>构造函数中的 this 指向实例化对象</strong> ：构造函数中的 this 指向需要注意：被作为类使用的函数里面 this 总是指向实例化对象，也就是 myPuppy 。这么设计的目的就是让使用者可以通过构造函数给实例对象设置属性，这时候打印出来看 myPuppy.puppyAge 就是 2 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.puppyAge)   <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"5\">\n<li><strong>prototype 上定义实例方法</strong> ：以上 4 点，我们实现了构造函数定义以及实例化。java 语法可以直接在类中定义公共方法来让实例小狗汪汪汪，js 如何办呢？对此，js 给出的解决方案是给构造方法添加一个 <code>prototype</code> 属性，挂载在这上面的方法，实例化时就会给到实例对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在构造函数的 prototype 上添加方法</span></span><br><span class=\"line\">Puppy.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例对象调用相应方法</span></span><br><span class=\"line\">myPuppy.say()    <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"6\">\n<li><strong>实例方法的查找用 proto</strong> ：以上可能有的同学就会有疑问了，方法在构造函数的 <code>prototype</code> 上，实例对象 myPuppy 怎么会找到 say 方法了呢？我们来打印 myPuppy 。</li>\n</ol>\n<p>（1）当你访问一个对象上没有的属性时，比如 myPuppy.say，对象会去 <code>__proto__</code> 查找。 <code>__proto__</code> 的值就等于父类的 prototype , <code>myPuppy.__proto__</code> 指向了 Puppy.prototype。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143617741-537961056.png\" alt=\"实例方法的查找\"></p>\n<p>（2）如果你访问的属性在 <code>Puppy.prototype</code> 也不存在，那又会继续往 <code>Puppy.prototype.__proto__</code> 上找，这时候其实就找到了 <code>Object.prototype</code> 了，<code>Object.prototype</code> 再往上找就没有了，也就是 null，这其实就是 <code>原型链</code>。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143646241-1354675868.png\"></p>\n<br>\n\n<ol start=\"7\">\n<li><strong>constructor</strong> ：</li>\n</ol>\n<p>（1）每个实例都有一个 constructor（构造函数）属性，该属性指向对象本身。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143656225-984188307.png\"></p>\n<p>（2）prototype.constructor 是 prototype 上的一个保留属性，这个属性就指向类函数本身，用于指示当前类的构造函数。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143703547-376698011.png\"></p>\n<p>（3）既然 prototype.constructor 是指向构造函数的一个指针，那我们是不是可以通过它来修改构造函数呢？我们来试试就知道了。我们先修改下这个函数，然后新建一个实例看看效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Puppy.prototype.constructor = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myConstructor</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge2 = age + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy2 = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy2.puppyAge);    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上例说明，我们修改 <code>prototype.constructor</code> 只是修改了这个指针而已，并没有修改真正的构造函数。</p>\n<p>（4）上面我们其实已经说清楚了 <code>prototype</code>，<code>__proto__</code>，<code>constructor</code> 几者之间的关系，下面画一张图来更直观的看下</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143713505-1807018330.png\" alt=\"关系图\"></p>\n<br>\n\n<ol start=\"8\">\n<li><strong>静态方法</strong> ：我们知道很多面向对象有静态方法这个概念，比如 java 直接是加一个 static 关键字就能将一个方法定义为静态方法。js  中定义一个静态方法更简单，直接将它作为类函数的属性就行。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在构造函数上定义静态方法 statciFunc</span></span><br><span class=\"line\">Puppy.statciFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>)</span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接通过类名调用</span></span><br><span class=\"line\">Puppy.statciFunc(); </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"9\">\n<li><strong>继承</strong>：面向对象怎么能没有继承呢，根据前面所讲的知识，我们其实已经能够自己写一个继承了。所谓继承不就是子类能够继承父类的属性和方法吗？换句话说就是子类能够找到父类的 <code>prototype</code> ，最简单的方法就是子类原型的 <code>__proto__</code> 指向父类原型就行了。</li>\n</ol>\n<p>（1）以下继承方法只是让 Child 访问到了 Parent 原型链，但是没有执行 Parent 的构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = Parent.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> Child );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> Parent );   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）为了解决上述问题，我们不能单纯的修改 <code>Child.prototype.__proto__</code> 指向，还需要用 new 执行下 Parent 的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.parentAge = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.parentAge);    <span class=\"comment\">// 50</span></span><br></pre></td></tr></table></figure>\n<p>（3）上述方法会多一个 <code>__proto__</code> 层级，可以换成修改 <code>Child.prototype</code> 的指向来解决，注意将 <code>Child.prototype.constructor</code> 重置回来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.parentAge = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"comment\">// 注意重置constructor</span></span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.parentAge);   <span class=\"comment\">// 50</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"10\">\n<li><strong>自己实现一个new</strong>：结合上面讲的，我们知道 new 其实就是生成了一个对象，这个对象能够访问类的原型，知道了原理，我们就可以自己实现一个 new 了。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">func, ...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;     </span><br><span class=\"line\">  <span class=\"comment\">// 执行构造函数</span></span><br><span class=\"line\">  func.call(obj, ...args);  </span><br><span class=\"line\">  <span class=\"comment\">// 设置原型链</span></span><br><span class=\"line\">  obj.__proto__ = func.prototype;    </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Puppy.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy3 = myNew(Puppy, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy3.puppyAge);  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy3.say());     <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"11\">\n<li><strong>自己实现一个 instanceof</strong>：知道了原理，其实我们也知道了 instanceof 是干啥的。instanceof 不就是检查一个对象是不是某个类的实例吗？换句话说就是检查一个对象的的原型链上有没有这个类的 prototype ，知道了这个我们就可以自己实现一个了</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">targetObj, targetClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数检查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!targetObj || !targetClass || !targetObj.__proto__ || !targetClass.prototype)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = targetObj;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current) &#123;   <span class=\"comment\">// 一直往原型链上面找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current.__proto__ === targetClass.prototype) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    <span class=\"comment\">// 找到了返回true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current = current.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;     <span class=\"comment\">// 没找到返回false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用我们前面的继承实验下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = Parent.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(obj, Child) );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(obj, Parent) );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(&#123;&#125;, Parent) );   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、ES6的-class\"><a href=\"#三、ES6的-class\" class=\"headerlink\" title=\"三、ES6的 class\"></a>三、ES6的 class</h2><p>ES6 的 class 就是前面说的函数类的语法糖，比如我们的 Puppy 用 ES6 的 class 写就是这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Puppy</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">age</span>)</span> &#123;            </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">statciFunc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.puppyAge);    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.say());       <span class=\"comment\">// 汪汪汪</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Puppy.statciFunc());  <span class=\"comment\">// 我是静态方法，this拿不到实例对象</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用class可以让我们的代码看起来更像标准的面向对象，构造函数，实例方法，静态方法都有明确的标识。但是他本质只是改变了一种写法，所以可以看做是一种语法糖，如果你去看babel编译后的代码，你会发现他其实也是把class编译成了我们前面的函数类，extends关键字也是使用我们前面的原型继承的方式实现的。</p>\n</blockquote>\n<br>\n\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><ol>\n<li><p>JS中的函数可以作为函数使用，也可以作为类使用</p>\n</li>\n<li><p>作为类使用的函数实例化时需要使用new</p>\n</li>\n<li><p>为了让函数具有类的功能，函数都具有<code>prototype</code>属性。</p>\n</li>\n<li><p>为了让实例化出来的对象能够访问到prototype上的属性和方法，实例对象的 <code>__proto__</code> 指向了类的 <code>prototype</code>。所以<code>prototype</code>是函数的属性，不是对象的。对象拥有的是<code>__proto__</code>，是用来查找<code>prototype</code>的。</p>\n</li>\n<li><p><code>prototype.constructor</code>指向的是构造函数，也就是类函数本身。改变这个指针并不能改变构造函数。</p>\n</li>\n<li><p>对象本身并没有<code>constructor</code>属性，你访问到的是原型链上的<code>prototype.constructor</code>。</p>\n</li>\n<li><p>函数本身也是对象，也具有<code>__proto__</code>，他指向的是JS内置对象Function的原型 Function.prototype 。所以你才能调用func.call, func.apply这些方法，你调用的其实是 Function.prototype.call 和 Function.prototype.apply 。</p>\n</li>\n<li><p><code>prototype</code>本身也是对象，所以他也有<code>__proto__</code>，指向了他父级的prototype。<code>__proto__</code>和<code>prototype</code>的这种链式指向构成了JS的原型链。原型链的最终指向是Object的原型。Object上面原型链是null，即 <code>Object.prototype.__proto__ === null</code>。</p>\n</li>\n<li><p>另外评论区有朋友提到：<code>Function.__proto__ === Function.prototype </code>。这是因为JS中所有函数的原型都是 Function.prototype ，也就是说所有函数都是 Function 的实例。Function 本身也是可以作为函数使用的—- Function()，所以他也是 Function 的一个实例。类似的还有Object，Array等，他们也可以作为函数使用: Object(), Array() 。所以他们本身的原型也是Function.prototype，即 <code>Object.__proto__ === null Function.prototype</code> 。换句话说，这些可以 new 的内置对象其实都是一个类，就像我们的 Puppy 类一样。</p>\n</li>\n<li><p>ES6 的 class 其实是函数类的一种语法糖，书写起来更清晰，但原理是一样的。</p>\n</li>\n</ol>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143726912-1477686856.png\" alt=\"关系图\"></p>\n<p><br><br><br></p>\n<blockquote>\n<p><a href=\"https://www.toutiao.com/i6797216661217739275/?tt_from=mobile_qq&utm_campaign=client_share&timestamp=1585615280&app=news_article&utm_source=mobile_qq&utm_medium=toutiao_android&req_id=20200331084119010131074200316BEA8F&group_id=6797216661217739275\">轻松理解JS中的面向对象，顺便搞懂prototype和<strong>proto</strong></a>、<br>[JS 系列二：深入 constructor、prototype、__proto__、[[Prototype]] 及 原型链](<a class=\"link\"   href=\"https://juejin.im/post/6844903924290289671#heading-11\" >https://juejin.im/post/6844903924290289671#heading-11<i class=\"fas fa-external-link-alt\"></i></a>)</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、Java中的面向对象与继承\"><a href=\"#一、Java中的面向对象与继承\" class=\"headerlink\" title=\"一、Java中的面向对象与继承\"></a>一、Java中的面向对象与继承</h2><ol>\n<li>下面代码中，我们定义了一个小狗类，在类中定义了一个属性和两个方法，一个构造方法用于初始化小狗的年龄 age，一个公有方法 say 用于打印。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Puppy</span></span>&#123;</span><br><span class=\"line\">    int puppyAge;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"function\"><span class=\"title\">Puppy</span>(<span class=\"params\">age</span>)</span>&#123;</span><br><span class=\"line\">      puppyAge = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;汪汪汪&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"2\">\n<li>这是一个通用的类，当我们需要一个两岁的小狗的实例是这样写的，这个实例同时具有父类的方法。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Puppy myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\">muPuppy.say(); <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"3\">\n<li>以上的类和实例的实现均基于 java 的语法来的，但是相比于相对完善的 java 语法来说，早期的 js 没有 class 关键字啊（以下说 js 没有 class 关键字都是指 ES6 之前的 js ，主要帮助大家理解概念）。JS为了支持面向对象，使用了一种比较曲折的方式，具体如下。</li>\n</ol>\n<h2 id=\"二、JS中的面向对象与继承\"><a href=\"#二、JS中的面向对象与继承\" class=\"headerlink\" title=\"二、JS中的面向对象与继承\"></a>二、JS中的面向对象与继承</h2><ol>\n<li><strong>没有 class，用函数代替</strong> ：早期的 js 没有 class 关键字，是怎么办的呢？对，是用函数来代替，函数不仅能执行普通功能，还能当 class 使用，栗子如下。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"2\">\n<li>以上代码实现了一个函数。下面我们就可以生成以上函数的实例了。</li>\n</ol>\n<blockquote>\n<p>构造函数本身就是一个函数，与普通函数没有任何区别，不过为了规范一般将其首字母大写。构造函数和普通函数的区别在于，使用 new 生成实例的函数就是构造函数，直接调用的就是普通函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myPuppy = <span class=\"keyword\">new</span> Puppy()</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"3\">\n<li><strong>函数本身就是构造函数</strong> ：虽然我们有了小狗的实例，但是不像 java 语法似的可以在类中定义构造函数来不能设置小狗的年龄啊。不慌，其实，充当类使用的函数本身就是构造函数，而且它就是默认的构造函数，下面我们重写以上代码，让构造函数接收函数来初始化小狗的年龄 age 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数：可接收参数来初始化属性值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例化时可以传年龄参数了</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"4\">\n<li><strong>构造函数中的 this 指向实例化对象</strong> ：构造函数中的 this 指向需要注意：被作为类使用的函数里面 this 总是指向实例化对象，也就是 myPuppy 。这么设计的目的就是让使用者可以通过构造函数给实例对象设置属性，这时候打印出来看 myPuppy.puppyAge 就是 2 。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.puppyAge)   <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"5\">\n<li><strong>prototype 上定义实例方法</strong> ：以上 4 点，我们实现了构造函数定义以及实例化。java 语法可以直接在类中定义公共方法来让实例小狗汪汪汪，js 如何办呢？对此，js 给出的解决方案是给构造方法添加一个 <code>prototype</code> 属性，挂载在这上面的方法，实例化时就会给到实例对象。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在构造函数的 prototype 上添加方法</span></span><br><span class=\"line\">Puppy.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例对象调用相应方法</span></span><br><span class=\"line\">myPuppy.say()    <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"6\">\n<li><strong>实例方法的查找用 proto</strong> ：以上可能有的同学就会有疑问了，方法在构造函数的 <code>prototype</code> 上，实例对象 myPuppy 怎么会找到 say 方法了呢？我们来打印 myPuppy 。</li>\n</ol>\n<p>（1）当你访问一个对象上没有的属性时，比如 myPuppy.say，对象会去 <code>__proto__</code> 查找。 <code>__proto__</code> 的值就等于父类的 prototype , <code>myPuppy.__proto__</code> 指向了 Puppy.prototype。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143617741-537961056.png\" alt=\"实例方法的查找\"></p>\n<p>（2）如果你访问的属性在 <code>Puppy.prototype</code> 也不存在，那又会继续往 <code>Puppy.prototype.__proto__</code> 上找，这时候其实就找到了 <code>Object.prototype</code> 了，<code>Object.prototype</code> 再往上找就没有了，也就是 null，这其实就是 <code>原型链</code>。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143646241-1354675868.png\"></p>\n<br>\n\n<ol start=\"7\">\n<li><strong>constructor</strong> ：</li>\n</ol>\n<p>（1）每个实例都有一个 constructor（构造函数）属性，该属性指向对象本身。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143656225-984188307.png\"></p>\n<p>（2）prototype.constructor 是 prototype 上的一个保留属性，这个属性就指向类函数本身，用于指示当前类的构造函数。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143703547-376698011.png\"></p>\n<p>（3）既然 prototype.constructor 是指向构造函数的一个指针，那我们是不是可以通过它来修改构造函数呢？我们来试试就知道了。我们先修改下这个函数，然后新建一个实例看看效果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Puppy.prototype.constructor = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myConstructor</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge2 = age + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy2 = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy2.puppyAge);    <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>上例说明，我们修改 <code>prototype.constructor</code> 只是修改了这个指针而已，并没有修改真正的构造函数。</p>\n<p>（4）上面我们其实已经说清楚了 <code>prototype</code>，<code>__proto__</code>，<code>constructor</code> 几者之间的关系，下面画一张图来更直观的看下</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143713505-1807018330.png\" alt=\"关系图\"></p>\n<br>\n\n<ol start=\"8\">\n<li><strong>静态方法</strong> ：我们知道很多面向对象有静态方法这个概念，比如 java 直接是加一个 static 关键字就能将一个方法定义为静态方法。js  中定义一个静态方法更简单，直接将它作为类函数的属性就行。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在构造函数上定义静态方法 statciFunc</span></span><br><span class=\"line\">Puppy.statciFunc = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>)</span><br><span class=\"line\">&#125;      </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 直接通过类名调用</span></span><br><span class=\"line\">Puppy.statciFunc(); </span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"9\">\n<li><strong>继承</strong>：面向对象怎么能没有继承呢，根据前面所讲的知识，我们其实已经能够自己写一个继承了。所谓继承不就是子类能够继承父类的属性和方法吗？换句话说就是子类能够找到父类的 <code>prototype</code> ，最简单的方法就是子类原型的 <code>__proto__</code> 指向父类原型就行了。</li>\n</ol>\n<p>（1）以下继承方法只是让 Child 访问到了 Parent 原型链，但是没有执行 Parent 的构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = Parent.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> Child );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj <span class=\"keyword\">instanceof</span> Parent );   <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>（2）为了解决上述问题，我们不能单纯的修改 <code>Child.prototype.__proto__</code> 指向，还需要用 new 执行下 Parent 的构造函数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.parentAge = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.parentAge);    <span class=\"comment\">// 50</span></span><br></pre></td></tr></table></figure>\n<p>（3）上述方法会多一个 <code>__proto__</code> 层级，可以换成修改 <code>Child.prototype</code> 的指向来解决，注意将 <code>Child.prototype.constructor</code> 重置回来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.parentAge = <span class=\"number\">50</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</span><br><span class=\"line\"><span class=\"comment\">// 注意重置constructor</span></span><br><span class=\"line\">Child.prototype.constructor = Child;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.parentAge);   <span class=\"comment\">// 50</span></span><br></pre></td></tr></table></figure>\n<br>\n\n<ol start=\"10\">\n<li><strong>自己实现一个new</strong>：结合上面讲的，我们知道 new 其实就是生成了一个对象，这个对象能够访问类的原型，知道了原理，我们就可以自己实现一个 new 了。</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myNew</span>(<span class=\"params\">func, ...args</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新建一个空对象</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> obj = &#123;&#125;;     </span><br><span class=\"line\">  <span class=\"comment\">// 执行构造函数</span></span><br><span class=\"line\">  func.call(obj, ...args);  </span><br><span class=\"line\">  <span class=\"comment\">// 设置原型链</span></span><br><span class=\"line\">  obj.__proto__ = func.prototype;    </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Puppy</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Puppy.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy3 = myNew(Puppy, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy3.puppyAge);  <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy3.say());     <span class=\"comment\">// 汪汪汪</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"11\">\n<li><strong>自己实现一个 instanceof</strong>：知道了原理，其实我们也知道了 instanceof 是干啥的。instanceof 不就是检查一个对象是不是某个类的实例吗？换句话说就是检查一个对象的的原型链上有没有这个类的 prototype ，知道了这个我们就可以自己实现一个了</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInstanceof</span>(<span class=\"params\">targetObj, targetClass</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数检查</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!targetObj || !targetClass || !targetObj.__proto__ || !targetClass.prototype)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> current = targetObj;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span>(current) &#123;   <span class=\"comment\">// 一直往原型链上面找</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(current.__proto__ === targetClass.prototype) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;    <span class=\"comment\">// 找到了返回true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    current = current.__proto__;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;     <span class=\"comment\">// 没找到返回false</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用我们前面的继承实验下</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Child.prototype.__proto__ = Parent.prototype;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = <span class=\"keyword\">new</span> Child();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(obj, Child) );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(obj, Parent) );   <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myInstanceof(&#123;&#125;, Parent) );   <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、ES6的-class\"><a href=\"#三、ES6的-class\" class=\"headerlink\" title=\"三、ES6的 class\"></a>三、ES6的 class</h2><p>ES6 的 class 就是前面说的函数类的语法糖，比如我们的 Puppy 用 ES6 的 class 写就是这样</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Puppy</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">age</span>)</span> &#123;            </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.puppyAge = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 实例方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;汪汪汪&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 静态方法</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">statciFunc</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;我是静态方法，this拿不到实例对象&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> myPuppy = <span class=\"keyword\">new</span> Puppy(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.puppyAge);    <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myPuppy.say());       <span class=\"comment\">// 汪汪汪</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Puppy.statciFunc());  <span class=\"comment\">// 我是静态方法，this拿不到实例对象</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用class可以让我们的代码看起来更像标准的面向对象，构造函数，实例方法，静态方法都有明确的标识。但是他本质只是改变了一种写法，所以可以看做是一种语法糖，如果你去看babel编译后的代码，你会发现他其实也是把class编译成了我们前面的函数类，extends关键字也是使用我们前面的原型继承的方式实现的。</p>\n</blockquote>\n<br>\n\n<h2 id=\"四、总结\"><a href=\"#四、总结\" class=\"headerlink\" title=\"四、总结\"></a>四、总结</h2><ol>\n<li><p>JS中的函数可以作为函数使用，也可以作为类使用</p>\n</li>\n<li><p>作为类使用的函数实例化时需要使用new</p>\n</li>\n<li><p>为了让函数具有类的功能，函数都具有<code>prototype</code>属性。</p>\n</li>\n<li><p>为了让实例化出来的对象能够访问到prototype上的属性和方法，实例对象的 <code>__proto__</code> 指向了类的 <code>prototype</code>。所以<code>prototype</code>是函数的属性，不是对象的。对象拥有的是<code>__proto__</code>，是用来查找<code>prototype</code>的。</p>\n</li>\n<li><p><code>prototype.constructor</code>指向的是构造函数，也就是类函数本身。改变这个指针并不能改变构造函数。</p>\n</li>\n<li><p>对象本身并没有<code>constructor</code>属性，你访问到的是原型链上的<code>prototype.constructor</code>。</p>\n</li>\n<li><p>函数本身也是对象，也具有<code>__proto__</code>，他指向的是JS内置对象Function的原型 Function.prototype 。所以你才能调用func.call, func.apply这些方法，你调用的其实是 Function.prototype.call 和 Function.prototype.apply 。</p>\n</li>\n<li><p><code>prototype</code>本身也是对象，所以他也有<code>__proto__</code>，指向了他父级的prototype。<code>__proto__</code>和<code>prototype</code>的这种链式指向构成了JS的原型链。原型链的最终指向是Object的原型。Object上面原型链是null，即 <code>Object.prototype.__proto__ === null</code>。</p>\n</li>\n<li><p>另外评论区有朋友提到：<code>Function.__proto__ === Function.prototype </code>。这是因为JS中所有函数的原型都是 Function.prototype ，也就是说所有函数都是 Function 的实例。Function 本身也是可以作为函数使用的—- Function()，所以他也是 Function 的一个实例。类似的还有Object，Array等，他们也可以作为函数使用: Object(), Array() 。所以他们本身的原型也是Function.prototype，即 <code>Object.__proto__ === null Function.prototype</code> 。换句话说，这些可以 new 的内置对象其实都是一个类，就像我们的 Puppy 类一样。</p>\n</li>\n<li><p>ES6 的 class 其实是函数类的一种语法糖，书写起来更清晰，但原理是一样的。</p>\n</li>\n</ol>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201013143726912-1477686856.png\" alt=\"关系图\"></p>\n<p><br><br><br></p>\n<blockquote>\n<p><a href=\"https://www.toutiao.com/i6797216661217739275/?tt_from=mobile_qq&utm_campaign=client_share&timestamp=1585615280&app=news_article&utm_source=mobile_qq&utm_medium=toutiao_android&req_id=20200331084119010131074200316BEA8F&group_id=6797216661217739275\">轻松理解JS中的面向对象，顺便搞懂prototype和<strong>proto</strong></a>、<br>[JS 系列二：深入 constructor、prototype、__proto__、[[Prototype]] 及 原型链](<a class=\"link\"   href=\"https://juejin.im/post/6844903924290289671#heading-11\" >https://juejin.im/post/6844903924290289671#heading-11<i class=\"fas fa-external-link-alt\"></i></a>)</p>\n</blockquote>\n"},{"title":"WebSocket理解与使用","date":"2020-12-12T10:13:22.000Z","_content":"\n\n### 一、WebSocket 理解\n\n1. **概念：** WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n\n2. **特点：** WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n3. **流程：** 在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\n\n\n4. **目前：** 现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n\n5. **优势：** HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。\n\n<br>\n\n### 二、WebSocket 属性\n\n\n1. **WebSocket 对象**\n\n```javascript\nlet ws = new WebSocket('ws://localhost:3000')  // 创建 WebSocket 对象\n```\n\n<br>\n\n2. **WebSocket 对象属性：** \n\n属性 | 描述\n---|---\nws.readyState | 只读属性 readyState 表示连接状态，可以是以下值: <br>   0 - 表示连接尚未建立。 <br> 1 - 表示连接已建立，可以进行通信。<br>2 - 表示连接正在进行关闭。<br> 3 - 表示连接已经关闭或者连接不能打开。\n   \n<br>\n\n3. **WebSocket 对象事件：**\n\n事件 | 事件处理程序 | 描述\n---|---|---\nopen | ws.onopen | 连接建立时触发\nmessage | ws.onmessage | 客户端接收服务端数据时触发\nerror | ws.onerror | 通信发生错误时触发\nclose | ws.onclose | 连接关闭时触发\n\n<br>\n\n4. **WebSocket 对象方法：**\n\n方法 | 描述\n---|---\nws.send() | 使用连接发送数据\nws.close() | 关闭连接\n\n<br>\n\n### 三、WebSocket 使用\n\n```javascript\n\n// 创建 WebSocket 对象\nlet ws = new WebSocket('ws://localhost:3000')\n// 定时器\nlet timer;\n\n// 监听打开\nws.onopen = webSocketOpen;\n// 监听异常\nws.onerror = webSocketError;\n// 监听消息\nws.onmessage = webSocketMessage;\n// 监听关闭\nws.onclose = webSocketClose;\n\n\nfunction webSocketOpen() {\n    console.log(`连接成功`)\n    start()\n},\n\nfunction webSocketError() {\n    console.log(`连接异常，请刷新页面重试`)\n},\n\nfunction webSocketMessage(e) {\n    console.log(`接收到消息:${e.data}`)\n},\n\nfunction webSocketClose() {\n    console.log(`连接关闭`)\n    clearInterval(timer)\n},\n\n// 发送心跳, 因为长时间不发送消息，就会断\nfunction start() {\n  clearInterval(timer)\n  timer = setInterval(() => {\n    let date = new Date()\n    ws.send(`发送心跳给后端${date}`)\n  }, 2 * 60 * 1000)\n}\n\n```\n\n<br>\n\n\n### 四、WebSocket 应用\n\n1. 双向通信，如聊天室。\n\n2. 微信小程序对 WebSocket 进行了封装，wx.connectSocket() 可以理解为创建了一个 WebSocket 实例 SocketTask。\n\n3. `socket.io` 支持 WebSocket、轮询、HTTP 流等方式。\n\n<br><br><br><br><br>\n\n","source":"_posts/WebSocket理解与使用.md","raw":"---\ntitle: WebSocket理解与使用\ndate: 2020-12-12 18:13:22\ntags: websocket\ncategories: Websocket\n---\n\n\n### 一、WebSocket 理解\n\n1. **概念：** WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。\n\n2. **特点：** WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。\n\n3. **流程：** 在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。\n\n\n4. **目前：** 现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。\n\n5. **优势：** HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。\n\n<br>\n\n### 二、WebSocket 属性\n\n\n1. **WebSocket 对象**\n\n```javascript\nlet ws = new WebSocket('ws://localhost:3000')  // 创建 WebSocket 对象\n```\n\n<br>\n\n2. **WebSocket 对象属性：** \n\n属性 | 描述\n---|---\nws.readyState | 只读属性 readyState 表示连接状态，可以是以下值: <br>   0 - 表示连接尚未建立。 <br> 1 - 表示连接已建立，可以进行通信。<br>2 - 表示连接正在进行关闭。<br> 3 - 表示连接已经关闭或者连接不能打开。\n   \n<br>\n\n3. **WebSocket 对象事件：**\n\n事件 | 事件处理程序 | 描述\n---|---|---\nopen | ws.onopen | 连接建立时触发\nmessage | ws.onmessage | 客户端接收服务端数据时触发\nerror | ws.onerror | 通信发生错误时触发\nclose | ws.onclose | 连接关闭时触发\n\n<br>\n\n4. **WebSocket 对象方法：**\n\n方法 | 描述\n---|---\nws.send() | 使用连接发送数据\nws.close() | 关闭连接\n\n<br>\n\n### 三、WebSocket 使用\n\n```javascript\n\n// 创建 WebSocket 对象\nlet ws = new WebSocket('ws://localhost:3000')\n// 定时器\nlet timer;\n\n// 监听打开\nws.onopen = webSocketOpen;\n// 监听异常\nws.onerror = webSocketError;\n// 监听消息\nws.onmessage = webSocketMessage;\n// 监听关闭\nws.onclose = webSocketClose;\n\n\nfunction webSocketOpen() {\n    console.log(`连接成功`)\n    start()\n},\n\nfunction webSocketError() {\n    console.log(`连接异常，请刷新页面重试`)\n},\n\nfunction webSocketMessage(e) {\n    console.log(`接收到消息:${e.data}`)\n},\n\nfunction webSocketClose() {\n    console.log(`连接关闭`)\n    clearInterval(timer)\n},\n\n// 发送心跳, 因为长时间不发送消息，就会断\nfunction start() {\n  clearInterval(timer)\n  timer = setInterval(() => {\n    let date = new Date()\n    ws.send(`发送心跳给后端${date}`)\n  }, 2 * 60 * 1000)\n}\n\n```\n\n<br>\n\n\n### 四、WebSocket 应用\n\n1. 双向通信，如聊天室。\n\n2. 微信小程序对 WebSocket 进行了封装，wx.connectSocket() 可以理解为创建了一个 WebSocket 实例 SocketTask。\n\n3. `socket.io` 支持 WebSocket、轮询、HTTP 流等方式。\n\n<br><br><br><br><br>\n\n","slug":"WebSocket理解与使用","published":1,"updated":"2020-12-12T10:13:55.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiljkxkx00001gqcaf9j4hh6","content":"<h3 id=\"一、WebSocket-理解\"><a href=\"#一、WebSocket-理解\" class=\"headerlink\" title=\"一、WebSocket 理解\"></a>一、WebSocket 理解</h3><ol>\n<li><p><strong>概念：</strong> WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>\n</li>\n<li><p><strong>特点：</strong> WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n</li>\n<li><p><strong>流程：</strong> 在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>目前：</strong> 现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p>\n</li>\n<li><p><strong>优势：</strong> HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p>\n</li>\n</ol>\n<br>\n\n<h3 id=\"二、WebSocket-属性\"><a href=\"#二、WebSocket-属性\" class=\"headerlink\" title=\"二、WebSocket 属性\"></a>二、WebSocket 属性</h3><ol>\n<li><strong>WebSocket 对象</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://localhost:3000&#x27;</span>)  <span class=\"comment\">// 创建 WebSocket 对象</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"2\">\n<li><strong>WebSocket 对象属性：</strong> </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ws.readyState</td>\n<td>只读属性 readyState 表示连接状态，可以是以下值: <br>   0 - 表示连接尚未建立。 <br> 1 - 表示连接已建立，可以进行通信。<br>2 - 表示连接正在进行关闭。<br> 3 - 表示连接已经关闭或者连接不能打开。</td>\n</tr>\n</tbody></table>\n<br>\n\n<ol start=\"3\">\n<li><strong>WebSocket 对象事件：</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>事件处理程序</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open</td>\n<td>ws.onopen</td>\n<td>连接建立时触发</td>\n</tr>\n<tr>\n<td>message</td>\n<td>ws.onmessage</td>\n<td>客户端接收服务端数据时触发</td>\n</tr>\n<tr>\n<td>error</td>\n<td>ws.onerror</td>\n<td>通信发生错误时触发</td>\n</tr>\n<tr>\n<td>close</td>\n<td>ws.onclose</td>\n<td>连接关闭时触发</td>\n</tr>\n</tbody></table>\n<br>\n\n<ol start=\"4\">\n<li><strong>WebSocket 对象方法：</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ws.send()</td>\n<td>使用连接发送数据</td>\n</tr>\n<tr>\n<td>ws.close()</td>\n<td>关闭连接</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"三、WebSocket-使用\"><a href=\"#三、WebSocket-使用\" class=\"headerlink\" title=\"三、WebSocket 使用\"></a>三、WebSocket 使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 WebSocket 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://localhost:3000&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听打开</span></span><br><span class=\"line\">ws.onopen = webSocketOpen;</span><br><span class=\"line\"><span class=\"comment\">// 监听异常</span></span><br><span class=\"line\">ws.onerror = webSocketError;</span><br><span class=\"line\"><span class=\"comment\">// 监听消息</span></span><br><span class=\"line\">ws.onmessage = webSocketMessage;</span><br><span class=\"line\"><span class=\"comment\">// 监听关闭</span></span><br><span class=\"line\">ws.onclose = webSocketClose;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketOpen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接成功`</span>)</span><br><span class=\"line\">    start()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接异常，请刷新页面重试`</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketMessage</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`接收到消息:<span class=\"subst\">$&#123;e.data&#125;</span>`</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketClose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接关闭`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(timer)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送心跳, 因为长时间不发送消息，就会断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer)</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    ws.send(<span class=\"string\">`发送心跳给后端<span class=\"subst\">$&#123;date&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">2</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"四、WebSocket-应用\"><a href=\"#四、WebSocket-应用\" class=\"headerlink\" title=\"四、WebSocket 应用\"></a>四、WebSocket 应用</h3><ol>\n<li><p>双向通信，如聊天室。</p>\n</li>\n<li><p>微信小程序对 WebSocket 进行了封装，wx.connectSocket() 可以理解为创建了一个 WebSocket 实例 SocketTask。</p>\n</li>\n<li><p><code>socket.io</code> 支持 WebSocket、轮询、HTTP 流等方式。</p>\n</li>\n</ol>\n<p><br><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、WebSocket-理解\"><a href=\"#一、WebSocket-理解\" class=\"headerlink\" title=\"一、WebSocket 理解\"></a>一、WebSocket 理解</h3><ol>\n<li><p><strong>概念：</strong> WebSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</p>\n</li>\n<li><p><strong>特点：</strong> WebSocket 使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在 WebSocket API 中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p>\n</li>\n<li><p><strong>流程：</strong> 在 WebSocket API 中，浏览器和服务器只需要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p>\n</li>\n</ol>\n<ol start=\"4\">\n<li><p><strong>目前：</strong> 现在，很多网站为了实现推送技术，所用的技术都是 Ajax 轮询。轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP请求，然后由服务器返回最新的数据给客户端的浏览器。这种传统的模式带来很明显的缺点，即浏览器需要不断的向服务器发出请求，然而HTTP请求可能包含较长的头部，其中真正有效的数据可能只是很小的一部分，显然这样会浪费很多的带宽等资源。</p>\n</li>\n<li><p><strong>优势：</strong> HTML5 定义的 WebSocket 协议，能更好的节省服务器资源和带宽，并且能够更实时地进行通讯。</p>\n</li>\n</ol>\n<br>\n\n<h3 id=\"二、WebSocket-属性\"><a href=\"#二、WebSocket-属性\" class=\"headerlink\" title=\"二、WebSocket 属性\"></a>二、WebSocket 属性</h3><ol>\n<li><strong>WebSocket 对象</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://localhost:3000&#x27;</span>)  <span class=\"comment\">// 创建 WebSocket 对象</span></span><br></pre></td></tr></table></figure>\n\n<br>\n\n<ol start=\"2\">\n<li><strong>WebSocket 对象属性：</strong> </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ws.readyState</td>\n<td>只读属性 readyState 表示连接状态，可以是以下值: <br>   0 - 表示连接尚未建立。 <br> 1 - 表示连接已建立，可以进行通信。<br>2 - 表示连接正在进行关闭。<br> 3 - 表示连接已经关闭或者连接不能打开。</td>\n</tr>\n</tbody></table>\n<br>\n\n<ol start=\"3\">\n<li><strong>WebSocket 对象事件：</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>事件处理程序</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open</td>\n<td>ws.onopen</td>\n<td>连接建立时触发</td>\n</tr>\n<tr>\n<td>message</td>\n<td>ws.onmessage</td>\n<td>客户端接收服务端数据时触发</td>\n</tr>\n<tr>\n<td>error</td>\n<td>ws.onerror</td>\n<td>通信发生错误时触发</td>\n</tr>\n<tr>\n<td>close</td>\n<td>ws.onclose</td>\n<td>连接关闭时触发</td>\n</tr>\n</tbody></table>\n<br>\n\n<ol start=\"4\">\n<li><strong>WebSocket 对象方法：</strong></li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ws.send()</td>\n<td>使用连接发送数据</td>\n</tr>\n<tr>\n<td>ws.close()</td>\n<td>关闭连接</td>\n</tr>\n</tbody></table>\n<br>\n\n<h3 id=\"三、WebSocket-使用\"><a href=\"#三、WebSocket-使用\" class=\"headerlink\" title=\"三、WebSocket 使用\"></a>三、WebSocket 使用</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建 WebSocket 对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">&#x27;ws://localhost:3000&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 定时器</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> timer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听打开</span></span><br><span class=\"line\">ws.onopen = webSocketOpen;</span><br><span class=\"line\"><span class=\"comment\">// 监听异常</span></span><br><span class=\"line\">ws.onerror = webSocketError;</span><br><span class=\"line\"><span class=\"comment\">// 监听消息</span></span><br><span class=\"line\">ws.onmessage = webSocketMessage;</span><br><span class=\"line\"><span class=\"comment\">// 监听关闭</span></span><br><span class=\"line\">ws.onclose = webSocketClose;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketOpen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接成功`</span>)</span><br><span class=\"line\">    start()</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接异常，请刷新页面重试`</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketMessage</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`接收到消息:<span class=\"subst\">$&#123;e.data&#125;</span>`</span>)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">webSocketClose</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`连接关闭`</span>)</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(timer)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送心跳, 因为长时间不发送消息，就会断</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer)</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()</span><br><span class=\"line\">    ws.send(<span class=\"string\">`发送心跳给后端<span class=\"subst\">$&#123;date&#125;</span>`</span>)</span><br><span class=\"line\">  &#125;, <span class=\"number\">2</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<br>\n\n\n<h3 id=\"四、WebSocket-应用\"><a href=\"#四、WebSocket-应用\" class=\"headerlink\" title=\"四、WebSocket 应用\"></a>四、WebSocket 应用</h3><ol>\n<li><p>双向通信，如聊天室。</p>\n</li>\n<li><p>微信小程序对 WebSocket 进行了封装，wx.connectSocket() 可以理解为创建了一个 WebSocket 实例 SocketTask。</p>\n</li>\n<li><p><code>socket.io</code> 支持 WebSocket、轮询、HTTP 流等方式。</p>\n</li>\n</ol>\n<p><br><br><br><br><br></p>\n"},{"title":"pdf转图片并下载","date":"2020-12-12T10:15:00.000Z","_content":"\n\n\n### 一、实现效果\n\n选择本地 pdf 文件上传，会生成 pdf 文件的预览，点击保存功能。\n\n![预览图1](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165147927-1392643265.png)\n\n![预览图2](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165256769-1608228895.png)\n\n![预览图3](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165306613-1977214439.png)\n\n\n<br>\n\n### 二、所用插件\n\n1. pdf文件相关的文件处理插件：`pdfjs-dist@2.3.200`\n2. zip压缩文件相关的包： `jszip@3.5.0`\n3. 文件保存下载相关的包：`file-saver@2.0.2`\n\n<br>\n\n### 三、相关代码\n\n> vue 中测试\n\n```javascript\n\n<!--\n * @Date: 2020-10-21 10:44:54\n * @information: pdf 转图片并下载\n-->\n<template>\n  <div id=\"page09\">\n\n    <div class=\"info-box\">\n      <div class=\"input\">\n        <input id=\"input\" type=\"file\" accept=\"application/pdf\" @change=\"convertFile()\"/>\n      </div>\n      <div class=\"cell\">\n        <div>名称：{{fileName || '-'}}</div>\n        <div>大小：{{Number(fileSize).toFixed(2)}}M</div>\n        <div>页数：{{filePage}}</div>\n        <button @click=\"onExportImg\">保存图片</button>\n      </div>\n    </div>\n\n    <div id=\"container\"></div>\n\n  </div>\n</template>\n\n<script>\nimport PDFJS from 'pdfjs-dist'\nimport JSZIP from 'jszip'\nimport FileSaver from 'file-saver'\n\nexport default {\n  data() {\n    return {\n      // pdf地址\n      pdfPath2: `https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf`,\n      // arrayBuffer\n      arrayBuffer: null, \n      // 文件名称\n      fileName: null,\n      // 文件大小\n      fileSize: 0,\n      // 文件页数\n      filePage: 0,\n    }\n  },\n  methods: {\n    \n    /**\n     * 读取文件内容\n     */\n    convertFile() {\n      let file = document.getElementById('input').files\n      if(!file.length) return;\n      let {name, size} = file[0]\n      Object.assign(this, {fileName: name, fileSize: size/1024/1024})\n      // 使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据\n      let fileReader = new FileReader()\n      // 异步按字节读取文件内容，结果用ArrayBuffer对象表示\n      fileReader.readAsArrayBuffer(file[0])\n      fileReader.onload = (e) => {\n        let arrayBuffer = this.arrayBuffer = e.target.result\n        // 创建canvas节点\n        this.createCanvas(arrayBuffer)\n      }\n    },\n\n    /**\n     * 创建canvas\n     */\n    createCanvas(val) {\n      // 清空节点下数据\n      document.getElementById('container').innerHTML = ''\n      // 使用getTextContent获取pdf内容\n      PDFJS.getDocument(val).promise.then(el => {\n        let filePage = this.filePage = el.numPages\n        for(let i = 1; i <= filePage; i ++) {\n          let canvas = document.createElement('canvas')\n          canvas.id = `pageNum-${i}`\n          let context = canvas.getContext('2d')\n          document.getElementById('container').append(canvas)\n          // 渲染canvas\n          this.openPage(el, i, context)\n        }\n      })\n    },\n\n    /**\n     * 渲染canvas\n     */\n    openPage(pdfFile, pageNumber, context) {\n      // 获取PDF文档中的各个页面\n      pdfFile.getPage(pageNumber).then(page => {\n        // 设置展示比例\n        let scale = 3\n        // 获取pdf尺寸\n        let viewport = page.getViewport(scale)\n        let canvas = context.canvas\n        canvas.width = viewport.width\n        canvas.height = viewport.height\n        canvas.style.width = \"100%\"\n        canvas.style.height = \"100%\"\n\n        let model = {\n          canvasContext: context,\n          viewport: viewport,\n        }\n        // 渲染PDF\n        page.render(model)\n      })\n    },\n\n    /**\n     * 保存图片\n     */\n    onExportImg() {\n      if(!this.arrayBuffer) {\n        alert(`请上传pdf文件`)\n        return;\n      }\n\n      let jszip = new JSZIP()\n      // 解压缩后的文件夹名称\n      let images = jszip.folder(\"images\")\n      let eleList = document.querySelectorAll('canvas')\n      // 遍历所有canvas节点\n      for(let i = 0; i < eleList.length; i ++) {\n        let canvas = document.getElementById(`pageNum-${i+1}`)\n        // 向此文件夹中加入文件\n        // toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi\n        images.file(`image-${i+1}.png`, this.dataURLtoBlob(canvas.toDataURL(\"image/png\", 1.0)), {\n          base64: true\n        })\n      }\n\n      // 生成一个zip文件\n      jszip.generateAsync({\n        type: \"blob\"\n      }).then((content) => {\n        // 使用 FileSaver 保存下载 zip 文件\n        FileSaver.saveAs(content, \"pdfToImages.zip\");\n      })\n    },\n\n    /**\n     * dataURL 转成 Blob\n     */\n    dataURLtoBlob(val) {\n      let arr = val.split(','),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n      while(n --) {\n        // charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      // new Blob(blobParts, [options]) 参数说明:\n      // 1. blobParts：数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString \n      // 2. options：可选项，字典格式类型，可以指定如下两个属性：\n      //    (1) type，默认值为 \"\"，它代表了将会被放入到blob中的数组内容的MIME类型。\n      //    (2) endings，默认值为\"transparent\"，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： \"native\"，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； \"transparent\"，表示会保持blob中保存的结束符不变\n\n      return new Blob([u8arr], { type: mime })\n    },\n\n    \n\n\n\n  },\n  created() {\n\n  },\n  mounted() {\n\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#page09 {\n  width: 1000px;\n  margin: 0 auto;\n\n  .info-box {\n    position: relative;\n\n    .input {\n      margin: 15px 0;\n\n      #input {\n        width: 100%;\n        height: 100%;\n        cursor: pointer;\n      }\n    }\n\n    .cell {\n      margin: 15px 0;\n      display: flex;  \n      justify-content: space-around;\n\n      div {\n        margin-right: 20px;\n      }\n    }\n  }\n\n  #container {\n    width: 100%;\n    min-height: 850px;\n    margin:  0 auto;\n    border: 1px solid #eee;\n    border-radius: 10px;\n\n    canvas {\n      margin-bottom: 10px;\n      border: 1px solid #ff6700;\n      border-radius: 10px;\n    }\n  }\n\n\n}\n</style>\n```\n\n<br>\n\n### 四、相关知识点\n\n#### 1. 使用 FileReader 进行文件读取\n\n> [[HTML5] FileReader对象](https://www.cnblogs.com/hhhyaaon/p/5929492.html)\n\n（1）创建实例\n\n```javascript\nlet fileReader = new FileReader()\n```\n\n\n（2）方法\n\n方法定义 | 描述\n---|---\nabort():void | 终止文件读取操作\nreadAsArrayBuffer(file):void | 异步按字节读取文件内容，结果用ArrayBuffer对象表示\nreadAsBinaryString(file):void | 异步按字节读取文件内容，结果为文件的二进制串\nreadAsDataURL(file):void | 异步读取文件内容，结果用data:url的字符串形式表示\nreadAsText(file,encoding):void | 异步按字符读取文件内容，结果用字符串形式表示\n\n\n（3）事件： FileReader 通过异步的方式读取文件内容，结果均是通过事件回调获取。\n\n方法定义 | 描述\n---|---\nonabort | 当读取操作被中止时调用\nonerror | 当读取操作发生错误时调用\nonload | 当读取操作成功完成时调用\nonloadend | 当读取操作完成时调用,不管是成功还是失败\nonloadstart | 当读取操作将要开始之前调用\nonprogress | 在读取数据过程中周期性调用\n\n\n\n<br>\n\n#### 2. 使用 canvas 的 `toDataURL()` 方法返回 包含 data URI 的DOMString\n\n\n```javascript\nlet canvas = document.getElementById(`canvas`)\n\n// 参数说明：\n// 1. type（可选）：图片格式，默认为 image/png\n// 2. encoderOptions（可选）：在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。\nlet result = canvas.toDataURL(\"image/png\", 1.0)\n```\n> [MDN: HTMLCanvasElement.toDataURL()](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n<br>\n\n\n#### 3. ArrayBuffer 二进制数组\n\n> [ArrayBuffer，二进制数组](https://zh.javascript.info/arraybuffer-binary-arrays)\n\n（1） JS 中的二进制数据格式，例：ArrayBuffer，Uint8Array，DataView，Blob，File 及其他。\n\n**基本的二进制对象是 ArrayBuffer —— 对固定长度的连续内存空间的引用。**\n\n\n（2）如要操作 ArrayBuffer，我们需要使用“视图”对象。 视图对象本身并不存储任何东西。它是一副“眼镜”，透过它来解释存储在 ArrayBuffer 中的字节。例如下：\n\n\n视图类型 | 说明\n---|---\nUint8Array | 将 ArrayBuffer 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”。\nUint16Array | 将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”。\nUint32Array  | 将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”。\nFloat64Array | 将每 8 个字节视为一个 5.0x10-324 到 1.8x10308 之间的浮点数。\n\n\n\n\n<br>\n\n#### 3. Blob\n\n> [细说Web API中的Blob](https://segmentfault.com/a/1190000011563430)\n\n（1）概述： Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n（2）创建 Blob 对象\n\n\n```javascript\n// 参数说明\n// 1. blobParts： 数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString\n// 2. options：可选项，字典格式类型，可以指定如下两个属性：\n\ntype，默认值为 \"\"，它代表了将会被放入到blob中的数组内容的MIME类型。\nendings，默认值为\"transparent\"，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： \"native\"，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； \"transparent\"，表示会保持blob中保存的结束符不变。\n\nlet blob = new Blob(blobParts[, options])\n\nlet data1 = \"a\"\nlet data2 = { \"name\": \"abc\" }\n\nlet blob1 = new Blob([data1])\nlet blob2 = new Blob([JSON.stringify(data4)])\nlet blob3 = new Blob([data4])\n\nconsole.log(blob1);  // Blob {size: 1, type: \"\"}\nconsole.log(blob2);  // Blob {size: 14, type: \"\"}\nconsole.log(blob3);  // Blob {size: 15, type: \"\"}\n```\n\n> size代表Blob 对象中所包含数据的字节数。这里要注意，使用字符串和普通对象创建Blob时的不同，blob4使用通过JSON.stringify把data4对象转换成json字符串，blob5则直接使用data4创建，两个对象的size分别为14和15。blob4的size等于14很容易理解，因为JSON.stringify(data4)的结果为：\"{\"name\":\"abc\"}\"，正好14个字节(不包含最外层的引号)。blob5的size等于15是如何计算而来的呢？实际上，当使用普通对象创建Blob对象时，相当于调用了普通对象的toString()方法得到字符串数据，然后再创建Blob对象。所以，blob5保存的数据是\"[object Object]\"，是15个字节(不包含最外层的引号)。\n\n\n（3）Blob 方法： slice()\n\n（4）Blob使用场景\n\n- 分片上传\n- Blob URL\n\n\n\n<br>\n\n> [PDF转成图片](https://xxlllq.github.io/readme/2018/05/09/pdf2img.html)\n\n<br><br>\n","source":"_posts/pdf转图片并下载.md","raw":"---\ntitle: pdf转图片并下载\ndate: 2020-12-12 18:15:00\ntags: pdf\ncategories: JavaScript\n---\n\n\n\n### 一、实现效果\n\n选择本地 pdf 文件上传，会生成 pdf 文件的预览，点击保存功能。\n\n![预览图1](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165147927-1392643265.png)\n\n![预览图2](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165256769-1608228895.png)\n\n![预览图3](https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165306613-1977214439.png)\n\n\n<br>\n\n### 二、所用插件\n\n1. pdf文件相关的文件处理插件：`pdfjs-dist@2.3.200`\n2. zip压缩文件相关的包： `jszip@3.5.0`\n3. 文件保存下载相关的包：`file-saver@2.0.2`\n\n<br>\n\n### 三、相关代码\n\n> vue 中测试\n\n```javascript\n\n<!--\n * @Date: 2020-10-21 10:44:54\n * @information: pdf 转图片并下载\n-->\n<template>\n  <div id=\"page09\">\n\n    <div class=\"info-box\">\n      <div class=\"input\">\n        <input id=\"input\" type=\"file\" accept=\"application/pdf\" @change=\"convertFile()\"/>\n      </div>\n      <div class=\"cell\">\n        <div>名称：{{fileName || '-'}}</div>\n        <div>大小：{{Number(fileSize).toFixed(2)}}M</div>\n        <div>页数：{{filePage}}</div>\n        <button @click=\"onExportImg\">保存图片</button>\n      </div>\n    </div>\n\n    <div id=\"container\"></div>\n\n  </div>\n</template>\n\n<script>\nimport PDFJS from 'pdfjs-dist'\nimport JSZIP from 'jszip'\nimport FileSaver from 'file-saver'\n\nexport default {\n  data() {\n    return {\n      // pdf地址\n      pdfPath2: `https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf`,\n      // arrayBuffer\n      arrayBuffer: null, \n      // 文件名称\n      fileName: null,\n      // 文件大小\n      fileSize: 0,\n      // 文件页数\n      filePage: 0,\n    }\n  },\n  methods: {\n    \n    /**\n     * 读取文件内容\n     */\n    convertFile() {\n      let file = document.getElementById('input').files\n      if(!file.length) return;\n      let {name, size} = file[0]\n      Object.assign(this, {fileName: name, fileSize: size/1024/1024})\n      // 使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据\n      let fileReader = new FileReader()\n      // 异步按字节读取文件内容，结果用ArrayBuffer对象表示\n      fileReader.readAsArrayBuffer(file[0])\n      fileReader.onload = (e) => {\n        let arrayBuffer = this.arrayBuffer = e.target.result\n        // 创建canvas节点\n        this.createCanvas(arrayBuffer)\n      }\n    },\n\n    /**\n     * 创建canvas\n     */\n    createCanvas(val) {\n      // 清空节点下数据\n      document.getElementById('container').innerHTML = ''\n      // 使用getTextContent获取pdf内容\n      PDFJS.getDocument(val).promise.then(el => {\n        let filePage = this.filePage = el.numPages\n        for(let i = 1; i <= filePage; i ++) {\n          let canvas = document.createElement('canvas')\n          canvas.id = `pageNum-${i}`\n          let context = canvas.getContext('2d')\n          document.getElementById('container').append(canvas)\n          // 渲染canvas\n          this.openPage(el, i, context)\n        }\n      })\n    },\n\n    /**\n     * 渲染canvas\n     */\n    openPage(pdfFile, pageNumber, context) {\n      // 获取PDF文档中的各个页面\n      pdfFile.getPage(pageNumber).then(page => {\n        // 设置展示比例\n        let scale = 3\n        // 获取pdf尺寸\n        let viewport = page.getViewport(scale)\n        let canvas = context.canvas\n        canvas.width = viewport.width\n        canvas.height = viewport.height\n        canvas.style.width = \"100%\"\n        canvas.style.height = \"100%\"\n\n        let model = {\n          canvasContext: context,\n          viewport: viewport,\n        }\n        // 渲染PDF\n        page.render(model)\n      })\n    },\n\n    /**\n     * 保存图片\n     */\n    onExportImg() {\n      if(!this.arrayBuffer) {\n        alert(`请上传pdf文件`)\n        return;\n      }\n\n      let jszip = new JSZIP()\n      // 解压缩后的文件夹名称\n      let images = jszip.folder(\"images\")\n      let eleList = document.querySelectorAll('canvas')\n      // 遍历所有canvas节点\n      for(let i = 0; i < eleList.length; i ++) {\n        let canvas = document.getElementById(`pageNum-${i+1}`)\n        // 向此文件夹中加入文件\n        // toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi\n        images.file(`image-${i+1}.png`, this.dataURLtoBlob(canvas.toDataURL(\"image/png\", 1.0)), {\n          base64: true\n        })\n      }\n\n      // 生成一个zip文件\n      jszip.generateAsync({\n        type: \"blob\"\n      }).then((content) => {\n        // 使用 FileSaver 保存下载 zip 文件\n        FileSaver.saveAs(content, \"pdfToImages.zip\");\n      })\n    },\n\n    /**\n     * dataURL 转成 Blob\n     */\n    dataURLtoBlob(val) {\n      let arr = val.split(','),\n          mime = arr[0].match(/:(.*?);/)[1],\n          bstr = atob(arr[1]),\n          n = bstr.length,\n          u8arr = new Uint8Array(n);\n      while(n --) {\n        // charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数\n        u8arr[n] = bstr.charCodeAt(n)\n      }\n      // new Blob(blobParts, [options]) 参数说明:\n      // 1. blobParts：数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString \n      // 2. options：可选项，字典格式类型，可以指定如下两个属性：\n      //    (1) type，默认值为 \"\"，它代表了将会被放入到blob中的数组内容的MIME类型。\n      //    (2) endings，默认值为\"transparent\"，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： \"native\"，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； \"transparent\"，表示会保持blob中保存的结束符不变\n\n      return new Blob([u8arr], { type: mime })\n    },\n\n    \n\n\n\n  },\n  created() {\n\n  },\n  mounted() {\n\n  }\n}\n</script>\n\n<style lang=\"scss\">\n#page09 {\n  width: 1000px;\n  margin: 0 auto;\n\n  .info-box {\n    position: relative;\n\n    .input {\n      margin: 15px 0;\n\n      #input {\n        width: 100%;\n        height: 100%;\n        cursor: pointer;\n      }\n    }\n\n    .cell {\n      margin: 15px 0;\n      display: flex;  \n      justify-content: space-around;\n\n      div {\n        margin-right: 20px;\n      }\n    }\n  }\n\n  #container {\n    width: 100%;\n    min-height: 850px;\n    margin:  0 auto;\n    border: 1px solid #eee;\n    border-radius: 10px;\n\n    canvas {\n      margin-bottom: 10px;\n      border: 1px solid #ff6700;\n      border-radius: 10px;\n    }\n  }\n\n\n}\n</style>\n```\n\n<br>\n\n### 四、相关知识点\n\n#### 1. 使用 FileReader 进行文件读取\n\n> [[HTML5] FileReader对象](https://www.cnblogs.com/hhhyaaon/p/5929492.html)\n\n（1）创建实例\n\n```javascript\nlet fileReader = new FileReader()\n```\n\n\n（2）方法\n\n方法定义 | 描述\n---|---\nabort():void | 终止文件读取操作\nreadAsArrayBuffer(file):void | 异步按字节读取文件内容，结果用ArrayBuffer对象表示\nreadAsBinaryString(file):void | 异步按字节读取文件内容，结果为文件的二进制串\nreadAsDataURL(file):void | 异步读取文件内容，结果用data:url的字符串形式表示\nreadAsText(file,encoding):void | 异步按字符读取文件内容，结果用字符串形式表示\n\n\n（3）事件： FileReader 通过异步的方式读取文件内容，结果均是通过事件回调获取。\n\n方法定义 | 描述\n---|---\nonabort | 当读取操作被中止时调用\nonerror | 当读取操作发生错误时调用\nonload | 当读取操作成功完成时调用\nonloadend | 当读取操作完成时调用,不管是成功还是失败\nonloadstart | 当读取操作将要开始之前调用\nonprogress | 在读取数据过程中周期性调用\n\n\n\n<br>\n\n#### 2. 使用 canvas 的 `toDataURL()` 方法返回 包含 data URI 的DOMString\n\n\n```javascript\nlet canvas = document.getElementById(`canvas`)\n\n// 参数说明：\n// 1. type（可选）：图片格式，默认为 image/png\n// 2. encoderOptions（可选）：在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。\nlet result = canvas.toDataURL(\"image/png\", 1.0)\n```\n> [MDN: HTMLCanvasElement.toDataURL()](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL)\n\n<br>\n\n\n#### 3. ArrayBuffer 二进制数组\n\n> [ArrayBuffer，二进制数组](https://zh.javascript.info/arraybuffer-binary-arrays)\n\n（1） JS 中的二进制数据格式，例：ArrayBuffer，Uint8Array，DataView，Blob，File 及其他。\n\n**基本的二进制对象是 ArrayBuffer —— 对固定长度的连续内存空间的引用。**\n\n\n（2）如要操作 ArrayBuffer，我们需要使用“视图”对象。 视图对象本身并不存储任何东西。它是一副“眼镜”，透过它来解释存储在 ArrayBuffer 中的字节。例如下：\n\n\n视图类型 | 说明\n---|---\nUint8Array | 将 ArrayBuffer 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”。\nUint16Array | 将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”。\nUint32Array  | 将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”。\nFloat64Array | 将每 8 个字节视为一个 5.0x10-324 到 1.8x10308 之间的浮点数。\n\n\n\n\n<br>\n\n#### 3. Blob\n\n> [细说Web API中的Blob](https://segmentfault.com/a/1190000011563430)\n\n（1）概述： Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n（2）创建 Blob 对象\n\n\n```javascript\n// 参数说明\n// 1. blobParts： 数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString\n// 2. options：可选项，字典格式类型，可以指定如下两个属性：\n\ntype，默认值为 \"\"，它代表了将会被放入到blob中的数组内容的MIME类型。\nendings，默认值为\"transparent\"，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： \"native\"，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； \"transparent\"，表示会保持blob中保存的结束符不变。\n\nlet blob = new Blob(blobParts[, options])\n\nlet data1 = \"a\"\nlet data2 = { \"name\": \"abc\" }\n\nlet blob1 = new Blob([data1])\nlet blob2 = new Blob([JSON.stringify(data4)])\nlet blob3 = new Blob([data4])\n\nconsole.log(blob1);  // Blob {size: 1, type: \"\"}\nconsole.log(blob2);  // Blob {size: 14, type: \"\"}\nconsole.log(blob3);  // Blob {size: 15, type: \"\"}\n```\n\n> size代表Blob 对象中所包含数据的字节数。这里要注意，使用字符串和普通对象创建Blob时的不同，blob4使用通过JSON.stringify把data4对象转换成json字符串，blob5则直接使用data4创建，两个对象的size分别为14和15。blob4的size等于14很容易理解，因为JSON.stringify(data4)的结果为：\"{\"name\":\"abc\"}\"，正好14个字节(不包含最外层的引号)。blob5的size等于15是如何计算而来的呢？实际上，当使用普通对象创建Blob对象时，相当于调用了普通对象的toString()方法得到字符串数据，然后再创建Blob对象。所以，blob5保存的数据是\"[object Object]\"，是15个字节(不包含最外层的引号)。\n\n\n（3）Blob 方法： slice()\n\n（4）Blob使用场景\n\n- 分片上传\n- Blob URL\n\n\n\n<br>\n\n> [PDF转成图片](https://xxlllq.github.io/readme/2018/05/09/pdf2img.html)\n\n<br><br>\n","slug":"pdf转图片并下载","published":1,"updated":"2020-12-12T10:17:55.613Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiljq12x0000kcqc5wxe9xfe","content":"<h3 id=\"一、实现效果\"><a href=\"#一、实现效果\" class=\"headerlink\" title=\"一、实现效果\"></a>一、实现效果</h3><p>选择本地 pdf 文件上传，会生成 pdf 文件的预览，点击保存功能。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165147927-1392643265.png\" alt=\"预览图1\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165256769-1608228895.png\" alt=\"预览图2\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165306613-1977214439.png\" alt=\"预览图3\"></p>\n<br>\n\n<h3 id=\"二、所用插件\"><a href=\"#二、所用插件\" class=\"headerlink\" title=\"二、所用插件\"></a>二、所用插件</h3><ol>\n<li>pdf文件相关的文件处理插件：<code>pdfjs-dist@2.3.200</code></li>\n<li>zip压缩文件相关的包： <code>jszip@3.5.0</code></li>\n<li>文件保存下载相关的包：<code>file-saver@2.0.2</code></li>\n</ol>\n<br>\n\n<h3 id=\"三、相关代码\"><a href=\"#三、相关代码\" class=\"headerlink\" title=\"三、相关代码\"></a>三、相关代码</h3><blockquote>\n<p>vue 中测试</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">10</span>-<span class=\"number\">21</span> <span class=\"number\">10</span>:<span class=\"number\">44</span>:<span class=\"number\">54</span></span><br><span class=\"line\"> * @information: pdf 转图片并下载</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;page09&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;info-box&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;input&quot;</span>&gt;</span><br><span class=\"line\">        &lt;input id=<span class=\"string\">&quot;input&quot;</span> type=<span class=\"string\">&quot;file&quot;</span> accept=<span class=\"string\">&quot;application/pdf&quot;</span> @change=<span class=\"string\">&quot;convertFile()&quot;</span>/&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;cell&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;名称：&#123;&#123;fileName || <span class=\"string\">&#x27;-&#x27;</span>&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;大小：&#123;&#123;<span class=\"built_in\">Number</span>(fileSize).toFixed(<span class=\"number\">2</span>)&#125;&#125;M&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;页数：&#123;&#123;filePage&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;button @click=<span class=\"string\">&quot;onExportImg&quot;</span>&gt;保存图片&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PDFJS <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pdfjs-dist&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> JSZIP <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jszip&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> FileSaver <span class=\"keyword\">from</span> <span class=\"string\">&#x27;file-saver&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// pdf地址</span></span><br><span class=\"line\">      pdfPath2: <span class=\"string\">`https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf`</span>,</span><br><span class=\"line\">      <span class=\"comment\">// arrayBuffer</span></span><br><span class=\"line\">      arrayBuffer: <span class=\"literal\">null</span>, </span><br><span class=\"line\">      <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">      fileName: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">      fileSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 文件页数</span></span><br><span class=\"line\">      filePage: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取文件内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">convertFile</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;input&#x27;</span>).files</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!file.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;name, size&#125; = file[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">this</span>, &#123;<span class=\"attr\">fileName</span>: name, <span class=\"attr\">fileSize</span>: size/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>&#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fileReader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">      <span class=\"comment\">// 异步按字节读取文件内容，结果用ArrayBuffer对象表示</span></span><br><span class=\"line\">      fileReader.readAsArrayBuffer(file[<span class=\"number\">0</span>])</span><br><span class=\"line\">      fileReader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arrayBuffer = <span class=\"built_in\">this</span>.arrayBuffer = e.target.result</span><br><span class=\"line\">        <span class=\"comment\">// 创建canvas节点</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.createCanvas(arrayBuffer)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建canvas</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">createCanvas</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清空节点下数据</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).innerHTML = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用getTextContent获取pdf内容</span></span><br><span class=\"line\">      PDFJS.getDocument(val).promise.then(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> filePage = <span class=\"built_in\">this</span>.filePage = el.numPages</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= filePage; i ++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">          canvas.id = <span class=\"string\">`pageNum-<span class=\"subst\">$&#123;i&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> context = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).append(canvas)</span><br><span class=\"line\">          <span class=\"comment\">// 渲染canvas</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.openPage(el, i, context)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 渲染canvas</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">openPage</span>(<span class=\"params\">pdfFile, pageNumber, context</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取PDF文档中的各个页面</span></span><br><span class=\"line\">      pdfFile.getPage(pageNumber).then(<span class=\"function\"><span class=\"params\">page</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置展示比例</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> scale = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取pdf尺寸</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> viewport = page.getViewport(scale)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> canvas = context.canvas</span><br><span class=\"line\">        canvas.width = viewport.width</span><br><span class=\"line\">        canvas.height = viewport.height</span><br><span class=\"line\">        canvas.style.width = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\">        canvas.style.height = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> model = &#123;</span><br><span class=\"line\">          canvasContext: context,</span><br><span class=\"line\">          viewport: viewport,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 渲染PDF</span></span><br><span class=\"line\">        page.render(model)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存图片</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">onExportImg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!<span class=\"built_in\">this</span>.arrayBuffer) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`请上传pdf文件`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> jszip = <span class=\"keyword\">new</span> JSZIP()</span><br><span class=\"line\">      <span class=\"comment\">// 解压缩后的文件夹名称</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> images = jszip.folder(<span class=\"string\">&quot;images&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> eleList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 遍历所有canvas节点</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; eleList.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`pageNum-<span class=\"subst\">$&#123;i+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 向此文件夹中加入文件</span></span><br><span class=\"line\">        <span class=\"comment\">// toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi</span></span><br><span class=\"line\">        images.file(<span class=\"string\">`image-<span class=\"subst\">$&#123;i+<span class=\"number\">1</span>&#125;</span>.png`</span>, <span class=\"built_in\">this</span>.dataURLtoBlob(canvas.toDataURL(<span class=\"string\">&quot;image/png&quot;</span>, <span class=\"number\">1.0</span>)), &#123;</span><br><span class=\"line\">          base64: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 生成一个zip文件</span></span><br><span class=\"line\">      jszip.generateAsync(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;blob&quot;</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 FileSaver 保存下载 zip 文件</span></span><br><span class=\"line\">        FileSaver.saveAs(content, <span class=\"string\">&quot;pdfToImages.zip&quot;</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * dataURL 转成 Blob</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dataURLtoBlob</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> arr = val.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">          mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">          bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">          n = bstr.length,</span><br><span class=\"line\">          u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数</span></span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// new Blob(blobParts, [options]) 参数说明:</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. blobParts：数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString </span></span><br><span class=\"line\">      <span class=\"comment\">// 2. options：可选项，字典格式类型，可以指定如下两个属性：</span></span><br><span class=\"line\">      <span class=\"comment\">//    (1) type，默认值为 &quot;&quot;，它代表了将会被放入到blob中的数组内容的MIME类型。</span></span><br><span class=\"line\">      <span class=\"comment\">//    (2) endings，默认值为&quot;transparent&quot;，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： &quot;native&quot;，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； &quot;transparent&quot;，表示会保持blob中保存的结束符不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123; <span class=\"attr\">type</span>: mime &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">#page09 &#123;</span><br><span class=\"line\">  width: 1000px;</span><br><span class=\"line\">  margin: <span class=\"number\">0</span> auto;</span><br><span class=\"line\"></span><br><span class=\"line\">  .info-box &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    .input &#123;</span><br><span class=\"line\">      margin: 15px <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      #input &#123;</span><br><span class=\"line\">        width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">        height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .cell &#123;</span><br><span class=\"line\">      margin: 15px <span class=\"number\">0</span>;</span><br><span class=\"line\">      display: flex;  </span><br><span class=\"line\">      justify-content: space-around;</span><br><span class=\"line\"></span><br><span class=\"line\">      div &#123;</span><br><span class=\"line\">        margin-right: 20px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #container &#123;</span><br><span class=\"line\">    width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">    min-height: 850px;</span><br><span class=\"line\">    margin:  <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    border: 1px solid #eee;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas &#123;</span><br><span class=\"line\">      margin-bottom: 10px;</span><br><span class=\"line\">      border: 1px solid #ff6700;</span><br><span class=\"line\">      border-radius: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"四、相关知识点\"><a href=\"#四、相关知识点\" class=\"headerlink\" title=\"四、相关知识点\"></a>四、相关知识点</h3><h4 id=\"1-使用-FileReader-进行文件读取\"><a href=\"#1-使用-FileReader-进行文件读取\" class=\"headerlink\" title=\"1. 使用 FileReader 进行文件读取\"></a>1. 使用 FileReader 进行文件读取</h4><blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/hhhyaaon/p/5929492.html\" >[HTML5] FileReader对象<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1）创建实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileReader = <span class=\"keyword\">new</span> FileReader()</span><br></pre></td></tr></table></figure>\n\n\n<p>（2）方法</p>\n<table>\n<thead>\n<tr>\n<th>方法定义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abort():void</td>\n<td>终止文件读取操作</td>\n</tr>\n<tr>\n<td>readAsArrayBuffer(file):void</td>\n<td>异步按字节读取文件内容，结果用ArrayBuffer对象表示</td>\n</tr>\n<tr>\n<td>readAsBinaryString(file):void</td>\n<td>异步按字节读取文件内容，结果为文件的二进制串</td>\n</tr>\n<tr>\n<td>readAsDataURL(file):void</td>\n<td>异步读取文件内容，结果用data:url的字符串形式表示</td>\n</tr>\n<tr>\n<td>readAsText(file,encoding):void</td>\n<td>异步按字符读取文件内容，结果用字符串形式表示</td>\n</tr>\n</tbody></table>\n<p>（3）事件： FileReader 通过异步的方式读取文件内容，结果均是通过事件回调获取。</p>\n<table>\n<thead>\n<tr>\n<th>方法定义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onabort</td>\n<td>当读取操作被中止时调用</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当读取操作发生错误时调用</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当读取操作成功完成时调用</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当读取操作完成时调用,不管是成功还是失败</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>当读取操作将要开始之前调用</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>在读取数据过程中周期性调用</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"2-使用-canvas-的-toDataURL-方法返回-包含-data-URI-的DOMString\"><a href=\"#2-使用-canvas-的-toDataURL-方法返回-包含-data-URI-的DOMString\" class=\"headerlink\" title=\"2. 使用 canvas 的 toDataURL() 方法返回 包含 data URI 的DOMString\"></a>2. 使用 canvas 的 <code>toDataURL()</code> 方法返回 包含 data URI 的DOMString</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`canvas`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. type（可选）：图片格式，默认为 image/png</span></span><br><span class=\"line\"><span class=\"comment\">// 2. encoderOptions（可选）：在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = canvas.toDataURL(<span class=\"string\">&quot;image/png&quot;</span>, <span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\" >MDN: HTMLCanvasElement.toDataURL()<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<br>\n\n\n<h4 id=\"3-ArrayBuffer-二进制数组\"><a href=\"#3-ArrayBuffer-二进制数组\" class=\"headerlink\" title=\"3. ArrayBuffer 二进制数组\"></a>3. ArrayBuffer 二进制数组</h4><blockquote>\n<p><a class=\"link\"   href=\"https://zh.javascript.info/arraybuffer-binary-arrays\" >ArrayBuffer，二进制数组<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1） JS 中的二进制数据格式，例：ArrayBuffer，Uint8Array，DataView，Blob，File 及其他。</p>\n<p><strong>基本的二进制对象是 ArrayBuffer —— 对固定长度的连续内存空间的引用。</strong></p>\n<p>（2）如要操作 ArrayBuffer，我们需要使用“视图”对象。 视图对象本身并不存储任何东西。它是一副“眼镜”，透过它来解释存储在 ArrayBuffer 中的字节。例如下：</p>\n<table>\n<thead>\n<tr>\n<th>视图类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Uint8Array</td>\n<td>将 ArrayBuffer 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Uint16Array</td>\n<td>将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Uint32Array</td>\n<td>将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Float64Array</td>\n<td>将每 8 个字节视为一个 5.0x10-324 到 1.8x10308 之间的浮点数。</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"3-Blob\"><a href=\"#3-Blob\" class=\"headerlink\" title=\"3. Blob\"></a>3. Blob</h4><blockquote>\n<p><a class=\"link\"   href=\"https://segmentfault.com/a/1190000011563430\" >细说Web API中的Blob<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1）概述： Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<p>（2）创建 Blob 对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">// 1. blobParts： 数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString</span></span><br><span class=\"line\"><span class=\"comment\">// 2. options：可选项，字典格式类型，可以指定如下两个属性：</span></span><br><span class=\"line\"></span><br><span class=\"line\">type，默认值为 <span class=\"string\">&quot;&quot;</span>，它代表了将会被放入到blob中的数组内容的MIME类型。</span><br><span class=\"line\">endings，默认值为<span class=\"string\">&quot;transparent&quot;</span>，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： <span class=\"string\">&quot;native&quot;</span>，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； <span class=\"string\">&quot;transparent&quot;</span>，表示会保持blob中保存的结束符不变。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob(blobParts[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data1 = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data2 = &#123; <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;abc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob1 = <span class=\"keyword\">new</span> Blob([data1])</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob2 = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(data4)])</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob3 = <span class=\"keyword\">new</span> Blob([data4])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob1);  <span class=\"comment\">// Blob &#123;size: 1, type: &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob2);  <span class=\"comment\">// Blob &#123;size: 14, type: &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob3);  <span class=\"comment\">// Blob &#123;size: 15, type: &quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>size代表Blob 对象中所包含数据的字节数。这里要注意，使用字符串和普通对象创建Blob时的不同，blob4使用通过JSON.stringify把data4对象转换成json字符串，blob5则直接使用data4创建，两个对象的size分别为14和15。blob4的size等于14很容易理解，因为JSON.stringify(data4)的结果为：”{“name”:”abc”}”，正好14个字节(不包含最外层的引号)。blob5的size等于15是如何计算而来的呢？实际上，当使用普通对象创建Blob对象时，相当于调用了普通对象的toString()方法得到字符串数据，然后再创建Blob对象。所以，blob5保存的数据是”[object Object]”，是15个字节(不包含最外层的引号)。</p>\n</blockquote>\n<p>（3）Blob 方法： slice()</p>\n<p>（4）Blob使用场景</p>\n<ul>\n<li>分片上传</li>\n<li>Blob URL</li>\n</ul>\n<br>\n\n<blockquote>\n<p><a class=\"link\"   href=\"https://xxlllq.github.io/readme/2018/05/09/pdf2img.html\" >PDF转成图片<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、实现效果\"><a href=\"#一、实现效果\" class=\"headerlink\" title=\"一、实现效果\"></a>一、实现效果</h3><p>选择本地 pdf 文件上传，会生成 pdf 文件的预览，点击保存功能。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165147927-1392643265.png\" alt=\"预览图1\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165256769-1608228895.png\" alt=\"预览图2\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202010/1855591-20201022165306613-1977214439.png\" alt=\"预览图3\"></p>\n<br>\n\n<h3 id=\"二、所用插件\"><a href=\"#二、所用插件\" class=\"headerlink\" title=\"二、所用插件\"></a>二、所用插件</h3><ol>\n<li>pdf文件相关的文件处理插件：<code>pdfjs-dist@2.3.200</code></li>\n<li>zip压缩文件相关的包： <code>jszip@3.5.0</code></li>\n<li>文件保存下载相关的包：<code>file-saver@2.0.2</code></li>\n</ol>\n<br>\n\n<h3 id=\"三、相关代码\"><a href=\"#三、相关代码\" class=\"headerlink\" title=\"三、相关代码\"></a>三、相关代码</h3><blockquote>\n<p>vue 中测试</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">10</span>-<span class=\"number\">21</span> <span class=\"number\">10</span>:<span class=\"number\">44</span>:<span class=\"number\">54</span></span><br><span class=\"line\"> * @information: pdf 转图片并下载</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;page09&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;info-box&quot;</span>&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;input&quot;</span>&gt;</span><br><span class=\"line\">        &lt;input id=<span class=\"string\">&quot;input&quot;</span> type=<span class=\"string\">&quot;file&quot;</span> accept=<span class=\"string\">&quot;application/pdf&quot;</span> @change=<span class=\"string\">&quot;convertFile()&quot;</span>/&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;cell&quot;</span>&gt;</span><br><span class=\"line\">        &lt;div&gt;名称：&#123;&#123;fileName || <span class=\"string\">&#x27;-&#x27;</span>&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;大小：&#123;&#123;<span class=\"built_in\">Number</span>(fileSize).toFixed(<span class=\"number\">2</span>)&#125;&#125;M&lt;/div&gt;</span><br><span class=\"line\">        &lt;div&gt;页数：&#123;&#123;filePage&#125;&#125;&lt;/div&gt;</span><br><span class=\"line\">        &lt;button @click=<span class=\"string\">&quot;onExportImg&quot;</span>&gt;保存图片&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=<span class=\"string\">&quot;container&quot;</span>&gt;&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PDFJS <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pdfjs-dist&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> JSZIP <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jszip&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> FileSaver <span class=\"keyword\">from</span> <span class=\"string\">&#x27;file-saver&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// pdf地址</span></span><br><span class=\"line\">      pdfPath2: <span class=\"string\">`https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf`</span>,</span><br><span class=\"line\">      <span class=\"comment\">// arrayBuffer</span></span><br><span class=\"line\">      arrayBuffer: <span class=\"literal\">null</span>, </span><br><span class=\"line\">      <span class=\"comment\">// 文件名称</span></span><br><span class=\"line\">      fileName: <span class=\"literal\">null</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 文件大小</span></span><br><span class=\"line\">      fileSize: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 文件页数</span></span><br><span class=\"line\">      filePage: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 读取文件内容</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">convertFile</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;input&#x27;</span>).files</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!file.length) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> &#123;name, size&#125; = file[<span class=\"number\">0</span>]</span><br><span class=\"line\">      <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">this</span>, &#123;<span class=\"attr\">fileName</span>: name, <span class=\"attr\">fileSize</span>: size/<span class=\"number\">1024</span>/<span class=\"number\">1024</span>&#125;)</span><br><span class=\"line\">      <span class=\"comment\">// 使用FileReader对象，web应用程序可以异步的读取存储在用户计算机上的文件(或者原始数据缓冲)内容，可以使用File对象或者Blob对象来指定所要处理的文件或数据</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> fileReader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">      <span class=\"comment\">// 异步按字节读取文件内容，结果用ArrayBuffer对象表示</span></span><br><span class=\"line\">      fileReader.readAsArrayBuffer(file[<span class=\"number\">0</span>])</span><br><span class=\"line\">      fileReader.onload = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> arrayBuffer = <span class=\"built_in\">this</span>.arrayBuffer = e.target.result</span><br><span class=\"line\">        <span class=\"comment\">// 创建canvas节点</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.createCanvas(arrayBuffer)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建canvas</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">createCanvas</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 清空节点下数据</span></span><br><span class=\"line\">      <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).innerHTML = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用getTextContent获取pdf内容</span></span><br><span class=\"line\">      PDFJS.getDocument(val).promise.then(<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> filePage = <span class=\"built_in\">this</span>.filePage = el.numPages</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= filePage; i ++) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">          canvas.id = <span class=\"string\">`pageNum-<span class=\"subst\">$&#123;i&#125;</span>`</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> context = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">          <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).append(canvas)</span><br><span class=\"line\">          <span class=\"comment\">// 渲染canvas</span></span><br><span class=\"line\">          <span class=\"built_in\">this</span>.openPage(el, i, context)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 渲染canvas</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">openPage</span>(<span class=\"params\">pdfFile, pageNumber, context</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 获取PDF文档中的各个页面</span></span><br><span class=\"line\">      pdfFile.getPage(pageNumber).then(<span class=\"function\"><span class=\"params\">page</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 设置展示比例</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> scale = <span class=\"number\">3</span></span><br><span class=\"line\">        <span class=\"comment\">// 获取pdf尺寸</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> viewport = page.getViewport(scale)</span><br><span class=\"line\">        <span class=\"keyword\">let</span> canvas = context.canvas</span><br><span class=\"line\">        canvas.width = viewport.width</span><br><span class=\"line\">        canvas.height = viewport.height</span><br><span class=\"line\">        canvas.style.width = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\">        canvas.style.height = <span class=\"string\">&quot;100%&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">let</span> model = &#123;</span><br><span class=\"line\">          canvasContext: context,</span><br><span class=\"line\">          viewport: viewport,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 渲染PDF</span></span><br><span class=\"line\">        page.render(model)</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 保存图片</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">onExportImg</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(!<span class=\"built_in\">this</span>.arrayBuffer) &#123;</span><br><span class=\"line\">        alert(<span class=\"string\">`请上传pdf文件`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">let</span> jszip = <span class=\"keyword\">new</span> JSZIP()</span><br><span class=\"line\">      <span class=\"comment\">// 解压缩后的文件夹名称</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> images = jszip.folder(<span class=\"string\">&quot;images&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> eleList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 遍历所有canvas节点</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; eleList.length; i ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`pageNum-<span class=\"subst\">$&#123;i+<span class=\"number\">1</span>&#125;</span>`</span>)</span><br><span class=\"line\">        <span class=\"comment\">// 向此文件夹中加入文件</span></span><br><span class=\"line\">        <span class=\"comment\">// toDataURL() 方法返回一个包含图片展示的 data URI 。可以使用 type 参数其类型，默认为 PNG 格式。图片的分辨率为96dpi</span></span><br><span class=\"line\">        images.file(<span class=\"string\">`image-<span class=\"subst\">$&#123;i+<span class=\"number\">1</span>&#125;</span>.png`</span>, <span class=\"built_in\">this</span>.dataURLtoBlob(canvas.toDataURL(<span class=\"string\">&quot;image/png&quot;</span>, <span class=\"number\">1.0</span>)), &#123;</span><br><span class=\"line\">          base64: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 生成一个zip文件</span></span><br><span class=\"line\">      jszip.generateAsync(&#123;</span><br><span class=\"line\">        type: <span class=\"string\">&quot;blob&quot;</span></span><br><span class=\"line\">      &#125;).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 FileSaver 保存下载 zip 文件</span></span><br><span class=\"line\">        FileSaver.saveAs(content, <span class=\"string\">&quot;pdfToImages.zip&quot;</span>);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * dataURL 转成 Blob</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">dataURLtoBlob</span>(<span class=\"params\">val</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> arr = val.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">          mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">          bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">          n = bstr.length,</span><br><span class=\"line\">          u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// charCodeAt() 方法可返回指定位置的字符的 Unicode 编码。这个返回值是 0 - 65535 之间的整数</span></span><br><span class=\"line\">        u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// new Blob(blobParts, [options]) 参数说明:</span></span><br><span class=\"line\">      <span class=\"comment\">// 1. blobParts：数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString </span></span><br><span class=\"line\">      <span class=\"comment\">// 2. options：可选项，字典格式类型，可以指定如下两个属性：</span></span><br><span class=\"line\">      <span class=\"comment\">//    (1) type，默认值为 &quot;&quot;，它代表了将会被放入到blob中的数组内容的MIME类型。</span></span><br><span class=\"line\">      <span class=\"comment\">//    (2) endings，默认值为&quot;transparent&quot;，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： &quot;native&quot;，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； &quot;transparent&quot;，表示会保持blob中保存的结束符不变</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123; <span class=\"attr\">type</span>: mime &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style lang=<span class=\"string\">&quot;scss&quot;</span>&gt;</span><br><span class=\"line\">#page09 &#123;</span><br><span class=\"line\">  width: 1000px;</span><br><span class=\"line\">  margin: <span class=\"number\">0</span> auto;</span><br><span class=\"line\"></span><br><span class=\"line\">  .info-box &#123;</span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\"></span><br><span class=\"line\">    .input &#123;</span><br><span class=\"line\">      margin: 15px <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      #input &#123;</span><br><span class=\"line\">        width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">        height: <span class=\"number\">100</span>%;</span><br><span class=\"line\">        cursor: pointer;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    .cell &#123;</span><br><span class=\"line\">      margin: 15px <span class=\"number\">0</span>;</span><br><span class=\"line\">      display: flex;  </span><br><span class=\"line\">      justify-content: space-around;</span><br><span class=\"line\"></span><br><span class=\"line\">      div &#123;</span><br><span class=\"line\">        margin-right: 20px;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #container &#123;</span><br><span class=\"line\">    width: <span class=\"number\">100</span>%;</span><br><span class=\"line\">    min-height: 850px;</span><br><span class=\"line\">    margin:  <span class=\"number\">0</span> auto;</span><br><span class=\"line\">    border: 1px solid #eee;</span><br><span class=\"line\">    border-radius: 10px;</span><br><span class=\"line\"></span><br><span class=\"line\">    canvas &#123;</span><br><span class=\"line\">      margin-bottom: 10px;</span><br><span class=\"line\">      border: 1px solid #ff6700;</span><br><span class=\"line\">      border-radius: 10px;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"四、相关知识点\"><a href=\"#四、相关知识点\" class=\"headerlink\" title=\"四、相关知识点\"></a>四、相关知识点</h3><h4 id=\"1-使用-FileReader-进行文件读取\"><a href=\"#1-使用-FileReader-进行文件读取\" class=\"headerlink\" title=\"1. 使用 FileReader 进行文件读取\"></a>1. 使用 FileReader 进行文件读取</h4><blockquote>\n<p><a class=\"link\"   href=\"https://www.cnblogs.com/hhhyaaon/p/5929492.html\" >[HTML5] FileReader对象<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1）创建实例</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fileReader = <span class=\"keyword\">new</span> FileReader()</span><br></pre></td></tr></table></figure>\n\n\n<p>（2）方法</p>\n<table>\n<thead>\n<tr>\n<th>方法定义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>abort():void</td>\n<td>终止文件读取操作</td>\n</tr>\n<tr>\n<td>readAsArrayBuffer(file):void</td>\n<td>异步按字节读取文件内容，结果用ArrayBuffer对象表示</td>\n</tr>\n<tr>\n<td>readAsBinaryString(file):void</td>\n<td>异步按字节读取文件内容，结果为文件的二进制串</td>\n</tr>\n<tr>\n<td>readAsDataURL(file):void</td>\n<td>异步读取文件内容，结果用data:url的字符串形式表示</td>\n</tr>\n<tr>\n<td>readAsText(file,encoding):void</td>\n<td>异步按字符读取文件内容，结果用字符串形式表示</td>\n</tr>\n</tbody></table>\n<p>（3）事件： FileReader 通过异步的方式读取文件内容，结果均是通过事件回调获取。</p>\n<table>\n<thead>\n<tr>\n<th>方法定义</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onabort</td>\n<td>当读取操作被中止时调用</td>\n</tr>\n<tr>\n<td>onerror</td>\n<td>当读取操作发生错误时调用</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>当读取操作成功完成时调用</td>\n</tr>\n<tr>\n<td>onloadend</td>\n<td>当读取操作完成时调用,不管是成功还是失败</td>\n</tr>\n<tr>\n<td>onloadstart</td>\n<td>当读取操作将要开始之前调用</td>\n</tr>\n<tr>\n<td>onprogress</td>\n<td>在读取数据过程中周期性调用</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"2-使用-canvas-的-toDataURL-方法返回-包含-data-URI-的DOMString\"><a href=\"#2-使用-canvas-的-toDataURL-方法返回-包含-data-URI-的DOMString\" class=\"headerlink\" title=\"2. 使用 canvas 的 toDataURL() 方法返回 包含 data URI 的DOMString\"></a>2. 使用 canvas 的 <code>toDataURL()</code> 方法返回 包含 data URI 的DOMString</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">`canvas`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数说明：</span></span><br><span class=\"line\"><span class=\"comment\">// 1. type（可选）：图片格式，默认为 image/png</span></span><br><span class=\"line\"><span class=\"comment\">// 2. encoderOptions（可选）：在指定图片格式为 image/jpeg 或 image/webp的情况下，可以从 0 到 1 的区间内选择图片的质量。如果超出取值范围，将会使用默认值 0.92。其他参数会被忽略。</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = canvas.toDataURL(<span class=\"string\">&quot;image/png&quot;</span>, <span class=\"number\">1.0</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL\" >MDN: HTMLCanvasElement.toDataURL()<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<br>\n\n\n<h4 id=\"3-ArrayBuffer-二进制数组\"><a href=\"#3-ArrayBuffer-二进制数组\" class=\"headerlink\" title=\"3. ArrayBuffer 二进制数组\"></a>3. ArrayBuffer 二进制数组</h4><blockquote>\n<p><a class=\"link\"   href=\"https://zh.javascript.info/arraybuffer-binary-arrays\" >ArrayBuffer，二进制数组<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1） JS 中的二进制数据格式，例：ArrayBuffer，Uint8Array，DataView，Blob，File 及其他。</p>\n<p><strong>基本的二进制对象是 ArrayBuffer —— 对固定长度的连续内存空间的引用。</strong></p>\n<p>（2）如要操作 ArrayBuffer，我们需要使用“视图”对象。 视图对象本身并不存储任何东西。它是一副“眼镜”，透过它来解释存储在 ArrayBuffer 中的字节。例如下：</p>\n<table>\n<thead>\n<tr>\n<th>视图类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Uint8Array</td>\n<td>将 ArrayBuffer 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Uint16Array</td>\n<td>将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Uint32Array</td>\n<td>将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”。</td>\n</tr>\n<tr>\n<td>Float64Array</td>\n<td>将每 8 个字节视为一个 5.0x10-324 到 1.8x10308 之间的浮点数。</td>\n</tr>\n</tbody></table>\n<br>\n\n<h4 id=\"3-Blob\"><a href=\"#3-Blob\" class=\"headerlink\" title=\"3. Blob\"></a>3. Blob</h4><blockquote>\n<p><a class=\"link\"   href=\"https://segmentfault.com/a/1190000011563430\" >细说Web API中的Blob<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p>（1）概述： Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<p>（2）创建 Blob 对象</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数说明</span></span><br><span class=\"line\"><span class=\"comment\">// 1. blobParts： 数组类型，数组中的每一项连接起来构成Blob对象的数据，数组中的每项元素可以是ArrayBuffer, ArrayBufferView, Blob, DOMString</span></span><br><span class=\"line\"><span class=\"comment\">// 2. options：可选项，字典格式类型，可以指定如下两个属性：</span></span><br><span class=\"line\"></span><br><span class=\"line\">type，默认值为 <span class=\"string\">&quot;&quot;</span>，它代表了将会被放入到blob中的数组内容的MIME类型。</span><br><span class=\"line\">endings，默认值为<span class=\"string\">&quot;transparent&quot;</span>，用于指定包含行结束符\\n的字符串如何被写入。 它是以下两个值中的一个： <span class=\"string\">&quot;native&quot;</span>，表示行结束符会被更改为适合宿主操作系统文件系统的换行符； <span class=\"string\">&quot;transparent&quot;</span>，表示会保持blob中保存的结束符不变。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob = <span class=\"keyword\">new</span> Blob(blobParts[, options])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> data1 = <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> data2 = &#123; <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;abc&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> blob1 = <span class=\"keyword\">new</span> Blob([data1])</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob2 = <span class=\"keyword\">new</span> Blob([<span class=\"built_in\">JSON</span>.stringify(data4)])</span><br><span class=\"line\"><span class=\"keyword\">let</span> blob3 = <span class=\"keyword\">new</span> Blob([data4])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob1);  <span class=\"comment\">// Blob &#123;size: 1, type: &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob2);  <span class=\"comment\">// Blob &#123;size: 14, type: &quot;&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(blob3);  <span class=\"comment\">// Blob &#123;size: 15, type: &quot;&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>size代表Blob 对象中所包含数据的字节数。这里要注意，使用字符串和普通对象创建Blob时的不同，blob4使用通过JSON.stringify把data4对象转换成json字符串，blob5则直接使用data4创建，两个对象的size分别为14和15。blob4的size等于14很容易理解，因为JSON.stringify(data4)的结果为：”{“name”:”abc”}”，正好14个字节(不包含最外层的引号)。blob5的size等于15是如何计算而来的呢？实际上，当使用普通对象创建Blob对象时，相当于调用了普通对象的toString()方法得到字符串数据，然后再创建Blob对象。所以，blob5保存的数据是”[object Object]”，是15个字节(不包含最外层的引号)。</p>\n</blockquote>\n<p>（3）Blob 方法： slice()</p>\n<p>（4）Blob使用场景</p>\n<ul>\n<li>分片上传</li>\n<li>Blob URL</li>\n</ul>\n<br>\n\n<blockquote>\n<p><a class=\"link\"   href=\"https://xxlllq.github.io/readme/2018/05/09/pdf2img.html\" >PDF转成图片<i class=\"fas fa-external-link-alt\"></i></a></p>\n</blockquote>\n<p><br><br></p>\n"},{"title":"File、Blob、dataURL和canvas的应用与转换","date":"2020-12-12T10:19:25.000Z","_content":"\n\n\n## 一、 概念介绍\n\n### 1. [File](https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n\n(1) 通常情况下， File 对象是来自用户在一个 `<input>` 元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。\n\n(2) File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。比如：FileReader, URL.createObjectURL(), createImageBitmap(), 及 XMLHttpRequest.send() 都能处理 Blob 和 File。\n\n<br>\n\n\n### 2. [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n\n(1) Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。\n\n(2) Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n<br>\n\n### 3. [dataURL](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs)\n\n(1) Data URLs，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。\n\n(2) Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：data:[<mediatype>][;base64],<data>\n\n<br>\n\n### 4. [canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n\n(1) Canvas API 提供了一个通过JavaScript 和 HTML的 `<canvas>` 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。\n\n<br>\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201202084724368-40559622.jpg)\n\n## 二、相互转化\n\n### 1. File、Blob 转化成 dataURL\n\n> FileReader 对象允许 Web 应用程序异步读取文件(或原始数据缓冲区)内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n```javascript\nfunction fileToDataURL(file) {\n    let reader = new FileReader()\n    reader.readAsDataURL(file)\n    // reader 读取文件成功的回调\n    reader.onload = function(e) {\n      return reader.result\n    }\n}\n```\n\n<br>\n\n### 2. dataURL(base64) 转化成 Blob(二进制)对象\n\n```javascript\nfunction dataURLToBlob(fileDataURL) {\n    let arr = fileDataURL.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while(n --) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    return new Blob([u8arr], {type: mime})\n}\n```\n<br>\n\n### 3. File, Blob 文件数据绘制到 canvas\n\n```javascript\n// 思路：File, Blob ——> dataURL ——> canvas\n\nfunction fileAndBlobToCanvas(fileDataURL) {\n    let img = new Image()\n    img.src = fileDataURL\n    let canvas = document.createElement('canvas')\n    if(!canvas.getContext) {\n      alert('浏览器不支持canvas')\n      return;\n    }\n    let ctx = canvas.getContext('2d')\n    document.getElementById('container').appendChild(canvas)\n    img.onload = function() {\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n    }\n}\n```\n\n<br>\n\n### 4. 从 canvas 中获取文件 dataURL \n\n```javascript\nfunction canvasToDataURL() {\n    let canvas = document.createElement('canvas')\n    let canvasDataURL = canvas.toDataURL('image/png', 1.0)\n    return canvasDataURL\n}\n```\n\n<br>\n\n## 三、完整栗子\n\n> 可以点击 [这里](http://8.131.67.8:8088/file.html) 在线预览\n\n![预览图](https://img2020.cnblogs.com/blog/1855591/202011/1855591-20201125144437125-1637282205.png)\n\n```javascript\n<!--\n * @Date: 2020-11-22 14:33:55\n * @information: datadURL File Blob canvas 的互相转化\n * \n * File.prototype instanceof Blob === true\n * Blob.prototype instanceof Object === true\n-->\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>datadURL File Blob canvas</title>\n  <style>\n    .body {\n      text-align: center;\n    }\n    .img-box {\n      margin: 20px 0;\n    }\n    #img {\n      width: 60%;\n    }\n  </style>\n</head>\n<body>\n  \n  <div class=\"body\">\n\n    <div class=\"input-box\">\n      <input id=\"input\" type=\"file\" accept=\"image/png, image/jpeg\" onchange=\"onChangeInput()\">\n    </div>\n    \n    <div class=\"img-box\">\n      img: \n      <img src=\"\" alt=\"img\" id=\"img\">\n    </div>\n\n    <div class=\"canvas-box\" id=\"canvas-box\">\n      canvas: \n    </div>\n\n  </div>\n\n\n<script>\n  // 文件对象\n  let file; \n  // 文件 base64 码\n  let fileDataURL;\n\n\n  /**\n   * @Date: 2020-11-25 10:32:51\n   * @information: 获取文件\n   */\n  function onChangeInput() {\n    file = document.getElementById('input').files[0]\n    console.log('file->', file)\n    if(!FileReader) {\n      alert('浏览器版本过低，请升级版本')\n      return;\n    }\n    fileToDataURL()\n  }\n  \n  /**\n   * @Date: 2020-11-25 10:31:47\n   * @information: 使用 FileReader 读取文件内容， File(二进制) ——> dataURL(base64)   Blob ——> dataURL 同理\n   */\n  function fileToDataURL() {\n    let reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = function(e) {\n      console.log('dataURL->', reader.result)\n      fileDataURL = reader.result\n      showImg()\n      dataURLToBlob()\n    }\n  }\n\n  /**\n   * @Date: 2020-11-25 10:33:13\n   * @information: 图片回显\n   */\n  function showImg() {\n    let img = document.getElementById('img')\n    img.src = fileDataURL\n  }\n\n  /**\n   * @Date: 2020-11-25 10:34:47\n   * @information: dataURL(base64) ——> Blob(二进制)对象\n   */\n  function dataURLToBlob() {\n    let arr = fileDataURL.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while(n --) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    console.log('blob->', new Blob([u8arr], {type: mime}))\n    fileAndBlobToCanvas()\n    return new Blob([u8arr], {type: mime})\n  }\n\n  /**\n   * @Date: 2020-11-25 10:53:31\n   * @information: File, Blob 文件数据绘制到 canvas\n   * 思路：File, Blob ——> dataURL ——> canvas\n   */\n  function fileAndBlobToCanvas() {\n    let img = new Image()\n    img.src = fileDataURL\n    let canvas = document.createElement('canvas')\n    if(!canvas.getContext) {\n      alert('浏览器不支持canvas')\n      return;\n    }\n    let ctx = canvas.getContext('2d')\n    document.getElementById('canvas-box').appendChild(canvas)\n    img.onload = function() {\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n      canvasToDataURL()\n    }\n  }\n\n  /**\n   * @Date: 2020-11-25 11:23:54\n   * @information: 从 canvas 中获取文件 dataURL \n   */\n  function canvasToDataURL() {\n    let canvas = document.createElement('canvas')\n    let canvasDataURL = canvas.toDataURL('image/png', 1.0)\n    console.log('从 canvas 中获取文件 dataURL :', canvasDataURL)\n  }\n\n</script>\n\n</body>\n</html>\n\n```\n\n<br><br><br><br>\n\n","source":"_posts/File、Blob、dataURL和canvas的应用与转换.md","raw":"---\ntitle: File、Blob、dataURL和canvas的应用与转换\ndate: 2020-12-12 18:19:25\ntags: file\ncategories: JavaScript\n---\n\n\n\n## 一、 概念介绍\n\n### 1. [File](https://developer.mozilla.org/zh-CN/docs/Web/API/File)\n\n(1) 通常情况下， File 对象是来自用户在一个 `<input>` 元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。\n\n(2) File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。比如：FileReader, URL.createObjectURL(), createImageBitmap(), 及 XMLHttpRequest.send() 都能处理 Blob 和 File。\n\n<br>\n\n\n### 2. [Blob](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob)\n\n(1) Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。\n\n(2) Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。\n\n<br>\n\n### 3. [dataURL](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs)\n\n(1) Data URLs，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。\n\n(2) Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：data:[<mediatype>][;base64],<data>\n\n<br>\n\n### 4. [canvas](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n\n(1) Canvas API 提供了一个通过JavaScript 和 HTML的 `<canvas>` 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。\n\n<br>\n\n![关系图](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201202084724368-40559622.jpg)\n\n## 二、相互转化\n\n### 1. File、Blob 转化成 dataURL\n\n> FileReader 对象允许 Web 应用程序异步读取文件(或原始数据缓冲区)内容，使用 File 或 Blob 对象指定要读取的文件或数据。\n\n```javascript\nfunction fileToDataURL(file) {\n    let reader = new FileReader()\n    reader.readAsDataURL(file)\n    // reader 读取文件成功的回调\n    reader.onload = function(e) {\n      return reader.result\n    }\n}\n```\n\n<br>\n\n### 2. dataURL(base64) 转化成 Blob(二进制)对象\n\n```javascript\nfunction dataURLToBlob(fileDataURL) {\n    let arr = fileDataURL.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while(n --) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    return new Blob([u8arr], {type: mime})\n}\n```\n<br>\n\n### 3. File, Blob 文件数据绘制到 canvas\n\n```javascript\n// 思路：File, Blob ——> dataURL ——> canvas\n\nfunction fileAndBlobToCanvas(fileDataURL) {\n    let img = new Image()\n    img.src = fileDataURL\n    let canvas = document.createElement('canvas')\n    if(!canvas.getContext) {\n      alert('浏览器不支持canvas')\n      return;\n    }\n    let ctx = canvas.getContext('2d')\n    document.getElementById('container').appendChild(canvas)\n    img.onload = function() {\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n    }\n}\n```\n\n<br>\n\n### 4. 从 canvas 中获取文件 dataURL \n\n```javascript\nfunction canvasToDataURL() {\n    let canvas = document.createElement('canvas')\n    let canvasDataURL = canvas.toDataURL('image/png', 1.0)\n    return canvasDataURL\n}\n```\n\n<br>\n\n## 三、完整栗子\n\n> 可以点击 [这里](http://8.131.67.8:8088/file.html) 在线预览\n\n![预览图](https://img2020.cnblogs.com/blog/1855591/202011/1855591-20201125144437125-1637282205.png)\n\n```javascript\n<!--\n * @Date: 2020-11-22 14:33:55\n * @information: datadURL File Blob canvas 的互相转化\n * \n * File.prototype instanceof Blob === true\n * Blob.prototype instanceof Object === true\n-->\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>datadURL File Blob canvas</title>\n  <style>\n    .body {\n      text-align: center;\n    }\n    .img-box {\n      margin: 20px 0;\n    }\n    #img {\n      width: 60%;\n    }\n  </style>\n</head>\n<body>\n  \n  <div class=\"body\">\n\n    <div class=\"input-box\">\n      <input id=\"input\" type=\"file\" accept=\"image/png, image/jpeg\" onchange=\"onChangeInput()\">\n    </div>\n    \n    <div class=\"img-box\">\n      img: \n      <img src=\"\" alt=\"img\" id=\"img\">\n    </div>\n\n    <div class=\"canvas-box\" id=\"canvas-box\">\n      canvas: \n    </div>\n\n  </div>\n\n\n<script>\n  // 文件对象\n  let file; \n  // 文件 base64 码\n  let fileDataURL;\n\n\n  /**\n   * @Date: 2020-11-25 10:32:51\n   * @information: 获取文件\n   */\n  function onChangeInput() {\n    file = document.getElementById('input').files[0]\n    console.log('file->', file)\n    if(!FileReader) {\n      alert('浏览器版本过低，请升级版本')\n      return;\n    }\n    fileToDataURL()\n  }\n  \n  /**\n   * @Date: 2020-11-25 10:31:47\n   * @information: 使用 FileReader 读取文件内容， File(二进制) ——> dataURL(base64)   Blob ——> dataURL 同理\n   */\n  function fileToDataURL() {\n    let reader = new FileReader()\n    reader.readAsDataURL(file)\n    reader.onload = function(e) {\n      console.log('dataURL->', reader.result)\n      fileDataURL = reader.result\n      showImg()\n      dataURLToBlob()\n    }\n  }\n\n  /**\n   * @Date: 2020-11-25 10:33:13\n   * @information: 图片回显\n   */\n  function showImg() {\n    let img = document.getElementById('img')\n    img.src = fileDataURL\n  }\n\n  /**\n   * @Date: 2020-11-25 10:34:47\n   * @information: dataURL(base64) ——> Blob(二进制)对象\n   */\n  function dataURLToBlob() {\n    let arr = fileDataURL.split(','),\n        mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]),\n        n = bstr.length,\n        u8arr = new Uint8Array(n);\n    while(n --) {\n      u8arr[n] = bstr.charCodeAt(n)\n    }\n    console.log('blob->', new Blob([u8arr], {type: mime}))\n    fileAndBlobToCanvas()\n    return new Blob([u8arr], {type: mime})\n  }\n\n  /**\n   * @Date: 2020-11-25 10:53:31\n   * @information: File, Blob 文件数据绘制到 canvas\n   * 思路：File, Blob ——> dataURL ——> canvas\n   */\n  function fileAndBlobToCanvas() {\n    let img = new Image()\n    img.src = fileDataURL\n    let canvas = document.createElement('canvas')\n    if(!canvas.getContext) {\n      alert('浏览器不支持canvas')\n      return;\n    }\n    let ctx = canvas.getContext('2d')\n    document.getElementById('canvas-box').appendChild(canvas)\n    img.onload = function() {\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n      canvasToDataURL()\n    }\n  }\n\n  /**\n   * @Date: 2020-11-25 11:23:54\n   * @information: 从 canvas 中获取文件 dataURL \n   */\n  function canvasToDataURL() {\n    let canvas = document.createElement('canvas')\n    let canvasDataURL = canvas.toDataURL('image/png', 1.0)\n    console.log('从 canvas 中获取文件 dataURL :', canvasDataURL)\n  }\n\n</script>\n\n</body>\n</html>\n\n```\n\n<br><br><br><br>\n\n","slug":"File、Blob、dataURL和canvas的应用与转换","published":1,"updated":"2020-12-12T10:34:34.932Z","_id":"ckiljt3wa0000ygqc6sw93i5k","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、-概念介绍\"><a href=\"#一、-概念介绍\" class=\"headerlink\" title=\"一、 概念介绍\"></a>一、 概念介绍</h2><h3 id=\"1-File\"><a href=\"#1-File\" class=\"headerlink\" title=\"1. File\"></a>1. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\" >File<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) 通常情况下， File 对象是来自用户在一个 <code>&lt;input&gt;</code> 元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。</p>\n<p>(2) File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。比如：FileReader, URL.createObjectURL(), createImageBitmap(), 及 XMLHttpRequest.send() 都能处理 Blob 和 File。</p>\n<br>\n\n\n<h3 id=\"2-Blob\"><a href=\"#2-Blob\" class=\"headerlink\" title=\"2. Blob\"></a>2. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" >Blob<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</p>\n<p>(2) Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<br>\n\n<h3 id=\"3-dataURL\"><a href=\"#3-dataURL\" class=\"headerlink\" title=\"3. dataURL\"></a>3. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs\" >dataURL<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Data URLs，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。</p>\n<p>(2) Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：data:[<mediatype>][;base64],<data></p>\n<br>\n\n<h3 id=\"4-canvas\"><a href=\"#4-canvas\" class=\"headerlink\" title=\"4. canvas\"></a>4. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" >canvas<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Canvas API 提供了一个通过JavaScript 和 HTML的 <code>&lt;canvas&gt;</code> 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。</p>\n<br>\n\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201202084724368-40559622.jpg\" alt=\"关系图\"></p>\n<h2 id=\"二、相互转化\"><a href=\"#二、相互转化\" class=\"headerlink\" title=\"二、相互转化\"></a>二、相互转化</h2><h3 id=\"1-File、Blob-转化成-dataURL\"><a href=\"#1-File、Blob-转化成-dataURL\" class=\"headerlink\" title=\"1. File、Blob 转化成 dataURL\"></a>1. File、Blob 转化成 dataURL</h3><blockquote>\n<p>FileReader 对象允许 Web 应用程序异步读取文件(或原始数据缓冲区)内容，使用 File 或 Blob 对象指定要读取的文件或数据。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileToDataURL</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsDataURL(file)</span><br><span class=\"line\">    <span class=\"comment\">// reader 读取文件成功的回调</span></span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"2-dataURL-base64-转化成-Blob-二进制-对象\"><a href=\"#2-dataURL-base64-转化成-Blob-二进制-对象\" class=\"headerlink\" title=\"2. dataURL(base64) 转化成 Blob(二进制)对象\"></a>2. dataURL(base64) 转化成 Blob(二进制)对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataURLToBlob</span>(<span class=\"params\">fileDataURL</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = fileDataURL.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">        mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">        bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">        n = bstr.length,</span><br><span class=\"line\">        u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">      u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"3-File-Blob-文件数据绘制到-canvas\"><a href=\"#3-File-Blob-文件数据绘制到-canvas\" class=\"headerlink\" title=\"3. File, Blob 文件数据绘制到 canvas\"></a>3. File, Blob 文件数据绘制到 canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 思路：File, Blob ——&gt; dataURL ——&gt; canvas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileAndBlobToCanvas</span>(<span class=\"params\">fileDataURL</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!canvas.getContext) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器不支持canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).appendChild(canvas)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"4-从-canvas-中获取文件-dataURL\"><a href=\"#4-从-canvas-中获取文件-dataURL\" class=\"headerlink\" title=\"4. 从 canvas 中获取文件 dataURL\"></a>4. 从 canvas 中获取文件 dataURL</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvasDataURL = canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> canvasDataURL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、完整栗子\"><a href=\"#三、完整栗子\" class=\"headerlink\" title=\"三、完整栗子\"></a>三、完整栗子</h2><blockquote>\n<p>可以点击 <a class=\"link\"   href=\"http://8.131.67.8:8088/file.html\" >这里<i class=\"fas fa-external-link-alt\"></i></a> 在线预览</p>\n</blockquote>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202011/1855591-20201125144437125-1637282205.png\" alt=\"预览图\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">33</span>:<span class=\"number\">55</span></span><br><span class=\"line\"> * @information: datadURL File Blob canvas 的互相转化</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * File.prototype <span class=\"keyword\">instanceof</span> Blob === <span class=\"literal\">true</span></span><br><span class=\"line\"> * Blob.prototype <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> === <span class=\"literal\">true</span></span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;datadURL File Blob canvas&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .body &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .img-box &#123;</span><br><span class=\"line\">      margin: 20px <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #img &#123;</span><br><span class=\"line\">      width: <span class=\"number\">60</span>%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;body&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;input-box&quot;</span>&gt;</span><br><span class=\"line\">      &lt;input id=<span class=\"string\">&quot;input&quot;</span> type=<span class=\"string\">&quot;file&quot;</span> accept=<span class=\"string\">&quot;image/png, image/jpeg&quot;</span> onchange=<span class=\"string\">&quot;onChangeInput()&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;img-box&quot;</span>&gt;</span><br><span class=\"line\">      img: </span><br><span class=\"line\">      &lt;img src=<span class=\"string\">&quot;&quot;</span> alt=<span class=\"string\">&quot;img&quot;</span> id=<span class=\"string\">&quot;img&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;canvas-box&quot;</span> id=<span class=\"string\">&quot;canvas-box&quot;</span>&gt;</span><br><span class=\"line\">      canvas: </span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 文件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> file; </span><br><span class=\"line\">  <span class=\"comment\">// 文件 base64 码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileDataURL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:32:51</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 获取文件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChangeInput</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;input&#x27;</span>).files[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;file-&gt;&#x27;</span>, file)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FileReader) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器版本过低，请升级版本&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileToDataURL()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:31:47</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 使用 FileReader 读取文件内容， File(二进制) ——&gt; dataURL(base64)   Blob ——&gt; dataURL 同理</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsDataURL(file)</span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;dataURL-&gt;&#x27;</span>, reader.result)</span><br><span class=\"line\">      fileDataURL = reader.result</span><br><span class=\"line\">      showImg()</span><br><span class=\"line\">      dataURLToBlob()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:33:13</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 图片回显</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:34:47</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: dataURL(base64) ——&gt; Blob(二进制)对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataURLToBlob</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = fileDataURL.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">        mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">        bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">        n = bstr.length,</span><br><span class=\"line\">        u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">      u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;blob-&gt;&#x27;</span>, <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;))</span><br><span class=\"line\">    fileAndBlobToCanvas()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:53:31</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: File, Blob 文件数据绘制到 canvas</span></span><br><span class=\"line\"><span class=\"comment\">   * 思路：File, Blob ——&gt; dataURL ——&gt; canvas</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileAndBlobToCanvas</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!canvas.getContext) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器不支持canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;canvas-box&#x27;</span>).appendChild(canvas)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height)</span><br><span class=\"line\">      canvasToDataURL()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 11:23:54</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 从 canvas 中获取文件 dataURL </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvasDataURL = canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;从 canvas 中获取文件 dataURL :&#x27;</span>, canvasDataURL)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、-概念介绍\"><a href=\"#一、-概念介绍\" class=\"headerlink\" title=\"一、 概念介绍\"></a>一、 概念介绍</h2><h3 id=\"1-File\"><a href=\"#1-File\" class=\"headerlink\" title=\"1. File\"></a>1. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/File\" >File<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) 通常情况下， File 对象是来自用户在一个 <code>&lt;input&gt;</code> 元素上选择文件后返回的 FileList 对象,也可以是来自由拖放操作生成的 DataTransfer 对象，或者来自 HTMLCanvasElement 上的 mozGetAsFile() API。</p>\n<p>(2) File 对象是特殊类型的 Blob，且可以用在任意的 Blob 类型的 context 中。比如：FileReader, URL.createObjectURL(), createImageBitmap(), 及 XMLHttpRequest.send() 都能处理 Blob 和 File。</p>\n<br>\n\n\n<h3 id=\"2-Blob\"><a href=\"#2-Blob\" class=\"headerlink\" title=\"2. Blob\"></a>2. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Blob\" >Blob<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Blob 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 ReadableStream 来用于数据操作。</p>\n<p>(2) Blob 表示的不一定是JavaScript原生格式的数据。File 接口基于Blob，继承了 blob 的功能并将其扩展使其支持用户系统上的文件。</p>\n<br>\n\n<h3 id=\"3-dataURL\"><a href=\"#3-dataURL\" class=\"headerlink\" title=\"3. dataURL\"></a>3. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/data_URIs\" >dataURL<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Data URLs，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。</p>\n<p>(2) Data URLs 由四个部分组成：前缀(data:)、指示数据类型的MIME类型、如果非文本则为可选的base64标记、数据本身：data:[<mediatype>][;base64],<data></p>\n<br>\n\n<h3 id=\"4-canvas\"><a href=\"#4-canvas\" class=\"headerlink\" title=\"4. canvas\"></a>4. <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" >canvas<i class=\"fas fa-external-link-alt\"></i></a></h3><p>(1) Canvas API 提供了一个通过JavaScript 和 HTML的 <code>&lt;canvas&gt;</code> 元素来绘制图形的方式。它可以用于动画、游戏画面、数据可视化、图片编辑以及实时视频处理等方面。</p>\n<br>\n\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201202084724368-40559622.jpg\" alt=\"关系图\"></p>\n<h2 id=\"二、相互转化\"><a href=\"#二、相互转化\" class=\"headerlink\" title=\"二、相互转化\"></a>二、相互转化</h2><h3 id=\"1-File、Blob-转化成-dataURL\"><a href=\"#1-File、Blob-转化成-dataURL\" class=\"headerlink\" title=\"1. File、Blob 转化成 dataURL\"></a>1. File、Blob 转化成 dataURL</h3><blockquote>\n<p>FileReader 对象允许 Web 应用程序异步读取文件(或原始数据缓冲区)内容，使用 File 或 Blob 对象指定要读取的文件或数据。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileToDataURL</span>(<span class=\"params\">file</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsDataURL(file)</span><br><span class=\"line\">    <span class=\"comment\">// reader 读取文件成功的回调</span></span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> reader.result</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"2-dataURL-base64-转化成-Blob-二进制-对象\"><a href=\"#2-dataURL-base64-转化成-Blob-二进制-对象\" class=\"headerlink\" title=\"2. dataURL(base64) 转化成 Blob(二进制)对象\"></a>2. dataURL(base64) 转化成 Blob(二进制)对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataURLToBlob</span>(<span class=\"params\">fileDataURL</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = fileDataURL.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">        mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">        bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">        n = bstr.length,</span><br><span class=\"line\">        u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">      u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<h3 id=\"3-File-Blob-文件数据绘制到-canvas\"><a href=\"#3-File-Blob-文件数据绘制到-canvas\" class=\"headerlink\" title=\"3. File, Blob 文件数据绘制到 canvas\"></a>3. File, Blob 文件数据绘制到 canvas</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 思路：File, Blob ——&gt; dataURL ——&gt; canvas</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileAndBlobToCanvas</span>(<span class=\"params\">fileDataURL</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!canvas.getContext) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器不支持canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;container&#x27;</span>).appendChild(canvas)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h3 id=\"4-从-canvas-中获取文件-dataURL\"><a href=\"#4-从-canvas-中获取文件-dataURL\" class=\"headerlink\" title=\"4. 从 canvas 中获取文件 dataURL\"></a>4. 从 canvas 中获取文件 dataURL</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvasDataURL = canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> canvasDataURL</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、完整栗子\"><a href=\"#三、完整栗子\" class=\"headerlink\" title=\"三、完整栗子\"></a>三、完整栗子</h2><blockquote>\n<p>可以点击 <a class=\"link\"   href=\"http://8.131.67.8:8088/file.html\" >这里<i class=\"fas fa-external-link-alt\"></i></a> 在线预览</p>\n</blockquote>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202011/1855591-20201125144437125-1637282205.png\" alt=\"预览图\"></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">11</span>-<span class=\"number\">22</span> <span class=\"number\">14</span>:<span class=\"number\">33</span>:<span class=\"number\">55</span></span><br><span class=\"line\"> * @information: datadURL File Blob canvas 的互相转化</span><br><span class=\"line\"> * </span><br><span class=\"line\"> * File.prototype <span class=\"keyword\">instanceof</span> Blob === <span class=\"literal\">true</span></span><br><span class=\"line\"> * Blob.prototype <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span> === <span class=\"literal\">true</span></span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">  &lt;meta charset=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span><br><span class=\"line\">  &lt;meta name=<span class=\"string\">&quot;viewport&quot;</span> content=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class=\"line\">  &lt;title&gt;datadURL File Blob canvas&lt;/title&gt;</span><br><span class=\"line\">  &lt;style&gt;</span><br><span class=\"line\">    .body &#123;</span><br><span class=\"line\">      text-align: center;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    .img-box &#123;</span><br><span class=\"line\">      margin: 20px <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    #img &#123;</span><br><span class=\"line\">      width: <span class=\"number\">60</span>%;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  </span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;body&quot;</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;input-box&quot;</span>&gt;</span><br><span class=\"line\">      &lt;input id=<span class=\"string\">&quot;input&quot;</span> type=<span class=\"string\">&quot;file&quot;</span> accept=<span class=\"string\">&quot;image/png, image/jpeg&quot;</span> onchange=<span class=\"string\">&quot;onChangeInput()&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;img-box&quot;</span>&gt;</span><br><span class=\"line\">      img: </span><br><span class=\"line\">      &lt;img src=<span class=\"string\">&quot;&quot;</span> alt=<span class=\"string\">&quot;img&quot;</span> id=<span class=\"string\">&quot;img&quot;</span>&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">&quot;canvas-box&quot;</span> id=<span class=\"string\">&quot;canvas-box&quot;</span>&gt;</span><br><span class=\"line\">      canvas: </span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">  <span class=\"comment\">// 文件对象</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> file; </span><br><span class=\"line\">  <span class=\"comment\">// 文件 base64 码</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> fileDataURL;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:32:51</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 获取文件</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onChangeInput</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;input&#x27;</span>).files[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;file-&gt;&#x27;</span>, file)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!FileReader) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器版本过低，请升级版本&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fileToDataURL()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:31:47</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 使用 FileReader 读取文件内容， File(二进制) ——&gt; dataURL(base64)   Blob ——&gt; dataURL 同理</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> reader = <span class=\"keyword\">new</span> FileReader()</span><br><span class=\"line\">    reader.readAsDataURL(file)</span><br><span class=\"line\">    reader.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;dataURL-&gt;&#x27;</span>, reader.result)</span><br><span class=\"line\">      fileDataURL = reader.result</span><br><span class=\"line\">      showImg()</span><br><span class=\"line\">      dataURLToBlob()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:33:13</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 图片回显</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showImg</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;img&#x27;</span>)</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:34:47</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: dataURL(base64) ——&gt; Blob(二进制)对象</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataURLToBlob</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> arr = fileDataURL.split(<span class=\"string\">&#x27;,&#x27;</span>),</span><br><span class=\"line\">        mime = arr[<span class=\"number\">0</span>].match(<span class=\"regexp\">/:(.*?);/</span>)[<span class=\"number\">1</span>],</span><br><span class=\"line\">        bstr = atob(arr[<span class=\"number\">1</span>]),</span><br><span class=\"line\">        n = bstr.length,</span><br><span class=\"line\">        u8arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Uint8Array</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n --) &#123;</span><br><span class=\"line\">      u8arr[n] = bstr.charCodeAt(n)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;blob-&gt;&#x27;</span>, <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;))</span><br><span class=\"line\">    fileAndBlobToCanvas()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Blob([u8arr], &#123;<span class=\"attr\">type</span>: mime&#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 10:53:31</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: File, Blob 文件数据绘制到 canvas</span></span><br><span class=\"line\"><span class=\"comment\">   * 思路：File, Blob ——&gt; dataURL ——&gt; canvas</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fileAndBlobToCanvas</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> img = <span class=\"keyword\">new</span> Image()</span><br><span class=\"line\">    img.src = fileDataURL</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!canvas.getContext) &#123;</span><br><span class=\"line\">      alert(<span class=\"string\">&#x27;浏览器不支持canvas&#x27;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> ctx = canvas.getContext(<span class=\"string\">&#x27;2d&#x27;</span>)</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;canvas-box&#x27;</span>).appendChild(canvas)</span><br><span class=\"line\">    img.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      ctx.drawImage(img, <span class=\"number\">0</span>, <span class=\"number\">0</span>, canvas.width, canvas.height)</span><br><span class=\"line\">      canvasToDataURL()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@Date</span>: 2020-11-25 11:23:54</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@information</span>: 从 canvas 中获取文件 dataURL </span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canvasToDataURL</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvas = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;canvas&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> canvasDataURL = canvas.toDataURL(<span class=\"string\">&#x27;image/png&#x27;</span>, <span class=\"number\">1.0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;从 canvas 中获取文件 dataURL :&#x27;</span>, canvasDataURL)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><br></p>\n"},{"title":"vue-cli3.x多页面配置","date":"2020-12-12T10:21:03.000Z","_content":"\n\n## 一、前言\n\n### 1. 单页面（SPA Single-Page-Application）\n\n\n（1）入口：单页面只是一张 Web 页面的模式，只有一个 html 文件，整个项目只有一个入口文件。\n\n（2）资源加载：单页面应用的资源只在开始初始化进入的的时候加载一次（属于全局加载使用），之后的组件跳转不再重新加载。项目初始化压力较大。\n\n（3）页面跳转：单页面内的页面跳转其实是 vue 运用了 vue-router 实现了组件切换。\n\n（4）数据传递：可通过全局变量、参数或 store 进行数据交互。 \n\n\n### 2. 多页面（MPA Multi-Page-Application）\n\n（1）入口：多页面是多张 web 页面的模式，有多个 html 文件，整个项目有多个入口文件。\n\n（2）资源加载：多页面之间的资源互不影响，npm 依赖包是全局安装，但是在多页面每个入口文件（main.js）手动按需引入。多页面之间资源互不共享，跳转需要资源重新加载，项目初始化压力较小，但多页面之间跳转资源需重新加载，压力相对较大。\n\n（3）页面跳转：多页面的单个页面内部是 vue-router 形式的组件切换；多页面之间需通过 a 标签跳转页面。\n\n（4）数据传递：多页面的单个页面内部和 SPA 一致；多页面之间需通过地址栏传参形式进行数据交互。\n\n\n![对比1](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201181302818-1993906304.png)\n\n![对比2](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201185858593-1215493062.png)\n\n<br>\n\n## 二、配置\n\n### 1. 新建项目 demo \n\n（1）通过 `vue-cli 3.x` 新建项目（vue create demo），删除项目中自带的 `App.vue` 和 `main.js`\n\n（2）安装 `path` 和 `glob` 依赖包（npm i path -D 、npm i glob -D）\n\n### 2. 配置入口文件\n\n（1） 在 `src` 目录下新建 `pages` 用于配置多页面模块的文件夹。\n\n（2）在 `pages` 文件夹下新建多页面模块，在此举栗 `home` 和 `index` 文件夹。\n\n（3）在多页面的模块下（`home` 和 `index`），分别新建 `App.vue` 和 `main.js`，按原有的内容填充这两个文件，用于每个页面模块的入口。 \n\n\n```javascript\n<!--\n * @Date: 2020-12-01 13:53:49\n * @information: App.vue\n-->\n<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n}\n</style>\n```\n\n\n```javascript\n/*\n * @Date: 2020-12-01 13:53:55\n * @information: main.js\n */\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from '../../router/home'\nimport store from '../../store'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n```\n\n\n\n### 3. 添加全局启动和打包配置\n\n（1）在项目根目录下新建 `vue.config.js` 配置文件 \n\n（2）添加入口声明配置 和 打包配置，具体如下：\n\n```javascript\n/*\n * @Date: 2020-12-01 11:35:31\n * @information: vue.config.js\n */\nconst path = require('path')\nconst glob = require('glob')\n\nconst titles = {\n  home: '这是home标题',\n  index: '这是index标题'\n}\n\n// 获取pages文件夹下的文件\nfunction getEntry(globPath) {\n  let entries = {}, tmp;\n  // 读取js文件\n  glob.sync(globPath+'js').forEach(function(entry) {\n    tmp = entry.split('/').splice(-3)\n    entries[tmp[1]] = {\n      entry,\n      template: 'index.html',\n      filename: tmp[1] + '.html',\n      title: titles[tmp[1]],\n    }\n  })\n  return entries\n}\n\nconst htmls = getEntry('./src/pages/**/*.')\n\nmodule.exports = {\n  pages: htmls,\n  publicPath: './',\n  outputDir: 'dist', // 打包后的文件夹名称，默认dist\n  devServer: {\n    open: true,\n    hot: true,\n    index: './index.html', // 默认启动页面\n    host: '0.0.0.0',\n    port: 8090,\n  },\n  productionSourceMap: false, // 生产环境是否生成 sourceMap 文件\n}\n```\n\n<br>\n\n## 三、爬坑注意\n\n### 1. 项目目录划分\n\n（1）将 `components` 、`router`、`views`、`store` 、静态数据配置层、业务层等文件结构按照多页面模块严格划分，多页面之间不容有业务上的耦合，防止进坑。\n\n（2）对于每个页面模块所用到的资源按需引入，减轻模块加载压力。\n\n### 2. 项目目录及打包的 html 文件如图\n\n（1）项目访问地址方式：【http://localhost:8090/home.html#/about】 先指定要访问的静态 html 文件，再添加此页面下的路由地址即可。\n\n\n![项目 pages 文件夹](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182116492-1947954617.png)\n\n项目 pages 文件夹\n\n<br>\n\n![home.html 文](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182158294-281140356.png)\n\n![index.html](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182206734-111809435.png)\n\n项目打包后的多页面生成的 html 文件\n\n\n<br><br><br>\n\n","source":"_posts/vue-cli3-x多页面配置.md","raw":"---\ntitle: vue-cli3.x多页面配置\ndate: 2020-12-12 18:21:03\ntags: [多页面, vue]\ncategories: Vue\n---\n\n\n## 一、前言\n\n### 1. 单页面（SPA Single-Page-Application）\n\n\n（1）入口：单页面只是一张 Web 页面的模式，只有一个 html 文件，整个项目只有一个入口文件。\n\n（2）资源加载：单页面应用的资源只在开始初始化进入的的时候加载一次（属于全局加载使用），之后的组件跳转不再重新加载。项目初始化压力较大。\n\n（3）页面跳转：单页面内的页面跳转其实是 vue 运用了 vue-router 实现了组件切换。\n\n（4）数据传递：可通过全局变量、参数或 store 进行数据交互。 \n\n\n### 2. 多页面（MPA Multi-Page-Application）\n\n（1）入口：多页面是多张 web 页面的模式，有多个 html 文件，整个项目有多个入口文件。\n\n（2）资源加载：多页面之间的资源互不影响，npm 依赖包是全局安装，但是在多页面每个入口文件（main.js）手动按需引入。多页面之间资源互不共享，跳转需要资源重新加载，项目初始化压力较小，但多页面之间跳转资源需重新加载，压力相对较大。\n\n（3）页面跳转：多页面的单个页面内部是 vue-router 形式的组件切换；多页面之间需通过 a 标签跳转页面。\n\n（4）数据传递：多页面的单个页面内部和 SPA 一致；多页面之间需通过地址栏传参形式进行数据交互。\n\n\n![对比1](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201181302818-1993906304.png)\n\n![对比2](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201185858593-1215493062.png)\n\n<br>\n\n## 二、配置\n\n### 1. 新建项目 demo \n\n（1）通过 `vue-cli 3.x` 新建项目（vue create demo），删除项目中自带的 `App.vue` 和 `main.js`\n\n（2）安装 `path` 和 `glob` 依赖包（npm i path -D 、npm i glob -D）\n\n### 2. 配置入口文件\n\n（1） 在 `src` 目录下新建 `pages` 用于配置多页面模块的文件夹。\n\n（2）在 `pages` 文件夹下新建多页面模块，在此举栗 `home` 和 `index` 文件夹。\n\n（3）在多页面的模块下（`home` 和 `index`），分别新建 `App.vue` 和 `main.js`，按原有的内容填充这两个文件，用于每个页面模块的入口。 \n\n\n```javascript\n<!--\n * @Date: 2020-12-01 13:53:49\n * @information: App.vue\n-->\n<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n}\n</style>\n```\n\n\n```javascript\n/*\n * @Date: 2020-12-01 13:53:55\n * @information: main.js\n */\nimport Vue from 'vue'\nimport App from './App.vue'\nimport router from '../../router/home'\nimport store from '../../store'\n\nVue.config.productionTip = false\n\nnew Vue({\n  router,\n  store,\n  render: h => h(App)\n}).$mount('#app')\n```\n\n\n\n### 3. 添加全局启动和打包配置\n\n（1）在项目根目录下新建 `vue.config.js` 配置文件 \n\n（2）添加入口声明配置 和 打包配置，具体如下：\n\n```javascript\n/*\n * @Date: 2020-12-01 11:35:31\n * @information: vue.config.js\n */\nconst path = require('path')\nconst glob = require('glob')\n\nconst titles = {\n  home: '这是home标题',\n  index: '这是index标题'\n}\n\n// 获取pages文件夹下的文件\nfunction getEntry(globPath) {\n  let entries = {}, tmp;\n  // 读取js文件\n  glob.sync(globPath+'js').forEach(function(entry) {\n    tmp = entry.split('/').splice(-3)\n    entries[tmp[1]] = {\n      entry,\n      template: 'index.html',\n      filename: tmp[1] + '.html',\n      title: titles[tmp[1]],\n    }\n  })\n  return entries\n}\n\nconst htmls = getEntry('./src/pages/**/*.')\n\nmodule.exports = {\n  pages: htmls,\n  publicPath: './',\n  outputDir: 'dist', // 打包后的文件夹名称，默认dist\n  devServer: {\n    open: true,\n    hot: true,\n    index: './index.html', // 默认启动页面\n    host: '0.0.0.0',\n    port: 8090,\n  },\n  productionSourceMap: false, // 生产环境是否生成 sourceMap 文件\n}\n```\n\n<br>\n\n## 三、爬坑注意\n\n### 1. 项目目录划分\n\n（1）将 `components` 、`router`、`views`、`store` 、静态数据配置层、业务层等文件结构按照多页面模块严格划分，多页面之间不容有业务上的耦合，防止进坑。\n\n（2）对于每个页面模块所用到的资源按需引入，减轻模块加载压力。\n\n### 2. 项目目录及打包的 html 文件如图\n\n（1）项目访问地址方式：【http://localhost:8090/home.html#/about】 先指定要访问的静态 html 文件，再添加此页面下的路由地址即可。\n\n\n![项目 pages 文件夹](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182116492-1947954617.png)\n\n项目 pages 文件夹\n\n<br>\n\n![home.html 文](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182158294-281140356.png)\n\n![index.html](https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182206734-111809435.png)\n\n项目打包后的多页面生成的 html 文件\n\n\n<br><br><br>\n\n","slug":"vue-cli3-x多页面配置","published":1,"updated":"2020-12-12T10:27:14.121Z","_id":"ckiljwtmh0000iwqc175mfshj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"1-单页面（SPA-Single-Page-Application）\"><a href=\"#1-单页面（SPA-Single-Page-Application）\" class=\"headerlink\" title=\"1. 单页面（SPA Single-Page-Application）\"></a>1. 单页面（SPA Single-Page-Application）</h3><p>（1）入口：单页面只是一张 Web 页面的模式，只有一个 html 文件，整个项目只有一个入口文件。</p>\n<p>（2）资源加载：单页面应用的资源只在开始初始化进入的的时候加载一次（属于全局加载使用），之后的组件跳转不再重新加载。项目初始化压力较大。</p>\n<p>（3）页面跳转：单页面内的页面跳转其实是 vue 运用了 vue-router 实现了组件切换。</p>\n<p>（4）数据传递：可通过全局变量、参数或 store 进行数据交互。 </p>\n<h3 id=\"2-多页面（MPA-Multi-Page-Application）\"><a href=\"#2-多页面（MPA-Multi-Page-Application）\" class=\"headerlink\" title=\"2. 多页面（MPA Multi-Page-Application）\"></a>2. 多页面（MPA Multi-Page-Application）</h3><p>（1）入口：多页面是多张 web 页面的模式，有多个 html 文件，整个项目有多个入口文件。</p>\n<p>（2）资源加载：多页面之间的资源互不影响，npm 依赖包是全局安装，但是在多页面每个入口文件（main.js）手动按需引入。多页面之间资源互不共享，跳转需要资源重新加载，项目初始化压力较小，但多页面之间跳转资源需重新加载，压力相对较大。</p>\n<p>（3）页面跳转：多页面的单个页面内部是 vue-router 形式的组件切换；多页面之间需通过 a 标签跳转页面。</p>\n<p>（4）数据传递：多页面的单个页面内部和 SPA 一致；多页面之间需通过地址栏传参形式进行数据交互。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201181302818-1993906304.png\" alt=\"对比1\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201185858593-1215493062.png\" alt=\"对比2\"></p>\n<br>\n\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><h3 id=\"1-新建项目-demo\"><a href=\"#1-新建项目-demo\" class=\"headerlink\" title=\"1. 新建项目 demo\"></a>1. 新建项目 demo</h3><p>（1）通过 <code>vue-cli 3.x</code> 新建项目（vue create demo），删除项目中自带的 <code>App.vue</code> 和 <code>main.js</code></p>\n<p>（2）安装 <code>path</code> 和 <code>glob</code> 依赖包（npm i path -D 、npm i glob -D）</p>\n<h3 id=\"2-配置入口文件\"><a href=\"#2-配置入口文件\" class=\"headerlink\" title=\"2. 配置入口文件\"></a>2. 配置入口文件</h3><p>（1） 在 <code>src</code> 目录下新建 <code>pages</code> 用于配置多页面模块的文件夹。</p>\n<p>（2）在 <code>pages</code> 文件夹下新建多页面模块，在此举栗 <code>home</code> 和 <code>index</code> 文件夹。</p>\n<p>（3）在多页面的模块下（<code>home</code> 和 <code>index</code>），分别新建 <code>App.vue</code> 和 <code>main.js</code>，按原有的内容填充这两个文件，用于每个页面模块的入口。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">01</span> <span class=\"number\">13</span>:<span class=\"number\">53</span>:<span class=\"number\">49</span></span><br><span class=\"line\"> * @information: App.vue</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;router-view/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">#app &#123;</span><br><span class=\"line\">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  -webkit-font-smoothing: antialiased;</span><br><span class=\"line\">  -moz-osx-font-smoothing: grayscale;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2020-12-01 13:53:55</span></span><br><span class=\"line\"><span class=\"comment\"> * @information: main.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../router/home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-添加全局启动和打包配置\"><a href=\"#3-添加全局启动和打包配置\" class=\"headerlink\" title=\"3. 添加全局启动和打包配置\"></a>3. 添加全局启动和打包配置</h3><p>（1）在项目根目录下新建 <code>vue.config.js</code> 配置文件 </p>\n<p>（2）添加入口声明配置 和 打包配置，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2020-12-01 11:35:31</span></span><br><span class=\"line\"><span class=\"comment\"> * @information: vue.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> titles = &#123;</span><br><span class=\"line\">  home: <span class=\"string\">&#x27;这是home标题&#x27;</span>,</span><br><span class=\"line\">  index: <span class=\"string\">&#x27;这是index标题&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取pages文件夹下的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEntry</span>(<span class=\"params\">globPath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entries = &#123;&#125;, tmp;</span><br><span class=\"line\">  <span class=\"comment\">// 读取js文件</span></span><br><span class=\"line\">  glob.sync(globPath+<span class=\"string\">&#x27;js&#x27;</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">    tmp = entry.split(<span class=\"string\">&#x27;/&#x27;</span>).splice(-<span class=\"number\">3</span>)</span><br><span class=\"line\">    entries[tmp[<span class=\"number\">1</span>]] = &#123;</span><br><span class=\"line\">      entry,</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">      filename: tmp[<span class=\"number\">1</span>] + <span class=\"string\">&#x27;.html&#x27;</span>,</span><br><span class=\"line\">      title: titles[tmp[<span class=\"number\">1</span>]],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> entries</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmls = getEntry(<span class=\"string\">&#x27;./src/pages/**/*.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  pages: htmls,</span><br><span class=\"line\">  publicPath: <span class=\"string\">&#x27;./&#x27;</span>,</span><br><span class=\"line\">  outputDir: <span class=\"string\">&#x27;dist&#x27;</span>, <span class=\"comment\">// 打包后的文件夹名称，默认dist</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"comment\">// 默认启动页面</span></span><br><span class=\"line\">    host: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8090</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>, <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、爬坑注意\"><a href=\"#三、爬坑注意\" class=\"headerlink\" title=\"三、爬坑注意\"></a>三、爬坑注意</h2><h3 id=\"1-项目目录划分\"><a href=\"#1-项目目录划分\" class=\"headerlink\" title=\"1. 项目目录划分\"></a>1. 项目目录划分</h3><p>（1）将 <code>components</code> 、<code>router</code>、<code>views</code>、<code>store</code> 、静态数据配置层、业务层等文件结构按照多页面模块严格划分，多页面之间不容有业务上的耦合，防止进坑。</p>\n<p>（2）对于每个页面模块所用到的资源按需引入，减轻模块加载压力。</p>\n<h3 id=\"2-项目目录及打包的-html-文件如图\"><a href=\"#2-项目目录及打包的-html-文件如图\" class=\"headerlink\" title=\"2. 项目目录及打包的 html 文件如图\"></a>2. 项目目录及打包的 html 文件如图</h3><p>（1）项目访问地址方式：【<a class=\"link\"   href=\"http://localhost:8090/home.html#/about%E3%80%91\" >http://localhost:8090/home.html#/about】<i class=\"fas fa-external-link-alt\"></i></a> 先指定要访问的静态 html 文件，再添加此页面下的路由地址即可。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182116492-1947954617.png\" alt=\"项目 pages 文件夹\"></p>\n<p>项目 pages 文件夹</p>\n<br>\n\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182158294-281140356.png\" alt=\"home.html 文\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182206734-111809435.png\" alt=\"index.html\"></p>\n<p>项目打包后的多页面生成的 html 文件</p>\n<p><br><br><br></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><h3 id=\"1-单页面（SPA-Single-Page-Application）\"><a href=\"#1-单页面（SPA-Single-Page-Application）\" class=\"headerlink\" title=\"1. 单页面（SPA Single-Page-Application）\"></a>1. 单页面（SPA Single-Page-Application）</h3><p>（1）入口：单页面只是一张 Web 页面的模式，只有一个 html 文件，整个项目只有一个入口文件。</p>\n<p>（2）资源加载：单页面应用的资源只在开始初始化进入的的时候加载一次（属于全局加载使用），之后的组件跳转不再重新加载。项目初始化压力较大。</p>\n<p>（3）页面跳转：单页面内的页面跳转其实是 vue 运用了 vue-router 实现了组件切换。</p>\n<p>（4）数据传递：可通过全局变量、参数或 store 进行数据交互。 </p>\n<h3 id=\"2-多页面（MPA-Multi-Page-Application）\"><a href=\"#2-多页面（MPA-Multi-Page-Application）\" class=\"headerlink\" title=\"2. 多页面（MPA Multi-Page-Application）\"></a>2. 多页面（MPA Multi-Page-Application）</h3><p>（1）入口：多页面是多张 web 页面的模式，有多个 html 文件，整个项目有多个入口文件。</p>\n<p>（2）资源加载：多页面之间的资源互不影响，npm 依赖包是全局安装，但是在多页面每个入口文件（main.js）手动按需引入。多页面之间资源互不共享，跳转需要资源重新加载，项目初始化压力较小，但多页面之间跳转资源需重新加载，压力相对较大。</p>\n<p>（3）页面跳转：多页面的单个页面内部是 vue-router 形式的组件切换；多页面之间需通过 a 标签跳转页面。</p>\n<p>（4）数据传递：多页面的单个页面内部和 SPA 一致；多页面之间需通过地址栏传参形式进行数据交互。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201181302818-1993906304.png\" alt=\"对比1\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201185858593-1215493062.png\" alt=\"对比2\"></p>\n<br>\n\n<h2 id=\"二、配置\"><a href=\"#二、配置\" class=\"headerlink\" title=\"二、配置\"></a>二、配置</h2><h3 id=\"1-新建项目-demo\"><a href=\"#1-新建项目-demo\" class=\"headerlink\" title=\"1. 新建项目 demo\"></a>1. 新建项目 demo</h3><p>（1）通过 <code>vue-cli 3.x</code> 新建项目（vue create demo），删除项目中自带的 <code>App.vue</code> 和 <code>main.js</code></p>\n<p>（2）安装 <code>path</code> 和 <code>glob</code> 依赖包（npm i path -D 、npm i glob -D）</p>\n<h3 id=\"2-配置入口文件\"><a href=\"#2-配置入口文件\" class=\"headerlink\" title=\"2. 配置入口文件\"></a>2. 配置入口文件</h3><p>（1） 在 <code>src</code> 目录下新建 <code>pages</code> 用于配置多页面模块的文件夹。</p>\n<p>（2）在 <code>pages</code> 文件夹下新建多页面模块，在此举栗 <code>home</code> 和 <code>index</code> 文件夹。</p>\n<p>（3）在多页面的模块下（<code>home</code> 和 <code>index</code>），分别新建 <code>App.vue</code> 和 <code>main.js</code>，按原有的内容填充这两个文件，用于每个页面模块的入口。 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--</span><br><span class=\"line\"> * @<span class=\"built_in\">Date</span>: <span class=\"number\">2020</span>-<span class=\"number\">12</span>-<span class=\"number\">01</span> <span class=\"number\">13</span>:<span class=\"number\">53</span>:<span class=\"number\">49</span></span><br><span class=\"line\"> * @information: App.vue</span><br><span class=\"line\">--&gt;</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=<span class=\"string\">&quot;app&quot;</span>&gt;</span><br><span class=\"line\">    &lt;router-view/&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">#app &#123;</span><br><span class=\"line\">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class=\"line\">  -webkit-font-smoothing: antialiased;</span><br><span class=\"line\">  -moz-osx-font-smoothing: grayscale;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2020-12-01 13:53:55</span></span><br><span class=\"line\"><span class=\"comment\"> * @information: main.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> router <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../router/home&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.config.productionTip = <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  router,</span><br><span class=\"line\">  store,</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App)</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-添加全局启动和打包配置\"><a href=\"#3-添加全局启动和打包配置\" class=\"headerlink\" title=\"3. 添加全局启动和打包配置\"></a>3. 添加全局启动和打包配置</h3><p>（1）在项目根目录下新建 <code>vue.config.js</code> 配置文件 </p>\n<p>（2）添加入口声明配置 和 打包配置，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2020-12-01 11:35:31</span></span><br><span class=\"line\"><span class=\"comment\"> * @information: vue.config.js</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;glob&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> titles = &#123;</span><br><span class=\"line\">  home: <span class=\"string\">&#x27;这是home标题&#x27;</span>,</span><br><span class=\"line\">  index: <span class=\"string\">&#x27;这是index标题&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取pages文件夹下的文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getEntry</span>(<span class=\"params\">globPath</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> entries = &#123;&#125;, tmp;</span><br><span class=\"line\">  <span class=\"comment\">// 读取js文件</span></span><br><span class=\"line\">  glob.sync(globPath+<span class=\"string\">&#x27;js&#x27;</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">    tmp = entry.split(<span class=\"string\">&#x27;/&#x27;</span>).splice(-<span class=\"number\">3</span>)</span><br><span class=\"line\">    entries[tmp[<span class=\"number\">1</span>]] = &#123;</span><br><span class=\"line\">      entry,</span><br><span class=\"line\">      template: <span class=\"string\">&#x27;index.html&#x27;</span>,</span><br><span class=\"line\">      filename: tmp[<span class=\"number\">1</span>] + <span class=\"string\">&#x27;.html&#x27;</span>,</span><br><span class=\"line\">      title: titles[tmp[<span class=\"number\">1</span>]],</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> entries</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmls = getEntry(<span class=\"string\">&#x27;./src/pages/**/*.&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  pages: htmls,</span><br><span class=\"line\">  publicPath: <span class=\"string\">&#x27;./&#x27;</span>,</span><br><span class=\"line\">  outputDir: <span class=\"string\">&#x27;dist&#x27;</span>, <span class=\"comment\">// 打包后的文件夹名称，默认dist</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    open: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;./index.html&#x27;</span>, <span class=\"comment\">// 默认启动页面</span></span><br><span class=\"line\">    host: <span class=\"string\">&#x27;0.0.0.0&#x27;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8090</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  productionSourceMap: <span class=\"literal\">false</span>, <span class=\"comment\">// 生产环境是否生成 sourceMap 文件</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<br>\n\n<h2 id=\"三、爬坑注意\"><a href=\"#三、爬坑注意\" class=\"headerlink\" title=\"三、爬坑注意\"></a>三、爬坑注意</h2><h3 id=\"1-项目目录划分\"><a href=\"#1-项目目录划分\" class=\"headerlink\" title=\"1. 项目目录划分\"></a>1. 项目目录划分</h3><p>（1）将 <code>components</code> 、<code>router</code>、<code>views</code>、<code>store</code> 、静态数据配置层、业务层等文件结构按照多页面模块严格划分，多页面之间不容有业务上的耦合，防止进坑。</p>\n<p>（2）对于每个页面模块所用到的资源按需引入，减轻模块加载压力。</p>\n<h3 id=\"2-项目目录及打包的-html-文件如图\"><a href=\"#2-项目目录及打包的-html-文件如图\" class=\"headerlink\" title=\"2. 项目目录及打包的 html 文件如图\"></a>2. 项目目录及打包的 html 文件如图</h3><p>（1）项目访问地址方式：【<a class=\"link\"   href=\"http://localhost:8090/home.html#/about%E3%80%91\" >http://localhost:8090/home.html#/about】<i class=\"fas fa-external-link-alt\"></i></a> 先指定要访问的静态 html 文件，再添加此页面下的路由地址即可。</p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182116492-1947954617.png\" alt=\"项目 pages 文件夹\"></p>\n<p>项目 pages 文件夹</p>\n<br>\n\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182158294-281140356.png\" alt=\"home.html 文\"></p>\n<p><img src=\"https://img2020.cnblogs.com/blog/1855591/202012/1855591-20201201182206734-111809435.png\" alt=\"index.html\"></p>\n<p>项目打包后的多页面生成的 html 文件</p>\n<p><br><br><br></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckileat3b0001u8qc8rs9gu7b","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckileat3h0008u8qcbq5uggxo"},{"post_id":"ckilgy7tb0000qwqc90gqe5pl","category_id":"ckilgz6m00001qwqc07rt76iy","_id":"ckilgz6m10004qwqccizaeypv"},{"post_id":"ckili3kay0006qwqceksx25r4","category_id":"ckilgz6m00001qwqc07rt76iy","_id":"ckili4gie0008qwqc69hrbe39"},{"post_id":"ckilibqq90000hoqcdpqef2u8","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckilibqqj0002hoqc5iyaa1p5"},{"post_id":"ckilih44f0000d8qc3u8j2pj9","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckilih44l0002d8qccn8i39pb"},{"post_id":"ckilj6q7o00006gqc3kd7c0v8","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckilj6q7x00026gqc199w0a3u"},{"post_id":"ckiljegm30000sgqc5qc318wo","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckiljegma0002sgqcb0zchv1o"},{"post_id":"ckiljkxkx00001gqcaf9j4hh6","category_id":"ckiljkxl300011gqc7lpdbfil","_id":"ckiljkxl600041gqcad0w9x06"},{"post_id":"ckiljq12x0000kcqc5wxe9xfe","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckiljq1350002kcqcans4co17"},{"post_id":"ckiljt3wa0000ygqc6sw93i5k","category_id":"ckileat3e0003u8qc6jrygnux","_id":"ckiljt3x30002ygqc728e41i5"},{"post_id":"ckiljwtmh0000iwqc175mfshj","category_id":"ckilgz6m00001qwqc07rt76iy","_id":"ckiljwtmm0002iwqceh668ozj"}],"PostTag":[{"post_id":"ckileat3b0001u8qc8rs9gu7b","tag_id":"ckileat3f0004u8qchd7w2jig","_id":"ckileat3h0007u8qc7lniahp2"},{"post_id":"ckilgy7tb0000qwqc90gqe5pl","tag_id":"ckili6n6c0000koqcagon404w","_id":"ckili6n6e0002koqcg4540y3x"},{"post_id":"ckilgy7tb0000qwqc90gqe5pl","tag_id":"ckili6n6e0001koqc6kna3old","_id":"ckili6n6e0003koqc1qcw2lbh"},{"post_id":"ckili3kay0006qwqceksx25r4","tag_id":"ckili7f470000egqcepqza23f","_id":"ckili7f490002egqcba890zdw"},{"post_id":"ckili3kay0006qwqceksx25r4","tag_id":"ckili7f490001egqc0odd4ix4","_id":"ckili7f490003egqc5h6ob33w"},{"post_id":"ckilibqq90000hoqcdpqef2u8","tag_id":"ckilibqqh0001hoqc7t0i2e7h","_id":"ckilibqqk0003hoqc3nom2tic"},{"post_id":"ckilih44f0000d8qc3u8j2pj9","tag_id":"ckilih44k0001d8qc9qfi4hc9","_id":"ckilih44m0003d8qca88a1rz9"},{"post_id":"ckilj6q7o00006gqc3kd7c0v8","tag_id":"ckilj6q7v00016gqc3zfx7f9j","_id":"ckilj6q7x00036gqc9pq6b9fm"},{"post_id":"ckiljegm30000sgqc5qc318wo","tag_id":"ckiljegm80001sgqc6obq2vwm","_id":"ckiljegmb0004sgqcg1v2dlv2"},{"post_id":"ckiljegm30000sgqc5qc318wo","tag_id":"ckiljegma0003sgqchrlx5xj8","_id":"ckiljegmb0005sgqcbmnw7wk2"},{"post_id":"ckiljkxkx00001gqcaf9j4hh6","tag_id":"ckiljkxl500021gqc04z8h7tj","_id":"ckiljkxl600031gqcbhdg9sqw"},{"post_id":"ckiljq12x0000kcqc5wxe9xfe","tag_id":"ckiljq1310001kcqc6oludux6","_id":"ckiljq1360003kcqcdbb6cpl4"},{"post_id":"ckiljt3wa0000ygqc6sw93i5k","tag_id":"ckiljt3wo0001ygqc316xhwq2","_id":"ckiljt3x30003ygqcbicr924u"},{"post_id":"ckiljwtmh0000iwqc175mfshj","tag_id":"ckiljwtmj0001iwqc33cu6dr1","_id":"ckiljwtmm0003iwqc4r2n1m2v"},{"post_id":"ckiljwtmh0000iwqc175mfshj","tag_id":"ckili6n6e0001koqc6kna3old","_id":"ckiljwtmn0004iwqc01hshjiz"}],"Tag":[{"name":"array","_id":"ckileat3f0004u8qchd7w2jig"},{"name":"跨域 vue","_id":"ckilgz6m00002qwqcei5a6cp5"},{"name":"插件 moment","_id":"ckili4gie0007qwqc9nr93wkn"},{"name":"跨域","_id":"ckili6n6c0000koqcagon404w"},{"name":"vue","_id":"ckili6n6e0001koqc6kna3old"},{"name":"插件","_id":"ckili7f470000egqcepqza23f"},{"name":"moment","_id":"ckili7f490001egqc0odd4ix4"},{"name":"前端存储","_id":"ckilibqqh0001hoqc7t0i2e7h"},{"name":"正则","_id":"ckilih44k0001d8qc9qfi4hc9"},{"name":"值与引用传递","_id":"ckilj6q7v00016gqc3zfx7f9j"},{"name":"原型链","_id":"ckiljegm80001sgqc6obq2vwm"},{"name":"面向对象","_id":"ckiljegma0003sgqchrlx5xj8"},{"name":"websocket","_id":"ckiljkxl500021gqc04z8h7tj"},{"name":"pdf","_id":"ckiljq1310001kcqc6oludux6"},{"name":"file","_id":"ckiljt3wo0001ygqc316xhwq2"},{"name":"多页面","_id":"ckiljwtmj0001iwqc33cu6dr1"}]}}